// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package airflow_cluster

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func ClusterResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"admin_password": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Sensitive:           true,
				Description:         "Password that is used to log in to Apache Airflow web UI under `admin` user.",
				MarkdownDescription: "Password that is used to log in to Apache Airflow web UI under `admin` user.",
				PlanModifiers: []planmodifier.String{
					adminPasswordModifier{},
				},
			},
			"airflow_config": schema.MapAttribute{
				ElementType: types.MapType{
					ElemType: types.StringType,
				},
				Optional:            true,
				Description:         "Configuration of the Apache Airflow application itself. The value of this attribute is a two-level map. Keys of top-level map are the names of [configuration sections](https://airflow.apache.org/docs/apache-airflow/stable/configurations-ref.html#airflow-configuration-options). Keys of inner maps are the names of configuration options within corresponding section.",
				MarkdownDescription: "Configuration of the Apache Airflow application itself. The value of this attribute is a two-level map. Keys of top-level map are the names of [configuration sections](https://airflow.apache.org/docs/apache-airflow/stable/configurations-ref.html#airflow-configuration-options). Keys of inner maps are the names of configuration options within corresponding section.",
				Validators: []validator.Map{
					airflowConfigValidator(),
				},
			},
			"airflow_version": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Apache Airflow version in format `<major>.<minor>`.",
				MarkdownDescription: "Apache Airflow version in format `<major>.<minor>`.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"code_sync": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"s3": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"bucket": schema.StringAttribute{
								Required:            true,
								Description:         "The name of the Object Storage bucket that stores DAG files used in the cluster.",
								MarkdownDescription: "The name of the Object Storage bucket that stores DAG files used in the cluster.",
							},
						},
						CustomType: S3Type{
							ObjectType: types.ObjectType{
								AttrTypes: S3Value{}.AttributeTypes(ctx),
							},
						},
						Required:            true,
						Description:         "Currently only Object Storage (S3) is supported as the source of DAG files.",
						MarkdownDescription: "Currently only Object Storage (S3) is supported as the source of DAG files.",
					},
				},
				CustomType: CodeSyncType{
					ObjectType: types.ObjectType{
						AttrTypes: CodeSyncValue{}.AttributeTypes(ctx),
					},
				},
				Required:            true,
				Description:         "Parameters of the location and access to the code that will be executed in the cluster.",
				MarkdownDescription: "Parameters of the location and access to the code that will be executed in the cluster.",
			},
			"created_at": schema.StringAttribute{
				Computed:            true,
				Description:         "The creation timestamp of the resource.",
				MarkdownDescription: "The creation timestamp of the resource.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"dag_processor": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"count": schema.Int64Attribute{
						Required:            true,
						Description:         "The number of dag-processor instances in the cluster.",
						MarkdownDescription: "The number of dag-processor instances in the cluster.",
					},
					"resource_preset_id": schema.StringAttribute{
						Required:            true,
						Description:         "The identifier of the preset for computational resources available to an instance (CPU, memory etc.).",
						MarkdownDescription: "The identifier of the preset for computational resources available to an instance (CPU, memory etc.).",
					},
				},
				CustomType: DagProcessorType{
					ObjectType: types.ObjectType{
						AttrTypes: DagProcessorValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Description:         "Configuration of dag-processor instances. Only for airflow version 3.*.",
				MarkdownDescription: "Configuration of dag-processor instances. Only for airflow version 3.*.",
				Validators: []validator.Object{
					dagProcessorValidator(),
				},
			},
			"deb_packages": schema.SetAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "System packages that are installed in the cluster.",
				MarkdownDescription: "System packages that are installed in the cluster.",
			},
			"deletion_protection": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The `true` value means that resource is protected from accidental deletion.",
				MarkdownDescription: "The `true` value means that resource is protected from accidental deletion.",
				Default:             booldefault.StaticBool(false),
			},
			"description": schema.StringAttribute{
				Optional:            true,
				Description:         "The resource description.",
				MarkdownDescription: "The resource description.",
			},
			"folder_id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.",
				MarkdownDescription: "The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The resource identifier.",
				MarkdownDescription: "The resource identifier.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"labels": schema.MapAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "A set of key/value label pairs which assigned to resource.",
				MarkdownDescription: "A set of key/value label pairs which assigned to resource.",
			},
			"lockbox_secrets_backend": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"enabled": schema.BoolAttribute{
						Required:            true,
						Description:         "Enables usage of Lockbox Secrets Backend.",
						MarkdownDescription: "Enables usage of Lockbox Secrets Backend.",
					},
				},
				CustomType: LockboxSecretsBackendType{
					ObjectType: types.ObjectType{
						AttrTypes: LockboxSecretsBackendValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Description:         "Configuration of Lockbox Secrets Backend. [See documentation](https://yandex.cloud/docs/managed-airflow/tutorials/lockbox-secrets-in-maf-cluster) for details.",
				MarkdownDescription: "Configuration of Lockbox Secrets Backend. [See documentation](https://yandex.cloud/docs/managed-airflow/tutorials/lockbox-secrets-in-maf-cluster) for details.",
			},
			"logging": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"enabled": schema.BoolAttribute{
						Required:            true,
						Description:         "Enables delivery of logs generated by the Airflow components to [Cloud Logging](https://yandex.cloud/docs/logging/).",
						MarkdownDescription: "Enables delivery of logs generated by the Airflow components to [Cloud Logging](https://yandex.cloud/docs/logging/).",
					},
					"folder_id": schema.StringAttribute{
						Optional:            true,
						Description:         "Logs will be written to **default log group** of specified folder. Exactly one of the attributes `folder_id` or `log_group_id` should be specified.",
						MarkdownDescription: "Logs will be written to **default log group** of specified folder. Exactly one of the attributes `folder_id` or `log_group_id` should be specified.",
					},
					"log_group_id": schema.StringAttribute{
						Optional:            true,
						Description:         "Logs will be written to the **specified log group**. Exactly one of the attributes `folder_id` or `log_group_id` should be specified.",
						MarkdownDescription: "Logs will be written to the **specified log group**. Exactly one of the attributes `folder_id` or `log_group_id` should be specified.",
					},
					"min_level": schema.StringAttribute{
						Optional:            true,
						Description:         "Minimum level of messages that will be sent to Cloud Logging. Can be either `TRACE`, `DEBUG`, `INFO`, `WARN`, `ERROR` or `FATAL`. If not set then server default is applied (currently `INFO`).",
						MarkdownDescription: "Minimum level of messages that will be sent to Cloud Logging. Can be either `TRACE`, `DEBUG`, `INFO`, `WARN`, `ERROR` or `FATAL`. If not set then server default is applied (currently `INFO`).",
						Validators: []validator.String{
							logLevelValidator(),
						},
					},
				},
				CustomType: LoggingType{
					ObjectType: types.ObjectType{
						AttrTypes: LoggingValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Description:         "Cloud Logging configuration.",
				MarkdownDescription: "Cloud Logging configuration.",
			},
			"maintenance_window": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"day": schema.StringAttribute{
						Optional:            true,
						Description:         "Day of week for maintenance window. One of `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.",
						MarkdownDescription: "Day of week for maintenance window. One of `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.",
						Validators: []validator.String{
							mwDayValidator(),
						},
					},
					"hour": schema.Int64Attribute{
						Optional:            true,
						Description:         "Hour of day in UTC time zone (1-24) for maintenance window.",
						MarkdownDescription: "Hour of day in UTC time zone (1-24) for maintenance window.",
						Validators: []validator.Int64{
							mwHourValidator(),
						},
					},
					"type": schema.StringAttribute{
						Optional:            true,
						Description:         "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. If `WEEKLY`, day and hour must be specified.",
						MarkdownDescription: "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. If `WEEKLY`, day and hour must be specified.",
						Validators: []validator.String{
							mwTypeValidator(),
						},
					},
				},
				CustomType: MaintenanceWindowType{
					ObjectType: types.ObjectType{
						AttrTypes: MaintenanceWindowValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "Configuration of window for maintenance operations.",
				MarkdownDescription: "Configuration of window for maintenance operations.",
				PlanModifiers: []planmodifier.Object{
					mwPlanModifier(),
				},
				Validators: []validator.Object{
					mwValidator(),
				},
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The resource name.",
				MarkdownDescription: "The resource name.",
			},
			"pip_packages": schema.SetAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "Python packages that are installed in the cluster.",
				MarkdownDescription: "Python packages that are installed in the cluster.",
			},
			"python_version": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Version of Python that Airflow will run on. Must be in format `<major>.<minor>`.",
				MarkdownDescription: "Version of Python that Airflow will run on. Must be in format `<major>.<minor>`.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"scheduler": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"count": schema.Int64Attribute{
						Required:            true,
						Description:         "The number of scheduler instances in the cluster.",
						MarkdownDescription: "The number of scheduler instances in the cluster.",
					},
					"resource_preset_id": schema.StringAttribute{
						Required:            true,
						Description:         "The identifier of the preset for computational resources available to an instance (CPU, memory etc.).",
						MarkdownDescription: "The identifier of the preset for computational resources available to an instance (CPU, memory etc.).",
					},
				},
				CustomType: SchedulerType{
					ObjectType: types.ObjectType{
						AttrTypes: SchedulerValue{}.AttributeTypes(ctx),
					},
				},
				Required:            true,
				Description:         "Configuration of scheduler instances.",
				MarkdownDescription: "Configuration of scheduler instances.",
			},
			"security_group_ids": schema.SetAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The list of security groups applied to resource or their components.",
				MarkdownDescription: "The list of security groups applied to resource or their components.",
			},
			"service_account_id": schema.StringAttribute{
				Required:            true,
				Description:         "[Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource. For more information, see [documentation](https://yandex.cloud/docs/managed-airflow/concepts/impersonation).",
				MarkdownDescription: "[Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource. For more information, see [documentation](https://yandex.cloud/docs/managed-airflow/concepts/impersonation).",
			},
			"status": schema.StringAttribute{
				Computed:            true,
				Description:         "Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-airflow/api-ref/Cluster/).",
				MarkdownDescription: "Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-airflow/api-ref/Cluster/).",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"subnet_ids": schema.SetAttribute{
				ElementType:         types.StringType,
				Required:            true,
				Description:         "The list of VPC subnets identifiers which resource is attached.",
				MarkdownDescription: "The list of VPC subnets identifiers which resource is attached.",
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.RequiresReplace(),
				},
			},
			"triggerer": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"count": schema.Int64Attribute{
						Required:            true,
						Description:         "The number of triggerer instances in the cluster.",
						MarkdownDescription: "The number of triggerer instances in the cluster.",
					},
					"resource_preset_id": schema.StringAttribute{
						Required:            true,
						Description:         "The identifier of the preset for computational resources available to an instance (CPU, memory etc.).",
						MarkdownDescription: "The identifier of the preset for computational resources available to an instance (CPU, memory etc.).",
					},
				},
				CustomType: TriggererType{
					ObjectType: types.ObjectType{
						AttrTypes: TriggererValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Description:         "Configuration of `triggerer` instances.",
				MarkdownDescription: "Configuration of `triggerer` instances.",
			},
			"webserver": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"count": schema.Int64Attribute{
						Required:            true,
						Description:         "The number of webserver instances in the cluster.",
						MarkdownDescription: "The number of webserver instances in the cluster.",
					},
					"resource_preset_id": schema.StringAttribute{
						Required:            true,
						Description:         "The identifier of the preset for computational resources available to an instance (CPU, memory etc.).",
						MarkdownDescription: "The identifier of the preset for computational resources available to an instance (CPU, memory etc.).",
					},
				},
				CustomType: WebserverType{
					ObjectType: types.ObjectType{
						AttrTypes: WebserverValue{}.AttributeTypes(ctx),
					},
				},
				Required:            true,
				Description:         "Configuration of `webserver` instances.",
				MarkdownDescription: "Configuration of `webserver` instances.",
			},
			"worker": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"max_count": schema.Int64Attribute{
						Required:            true,
						Description:         "The maximum number of worker instances in the cluster.",
						MarkdownDescription: "The maximum number of worker instances in the cluster.",
					},
					"min_count": schema.Int64Attribute{
						Required:            true,
						Description:         "The minimum number of worker instances in the cluster.",
						MarkdownDescription: "The minimum number of worker instances in the cluster.",
					},
					"resource_preset_id": schema.StringAttribute{
						Required:            true,
						Description:         "The identifier of the preset for computational resources available to an instance (CPU, memory etc.).",
						MarkdownDescription: "The identifier of the preset for computational resources available to an instance (CPU, memory etc.).",
					},
				},
				CustomType: WorkerType{
					ObjectType: types.ObjectType{
						AttrTypes: WorkerValue{}.AttributeTypes(ctx),
					},
				},
				Required:            true,
				Description:         "Configuration of worker instances.",
				MarkdownDescription: "Configuration of worker instances.",
			},
		},
		Blocks: map[string]schema.Block{
			"timeouts": schema.SingleNestedBlock{
				CustomType: timeouts.Type{},
			},
		},
		Description: "Managed Airflow cluster.",
	}
}

type ClusterModel struct {
	AdminPassword         types.String               `tfsdk:"admin_password"`
	AirflowConfig         types.Map                  `tfsdk:"airflow_config"`
	AirflowVersion        types.String               `tfsdk:"airflow_version"`
	CodeSync              CodeSyncValue              `tfsdk:"code_sync"`
	CreatedAt             types.String               `tfsdk:"created_at"`
	DagProcessor          DagProcessorValue          `tfsdk:"dag_processor"`
	DebPackages           types.Set                  `tfsdk:"deb_packages"`
	DeletionProtection    types.Bool                 `tfsdk:"deletion_protection"`
	Description           types.String               `tfsdk:"description"`
	FolderId              types.String               `tfsdk:"folder_id"`
	Id                    types.String               `tfsdk:"id"`
	Labels                types.Map                  `tfsdk:"labels"`
	LockboxSecretsBackend LockboxSecretsBackendValue `tfsdk:"lockbox_secrets_backend"`
	Logging               LoggingValue               `tfsdk:"logging"`
	MaintenanceWindow     MaintenanceWindowValue     `tfsdk:"maintenance_window"`
	Name                  types.String               `tfsdk:"name"`
	PipPackages           types.Set                  `tfsdk:"pip_packages"`
	PythonVersion         types.String               `tfsdk:"python_version"`
	Scheduler             SchedulerValue             `tfsdk:"scheduler"`
	SecurityGroupIds      types.Set                  `tfsdk:"security_group_ids"`
	ServiceAccountId      types.String               `tfsdk:"service_account_id"`
	Status                types.String               `tfsdk:"status"`
	SubnetIds             types.Set                  `tfsdk:"subnet_ids"`
	Triggerer             TriggererValue             `tfsdk:"triggerer"`
	Webserver             WebserverValue             `tfsdk:"webserver"`
	Worker                WorkerValue                `tfsdk:"worker"`
	Timeouts              timeouts.Value             `tfsdk:"timeouts"`
}

var _ basetypes.ObjectTypable = CodeSyncType{}

type CodeSyncType struct {
	basetypes.ObjectType
}

func (t CodeSyncType) Equal(o attr.Type) bool {
	other, ok := o.(CodeSyncType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CodeSyncType) String() string {
	return "CodeSyncType"
}

func (t CodeSyncType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	s3Attribute, ok := attributes["s3"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`s3 is missing from object`)

		return nil, diags
	}

	s3Val, ok := s3Attribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`s3 expected to be basetypes.ObjectValue, was: %T`, s3Attribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CodeSyncValue{
		S3:    s3Val,
		state: attr.ValueStateKnown,
	}, diags
}

func NewCodeSyncValueNull() CodeSyncValue {
	return CodeSyncValue{
		state: attr.ValueStateNull,
	}
}

func NewCodeSyncValueUnknown() CodeSyncValue {
	return CodeSyncValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCodeSyncValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CodeSyncValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CodeSyncValue Attribute Value",
				"While creating a CodeSyncValue value, a missing attribute value was detected. "+
					"A CodeSyncValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CodeSyncValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CodeSyncValue Attribute Type",
				"While creating a CodeSyncValue value, an invalid attribute value was detected. "+
					"A CodeSyncValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CodeSyncValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CodeSyncValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CodeSyncValue Attribute Value",
				"While creating a CodeSyncValue value, an extra attribute value was detected. "+
					"A CodeSyncValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CodeSyncValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCodeSyncValueUnknown(), diags
	}

	s3Attribute, ok := attributes["s3"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`s3 is missing from object`)

		return NewCodeSyncValueUnknown(), diags
	}

	s3Val, ok := s3Attribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`s3 expected to be basetypes.ObjectValue, was: %T`, s3Attribute))
	}

	if diags.HasError() {
		return NewCodeSyncValueUnknown(), diags
	}

	return CodeSyncValue{
		S3:    s3Val,
		state: attr.ValueStateKnown,
	}, diags
}

func NewCodeSyncValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CodeSyncValue {
	object, diags := NewCodeSyncValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCodeSyncValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CodeSyncType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCodeSyncValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCodeSyncValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCodeSyncValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCodeSyncValueMust(CodeSyncValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CodeSyncType) ValueType(ctx context.Context) attr.Value {
	return CodeSyncValue{}
}

var _ basetypes.ObjectValuable = CodeSyncValue{}

type CodeSyncValue struct {
	S3    basetypes.ObjectValue `tfsdk:"s3"`
	state attr.ValueState
}

func (v CodeSyncValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["s3"] = basetypes.ObjectType{
		AttrTypes: S3Value{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.S3.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["s3"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CodeSyncValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CodeSyncValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CodeSyncValue) String() string {
	return "CodeSyncValue"
}

func (v CodeSyncValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var s3 basetypes.ObjectValue

	if v.S3.IsNull() {
		s3 = types.ObjectNull(
			S3Value{}.AttributeTypes(ctx),
		)
	}

	if v.S3.IsUnknown() {
		s3 = types.ObjectUnknown(
			S3Value{}.AttributeTypes(ctx),
		)
	}

	if !v.S3.IsNull() && !v.S3.IsUnknown() {
		s3 = types.ObjectValueMust(
			S3Value{}.AttributeTypes(ctx),
			v.S3.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"s3": basetypes.ObjectType{
			AttrTypes: S3Value{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"s3": s3,
		})

	return objVal, diags
}

func (v CodeSyncValue) Equal(o attr.Value) bool {
	other, ok := o.(CodeSyncValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.S3.Equal(other.S3) {
		return false
	}

	return true
}

func (v CodeSyncValue) Type(ctx context.Context) attr.Type {
	return CodeSyncType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CodeSyncValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"s3": basetypes.ObjectType{
			AttrTypes: S3Value{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = S3Type{}

type S3Type struct {
	basetypes.ObjectType
}

func (t S3Type) Equal(o attr.Type) bool {
	other, ok := o.(S3Type)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t S3Type) String() string {
	return "S3Type"
}

func (t S3Type) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	bucketAttribute, ok := attributes["bucket"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bucket is missing from object`)

		return nil, diags
	}

	bucketVal, ok := bucketAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bucket expected to be basetypes.StringValue, was: %T`, bucketAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return S3Value{
		Bucket: bucketVal,
		state:  attr.ValueStateKnown,
	}, diags
}

func NewS3ValueNull() S3Value {
	return S3Value{
		state: attr.ValueStateNull,
	}
}

func NewS3ValueUnknown() S3Value {
	return S3Value{
		state: attr.ValueStateUnknown,
	}
}

func NewS3Value(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (S3Value, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing S3Value Attribute Value",
				"While creating a S3Value value, a missing attribute value was detected. "+
					"A S3Value must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("S3Value Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid S3Value Attribute Type",
				"While creating a S3Value value, an invalid attribute value was detected. "+
					"A S3Value must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("S3Value Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("S3Value Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra S3Value Attribute Value",
				"While creating a S3Value value, an extra attribute value was detected. "+
					"A S3Value must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra S3Value Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewS3ValueUnknown(), diags
	}

	bucketAttribute, ok := attributes["bucket"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bucket is missing from object`)

		return NewS3ValueUnknown(), diags
	}

	bucketVal, ok := bucketAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bucket expected to be basetypes.StringValue, was: %T`, bucketAttribute))
	}

	if diags.HasError() {
		return NewS3ValueUnknown(), diags
	}

	return S3Value{
		Bucket: bucketVal,
		state:  attr.ValueStateKnown,
	}, diags
}

func NewS3ValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) S3Value {
	object, diags := NewS3Value(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewS3ValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t S3Type) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewS3ValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewS3ValueUnknown(), nil
	}

	if in.IsNull() {
		return NewS3ValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewS3ValueMust(S3Value{}.AttributeTypes(ctx), attributes), nil
}

func (t S3Type) ValueType(ctx context.Context) attr.Value {
	return S3Value{}
}

var _ basetypes.ObjectValuable = S3Value{}

type S3Value struct {
	Bucket basetypes.StringValue `tfsdk:"bucket"`
	state  attr.ValueState
}

func (v S3Value) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["bucket"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.Bucket.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["bucket"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v S3Value) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v S3Value) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v S3Value) String() string {
	return "S3Value"
}

func (v S3Value) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"bucket": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"bucket": v.Bucket,
		})

	return objVal, diags
}

func (v S3Value) Equal(o attr.Value) bool {
	other, ok := o.(S3Value)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Bucket.Equal(other.Bucket) {
		return false
	}

	return true
}

func (v S3Value) Type(ctx context.Context) attr.Type {
	return S3Type{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v S3Value) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"bucket": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = DagProcessorType{}

type DagProcessorType struct {
	basetypes.ObjectType
}

func (t DagProcessorType) Equal(o attr.Type) bool {
	other, ok := o.(DagProcessorType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t DagProcessorType) String() string {
	return "DagProcessorType"
}

func (t DagProcessorType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	countAttribute, ok := attributes["count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`count is missing from object`)

		return nil, diags
	}

	countVal, ok := countAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`count expected to be basetypes.Int64Value, was: %T`, countAttribute))
	}

	resourcePresetIdAttribute, ok := attributes["resource_preset_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_preset_id is missing from object`)

		return nil, diags
	}

	resourcePresetIdVal, ok := resourcePresetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_preset_id expected to be basetypes.StringValue, was: %T`, resourcePresetIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return DagProcessorValue{
		Count:            countVal,
		ResourcePresetId: resourcePresetIdVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewDagProcessorValueNull() DagProcessorValue {
	return DagProcessorValue{
		state: attr.ValueStateNull,
	}
}

func NewDagProcessorValueUnknown() DagProcessorValue {
	return DagProcessorValue{
		state: attr.ValueStateUnknown,
	}
}

func NewDagProcessorValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (DagProcessorValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing DagProcessorValue Attribute Value",
				"While creating a DagProcessorValue value, a missing attribute value was detected. "+
					"A DagProcessorValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DagProcessorValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid DagProcessorValue Attribute Type",
				"While creating a DagProcessorValue value, an invalid attribute value was detected. "+
					"A DagProcessorValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DagProcessorValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("DagProcessorValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra DagProcessorValue Attribute Value",
				"While creating a DagProcessorValue value, an extra attribute value was detected. "+
					"A DagProcessorValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra DagProcessorValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewDagProcessorValueUnknown(), diags
	}

	countAttribute, ok := attributes["count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`count is missing from object`)

		return NewDagProcessorValueUnknown(), diags
	}

	countVal, ok := countAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`count expected to be basetypes.Int64Value, was: %T`, countAttribute))
	}

	resourcePresetIdAttribute, ok := attributes["resource_preset_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_preset_id is missing from object`)

		return NewDagProcessorValueUnknown(), diags
	}

	resourcePresetIdVal, ok := resourcePresetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_preset_id expected to be basetypes.StringValue, was: %T`, resourcePresetIdAttribute))
	}

	if diags.HasError() {
		return NewDagProcessorValueUnknown(), diags
	}

	return DagProcessorValue{
		Count:            countVal,
		ResourcePresetId: resourcePresetIdVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewDagProcessorValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) DagProcessorValue {
	object, diags := NewDagProcessorValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewDagProcessorValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t DagProcessorType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewDagProcessorValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewDagProcessorValueUnknown(), nil
	}

	if in.IsNull() {
		return NewDagProcessorValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewDagProcessorValueMust(DagProcessorValue{}.AttributeTypes(ctx), attributes), nil
}

func (t DagProcessorType) ValueType(ctx context.Context) attr.Value {
	return DagProcessorValue{}
}

var _ basetypes.ObjectValuable = DagProcessorValue{}

type DagProcessorValue struct {
	Count            basetypes.Int64Value  `tfsdk:"count"`
	ResourcePresetId basetypes.StringValue `tfsdk:"resource_preset_id"`
	state            attr.ValueState
}

func (v DagProcessorValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["resource_preset_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Count.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["count"] = val

		val, err = v.ResourcePresetId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["resource_preset_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v DagProcessorValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v DagProcessorValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v DagProcessorValue) String() string {
	return "DagProcessorValue"
}

func (v DagProcessorValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"count":              basetypes.Int64Type{},
		"resource_preset_id": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"count":              v.Count,
			"resource_preset_id": v.ResourcePresetId,
		})

	return objVal, diags
}

func (v DagProcessorValue) Equal(o attr.Value) bool {
	other, ok := o.(DagProcessorValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Count.Equal(other.Count) {
		return false
	}

	if !v.ResourcePresetId.Equal(other.ResourcePresetId) {
		return false
	}

	return true
}

func (v DagProcessorValue) Type(ctx context.Context) attr.Type {
	return DagProcessorType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v DagProcessorValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"count":              basetypes.Int64Type{},
		"resource_preset_id": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = LockboxSecretsBackendType{}

type LockboxSecretsBackendType struct {
	basetypes.ObjectType
}

func (t LockboxSecretsBackendType) Equal(o attr.Type) bool {
	other, ok := o.(LockboxSecretsBackendType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t LockboxSecretsBackendType) String() string {
	return "LockboxSecretsBackendType"
}

func (t LockboxSecretsBackendType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return LockboxSecretsBackendValue{
		Enabled: enabledVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewLockboxSecretsBackendValueNull() LockboxSecretsBackendValue {
	return LockboxSecretsBackendValue{
		state: attr.ValueStateNull,
	}
}

func NewLockboxSecretsBackendValueUnknown() LockboxSecretsBackendValue {
	return LockboxSecretsBackendValue{
		state: attr.ValueStateUnknown,
	}
}

func NewLockboxSecretsBackendValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (LockboxSecretsBackendValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing LockboxSecretsBackendValue Attribute Value",
				"While creating a LockboxSecretsBackendValue value, a missing attribute value was detected. "+
					"A LockboxSecretsBackendValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LockboxSecretsBackendValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid LockboxSecretsBackendValue Attribute Type",
				"While creating a LockboxSecretsBackendValue value, an invalid attribute value was detected. "+
					"A LockboxSecretsBackendValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LockboxSecretsBackendValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("LockboxSecretsBackendValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra LockboxSecretsBackendValue Attribute Value",
				"While creating a LockboxSecretsBackendValue value, an extra attribute value was detected. "+
					"A LockboxSecretsBackendValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra LockboxSecretsBackendValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewLockboxSecretsBackendValueUnknown(), diags
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewLockboxSecretsBackendValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	if diags.HasError() {
		return NewLockboxSecretsBackendValueUnknown(), diags
	}

	return LockboxSecretsBackendValue{
		Enabled: enabledVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewLockboxSecretsBackendValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) LockboxSecretsBackendValue {
	object, diags := NewLockboxSecretsBackendValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewLockboxSecretsBackendValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t LockboxSecretsBackendType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewLockboxSecretsBackendValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewLockboxSecretsBackendValueUnknown(), nil
	}

	if in.IsNull() {
		return NewLockboxSecretsBackendValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewLockboxSecretsBackendValueMust(LockboxSecretsBackendValue{}.AttributeTypes(ctx), attributes), nil
}

func (t LockboxSecretsBackendType) ValueType(ctx context.Context) attr.Value {
	return LockboxSecretsBackendValue{}
}

var _ basetypes.ObjectValuable = LockboxSecretsBackendValue{}

type LockboxSecretsBackendValue struct {
	Enabled basetypes.BoolValue `tfsdk:"enabled"`
	state   attr.ValueState
}

func (v LockboxSecretsBackendValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v LockboxSecretsBackendValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v LockboxSecretsBackendValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v LockboxSecretsBackendValue) String() string {
	return "LockboxSecretsBackendValue"
}

func (v LockboxSecretsBackendValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"enabled": basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"enabled": v.Enabled,
		})

	return objVal, diags
}

func (v LockboxSecretsBackendValue) Equal(o attr.Value) bool {
	other, ok := o.(LockboxSecretsBackendValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	return true
}

func (v LockboxSecretsBackendValue) Type(ctx context.Context) attr.Type {
	return LockboxSecretsBackendType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v LockboxSecretsBackendValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"enabled": basetypes.BoolType{},
	}
}

var _ basetypes.ObjectTypable = LoggingType{}

type LoggingType struct {
	basetypes.ObjectType
}

func (t LoggingType) Equal(o attr.Type) bool {
	other, ok := o.(LoggingType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t LoggingType) String() string {
	return "LoggingType"
}

func (t LoggingType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	folderIdAttribute, ok := attributes["folder_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`folder_id is missing from object`)

		return nil, diags
	}

	folderIdVal, ok := folderIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`folder_id expected to be basetypes.StringValue, was: %T`, folderIdAttribute))
	}

	logGroupIdAttribute, ok := attributes["log_group_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`log_group_id is missing from object`)

		return nil, diags
	}

	logGroupIdVal, ok := logGroupIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`log_group_id expected to be basetypes.StringValue, was: %T`, logGroupIdAttribute))
	}

	minLevelAttribute, ok := attributes["min_level"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`min_level is missing from object`)

		return nil, diags
	}

	minLevelVal, ok := minLevelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`min_level expected to be basetypes.StringValue, was: %T`, minLevelAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return LoggingValue{
		Enabled:    enabledVal,
		FolderId:   folderIdVal,
		LogGroupId: logGroupIdVal,
		MinLevel:   minLevelVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewLoggingValueNull() LoggingValue {
	return LoggingValue{
		state: attr.ValueStateNull,
	}
}

func NewLoggingValueUnknown() LoggingValue {
	return LoggingValue{
		state: attr.ValueStateUnknown,
	}
}

func NewLoggingValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (LoggingValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing LoggingValue Attribute Value",
				"While creating a LoggingValue value, a missing attribute value was detected. "+
					"A LoggingValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LoggingValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid LoggingValue Attribute Type",
				"While creating a LoggingValue value, an invalid attribute value was detected. "+
					"A LoggingValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LoggingValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("LoggingValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra LoggingValue Attribute Value",
				"While creating a LoggingValue value, an extra attribute value was detected. "+
					"A LoggingValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra LoggingValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewLoggingValueUnknown(), diags
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewLoggingValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	folderIdAttribute, ok := attributes["folder_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`folder_id is missing from object`)

		return NewLoggingValueUnknown(), diags
	}

	folderIdVal, ok := folderIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`folder_id expected to be basetypes.StringValue, was: %T`, folderIdAttribute))
	}

	logGroupIdAttribute, ok := attributes["log_group_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`log_group_id is missing from object`)

		return NewLoggingValueUnknown(), diags
	}

	logGroupIdVal, ok := logGroupIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`log_group_id expected to be basetypes.StringValue, was: %T`, logGroupIdAttribute))
	}

	minLevelAttribute, ok := attributes["min_level"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`min_level is missing from object`)

		return NewLoggingValueUnknown(), diags
	}

	minLevelVal, ok := minLevelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`min_level expected to be basetypes.StringValue, was: %T`, minLevelAttribute))
	}

	if diags.HasError() {
		return NewLoggingValueUnknown(), diags
	}

	return LoggingValue{
		Enabled:    enabledVal,
		FolderId:   folderIdVal,
		LogGroupId: logGroupIdVal,
		MinLevel:   minLevelVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewLoggingValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) LoggingValue {
	object, diags := NewLoggingValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewLoggingValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t LoggingType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewLoggingValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewLoggingValueUnknown(), nil
	}

	if in.IsNull() {
		return NewLoggingValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewLoggingValueMust(LoggingValue{}.AttributeTypes(ctx), attributes), nil
}

func (t LoggingType) ValueType(ctx context.Context) attr.Value {
	return LoggingValue{}
}

var _ basetypes.ObjectValuable = LoggingValue{}

type LoggingValue struct {
	Enabled    basetypes.BoolValue   `tfsdk:"enabled"`
	FolderId   basetypes.StringValue `tfsdk:"folder_id"`
	LogGroupId basetypes.StringValue `tfsdk:"log_group_id"`
	MinLevel   basetypes.StringValue `tfsdk:"min_level"`
	state      attr.ValueState
}

func (v LoggingValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["folder_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["log_group_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["min_level"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.FolderId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["folder_id"] = val

		val, err = v.LogGroupId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["log_group_id"] = val

		val, err = v.MinLevel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["min_level"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v LoggingValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v LoggingValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v LoggingValue) String() string {
	return "LoggingValue"
}

func (v LoggingValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"enabled":      basetypes.BoolType{},
		"folder_id":    basetypes.StringType{},
		"log_group_id": basetypes.StringType{},
		"min_level":    basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"enabled":      v.Enabled,
			"folder_id":    v.FolderId,
			"log_group_id": v.LogGroupId,
			"min_level":    v.MinLevel,
		})

	return objVal, diags
}

func (v LoggingValue) Equal(o attr.Value) bool {
	other, ok := o.(LoggingValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.FolderId.Equal(other.FolderId) {
		return false
	}

	if !v.LogGroupId.Equal(other.LogGroupId) {
		return false
	}

	if !v.MinLevel.Equal(other.MinLevel) {
		return false
	}

	return true
}

func (v LoggingValue) Type(ctx context.Context) attr.Type {
	return LoggingType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v LoggingValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"enabled":      basetypes.BoolType{},
		"folder_id":    basetypes.StringType{},
		"log_group_id": basetypes.StringType{},
		"min_level":    basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = MaintenanceWindowType{}

type MaintenanceWindowType struct {
	basetypes.ObjectType
}

func (t MaintenanceWindowType) Equal(o attr.Type) bool {
	other, ok := o.(MaintenanceWindowType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MaintenanceWindowType) String() string {
	return "MaintenanceWindowType"
}

func (t MaintenanceWindowType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	dayAttribute, ok := attributes["day"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`day is missing from object`)

		return nil, diags
	}

	dayVal, ok := dayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`day expected to be basetypes.StringValue, was: %T`, dayAttribute))
	}

	hourAttribute, ok := attributes["hour"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hour is missing from object`)

		return nil, diags
	}

	hourVal, ok := hourAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hour expected to be basetypes.Int64Value, was: %T`, hourAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MaintenanceWindowValue{
		Day:                   dayVal,
		Hour:                  hourVal,
		MaintenanceWindowType: typeVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewMaintenanceWindowValueNull() MaintenanceWindowValue {
	return MaintenanceWindowValue{
		state: attr.ValueStateNull,
	}
}

func NewMaintenanceWindowValueUnknown() MaintenanceWindowValue {
	return MaintenanceWindowValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMaintenanceWindowValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MaintenanceWindowValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MaintenanceWindowValue Attribute Value",
				"While creating a MaintenanceWindowValue value, a missing attribute value was detected. "+
					"A MaintenanceWindowValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MaintenanceWindowValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MaintenanceWindowValue Attribute Type",
				"While creating a MaintenanceWindowValue value, an invalid attribute value was detected. "+
					"A MaintenanceWindowValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MaintenanceWindowValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MaintenanceWindowValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MaintenanceWindowValue Attribute Value",
				"While creating a MaintenanceWindowValue value, an extra attribute value was detected. "+
					"A MaintenanceWindowValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MaintenanceWindowValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMaintenanceWindowValueUnknown(), diags
	}

	dayAttribute, ok := attributes["day"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`day is missing from object`)

		return NewMaintenanceWindowValueUnknown(), diags
	}

	dayVal, ok := dayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`day expected to be basetypes.StringValue, was: %T`, dayAttribute))
	}

	hourAttribute, ok := attributes["hour"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hour is missing from object`)

		return NewMaintenanceWindowValueUnknown(), diags
	}

	hourVal, ok := hourAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hour expected to be basetypes.Int64Value, was: %T`, hourAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewMaintenanceWindowValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewMaintenanceWindowValueUnknown(), diags
	}

	return MaintenanceWindowValue{
		Day:                   dayVal,
		Hour:                  hourVal,
		MaintenanceWindowType: typeVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewMaintenanceWindowValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MaintenanceWindowValue {
	object, diags := NewMaintenanceWindowValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMaintenanceWindowValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MaintenanceWindowType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMaintenanceWindowValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMaintenanceWindowValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMaintenanceWindowValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMaintenanceWindowValueMust(MaintenanceWindowValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MaintenanceWindowType) ValueType(ctx context.Context) attr.Value {
	return MaintenanceWindowValue{}
}

var _ basetypes.ObjectValuable = MaintenanceWindowValue{}

type MaintenanceWindowValue struct {
	Day                   basetypes.StringValue `tfsdk:"day"`
	Hour                  basetypes.Int64Value  `tfsdk:"hour"`
	MaintenanceWindowType basetypes.StringValue `tfsdk:"type"`
	state                 attr.ValueState
}

func (v MaintenanceWindowValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["day"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["hour"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Day.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["day"] = val

		val, err = v.Hour.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["hour"] = val

		val, err = v.MaintenanceWindowType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MaintenanceWindowValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MaintenanceWindowValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MaintenanceWindowValue) String() string {
	return "MaintenanceWindowValue"
}

func (v MaintenanceWindowValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"day":  basetypes.StringType{},
		"hour": basetypes.Int64Type{},
		"type": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"day":  v.Day,
			"hour": v.Hour,
			"type": v.MaintenanceWindowType,
		})

	return objVal, diags
}

func (v MaintenanceWindowValue) Equal(o attr.Value) bool {
	other, ok := o.(MaintenanceWindowValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Day.Equal(other.Day) {
		return false
	}

	if !v.Hour.Equal(other.Hour) {
		return false
	}

	if !v.MaintenanceWindowType.Equal(other.MaintenanceWindowType) {
		return false
	}

	return true
}

func (v MaintenanceWindowValue) Type(ctx context.Context) attr.Type {
	return MaintenanceWindowType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MaintenanceWindowValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"day":  basetypes.StringType{},
		"hour": basetypes.Int64Type{},
		"type": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SchedulerType{}

type SchedulerType struct {
	basetypes.ObjectType
}

func (t SchedulerType) Equal(o attr.Type) bool {
	other, ok := o.(SchedulerType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SchedulerType) String() string {
	return "SchedulerType"
}

func (t SchedulerType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	countAttribute, ok := attributes["count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`count is missing from object`)

		return nil, diags
	}

	countVal, ok := countAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`count expected to be basetypes.Int64Value, was: %T`, countAttribute))
	}

	resourcePresetIdAttribute, ok := attributes["resource_preset_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_preset_id is missing from object`)

		return nil, diags
	}

	resourcePresetIdVal, ok := resourcePresetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_preset_id expected to be basetypes.StringValue, was: %T`, resourcePresetIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SchedulerValue{
		Count:            countVal,
		ResourcePresetId: resourcePresetIdVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewSchedulerValueNull() SchedulerValue {
	return SchedulerValue{
		state: attr.ValueStateNull,
	}
}

func NewSchedulerValueUnknown() SchedulerValue {
	return SchedulerValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSchedulerValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SchedulerValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SchedulerValue Attribute Value",
				"While creating a SchedulerValue value, a missing attribute value was detected. "+
					"A SchedulerValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SchedulerValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SchedulerValue Attribute Type",
				"While creating a SchedulerValue value, an invalid attribute value was detected. "+
					"A SchedulerValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SchedulerValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SchedulerValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SchedulerValue Attribute Value",
				"While creating a SchedulerValue value, an extra attribute value was detected. "+
					"A SchedulerValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SchedulerValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSchedulerValueUnknown(), diags
	}

	countAttribute, ok := attributes["count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`count is missing from object`)

		return NewSchedulerValueUnknown(), diags
	}

	countVal, ok := countAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`count expected to be basetypes.Int64Value, was: %T`, countAttribute))
	}

	resourcePresetIdAttribute, ok := attributes["resource_preset_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_preset_id is missing from object`)

		return NewSchedulerValueUnknown(), diags
	}

	resourcePresetIdVal, ok := resourcePresetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_preset_id expected to be basetypes.StringValue, was: %T`, resourcePresetIdAttribute))
	}

	if diags.HasError() {
		return NewSchedulerValueUnknown(), diags
	}

	return SchedulerValue{
		Count:            countVal,
		ResourcePresetId: resourcePresetIdVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewSchedulerValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SchedulerValue {
	object, diags := NewSchedulerValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSchedulerValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SchedulerType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSchedulerValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSchedulerValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSchedulerValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSchedulerValueMust(SchedulerValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SchedulerType) ValueType(ctx context.Context) attr.Value {
	return SchedulerValue{}
}

var _ basetypes.ObjectValuable = SchedulerValue{}

type SchedulerValue struct {
	Count            basetypes.Int64Value  `tfsdk:"count"`
	ResourcePresetId basetypes.StringValue `tfsdk:"resource_preset_id"`
	state            attr.ValueState
}

func (v SchedulerValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["resource_preset_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Count.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["count"] = val

		val, err = v.ResourcePresetId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["resource_preset_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SchedulerValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SchedulerValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SchedulerValue) String() string {
	return "SchedulerValue"
}

func (v SchedulerValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"count":              basetypes.Int64Type{},
		"resource_preset_id": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"count":              v.Count,
			"resource_preset_id": v.ResourcePresetId,
		})

	return objVal, diags
}

func (v SchedulerValue) Equal(o attr.Value) bool {
	other, ok := o.(SchedulerValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Count.Equal(other.Count) {
		return false
	}

	if !v.ResourcePresetId.Equal(other.ResourcePresetId) {
		return false
	}

	return true
}

func (v SchedulerValue) Type(ctx context.Context) attr.Type {
	return SchedulerType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SchedulerValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"count":              basetypes.Int64Type{},
		"resource_preset_id": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = TriggererType{}

type TriggererType struct {
	basetypes.ObjectType
}

func (t TriggererType) Equal(o attr.Type) bool {
	other, ok := o.(TriggererType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TriggererType) String() string {
	return "TriggererType"
}

func (t TriggererType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	countAttribute, ok := attributes["count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`count is missing from object`)

		return nil, diags
	}

	countVal, ok := countAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`count expected to be basetypes.Int64Value, was: %T`, countAttribute))
	}

	resourcePresetIdAttribute, ok := attributes["resource_preset_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_preset_id is missing from object`)

		return nil, diags
	}

	resourcePresetIdVal, ok := resourcePresetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_preset_id expected to be basetypes.StringValue, was: %T`, resourcePresetIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TriggererValue{
		Count:            countVal,
		ResourcePresetId: resourcePresetIdVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewTriggererValueNull() TriggererValue {
	return TriggererValue{
		state: attr.ValueStateNull,
	}
}

func NewTriggererValueUnknown() TriggererValue {
	return TriggererValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTriggererValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TriggererValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TriggererValue Attribute Value",
				"While creating a TriggererValue value, a missing attribute value was detected. "+
					"A TriggererValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TriggererValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TriggererValue Attribute Type",
				"While creating a TriggererValue value, an invalid attribute value was detected. "+
					"A TriggererValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TriggererValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TriggererValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TriggererValue Attribute Value",
				"While creating a TriggererValue value, an extra attribute value was detected. "+
					"A TriggererValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TriggererValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTriggererValueUnknown(), diags
	}

	countAttribute, ok := attributes["count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`count is missing from object`)

		return NewTriggererValueUnknown(), diags
	}

	countVal, ok := countAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`count expected to be basetypes.Int64Value, was: %T`, countAttribute))
	}

	resourcePresetIdAttribute, ok := attributes["resource_preset_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_preset_id is missing from object`)

		return NewTriggererValueUnknown(), diags
	}

	resourcePresetIdVal, ok := resourcePresetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_preset_id expected to be basetypes.StringValue, was: %T`, resourcePresetIdAttribute))
	}

	if diags.HasError() {
		return NewTriggererValueUnknown(), diags
	}

	return TriggererValue{
		Count:            countVal,
		ResourcePresetId: resourcePresetIdVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewTriggererValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TriggererValue {
	object, diags := NewTriggererValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTriggererValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TriggererType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTriggererValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTriggererValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTriggererValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTriggererValueMust(TriggererValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TriggererType) ValueType(ctx context.Context) attr.Value {
	return TriggererValue{}
}

var _ basetypes.ObjectValuable = TriggererValue{}

type TriggererValue struct {
	Count            basetypes.Int64Value  `tfsdk:"count"`
	ResourcePresetId basetypes.StringValue `tfsdk:"resource_preset_id"`
	state            attr.ValueState
}

func (v TriggererValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["resource_preset_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Count.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["count"] = val

		val, err = v.ResourcePresetId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["resource_preset_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TriggererValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TriggererValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TriggererValue) String() string {
	return "TriggererValue"
}

func (v TriggererValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"count":              basetypes.Int64Type{},
		"resource_preset_id": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"count":              v.Count,
			"resource_preset_id": v.ResourcePresetId,
		})

	return objVal, diags
}

func (v TriggererValue) Equal(o attr.Value) bool {
	other, ok := o.(TriggererValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Count.Equal(other.Count) {
		return false
	}

	if !v.ResourcePresetId.Equal(other.ResourcePresetId) {
		return false
	}

	return true
}

func (v TriggererValue) Type(ctx context.Context) attr.Type {
	return TriggererType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TriggererValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"count":              basetypes.Int64Type{},
		"resource_preset_id": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = WebserverType{}

type WebserverType struct {
	basetypes.ObjectType
}

func (t WebserverType) Equal(o attr.Type) bool {
	other, ok := o.(WebserverType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t WebserverType) String() string {
	return "WebserverType"
}

func (t WebserverType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	countAttribute, ok := attributes["count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`count is missing from object`)

		return nil, diags
	}

	countVal, ok := countAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`count expected to be basetypes.Int64Value, was: %T`, countAttribute))
	}

	resourcePresetIdAttribute, ok := attributes["resource_preset_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_preset_id is missing from object`)

		return nil, diags
	}

	resourcePresetIdVal, ok := resourcePresetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_preset_id expected to be basetypes.StringValue, was: %T`, resourcePresetIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return WebserverValue{
		Count:            countVal,
		ResourcePresetId: resourcePresetIdVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewWebserverValueNull() WebserverValue {
	return WebserverValue{
		state: attr.ValueStateNull,
	}
}

func NewWebserverValueUnknown() WebserverValue {
	return WebserverValue{
		state: attr.ValueStateUnknown,
	}
}

func NewWebserverValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (WebserverValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing WebserverValue Attribute Value",
				"While creating a WebserverValue value, a missing attribute value was detected. "+
					"A WebserverValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("WebserverValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid WebserverValue Attribute Type",
				"While creating a WebserverValue value, an invalid attribute value was detected. "+
					"A WebserverValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("WebserverValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("WebserverValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra WebserverValue Attribute Value",
				"While creating a WebserverValue value, an extra attribute value was detected. "+
					"A WebserverValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra WebserverValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewWebserverValueUnknown(), diags
	}

	countAttribute, ok := attributes["count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`count is missing from object`)

		return NewWebserverValueUnknown(), diags
	}

	countVal, ok := countAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`count expected to be basetypes.Int64Value, was: %T`, countAttribute))
	}

	resourcePresetIdAttribute, ok := attributes["resource_preset_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_preset_id is missing from object`)

		return NewWebserverValueUnknown(), diags
	}

	resourcePresetIdVal, ok := resourcePresetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_preset_id expected to be basetypes.StringValue, was: %T`, resourcePresetIdAttribute))
	}

	if diags.HasError() {
		return NewWebserverValueUnknown(), diags
	}

	return WebserverValue{
		Count:            countVal,
		ResourcePresetId: resourcePresetIdVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewWebserverValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) WebserverValue {
	object, diags := NewWebserverValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewWebserverValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t WebserverType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewWebserverValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewWebserverValueUnknown(), nil
	}

	if in.IsNull() {
		return NewWebserverValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewWebserverValueMust(WebserverValue{}.AttributeTypes(ctx), attributes), nil
}

func (t WebserverType) ValueType(ctx context.Context) attr.Value {
	return WebserverValue{}
}

var _ basetypes.ObjectValuable = WebserverValue{}

type WebserverValue struct {
	Count            basetypes.Int64Value  `tfsdk:"count"`
	ResourcePresetId basetypes.StringValue `tfsdk:"resource_preset_id"`
	state            attr.ValueState
}

func (v WebserverValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["resource_preset_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Count.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["count"] = val

		val, err = v.ResourcePresetId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["resource_preset_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v WebserverValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v WebserverValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v WebserverValue) String() string {
	return "WebserverValue"
}

func (v WebserverValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"count":              basetypes.Int64Type{},
		"resource_preset_id": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"count":              v.Count,
			"resource_preset_id": v.ResourcePresetId,
		})

	return objVal, diags
}

func (v WebserverValue) Equal(o attr.Value) bool {
	other, ok := o.(WebserverValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Count.Equal(other.Count) {
		return false
	}

	if !v.ResourcePresetId.Equal(other.ResourcePresetId) {
		return false
	}

	return true
}

func (v WebserverValue) Type(ctx context.Context) attr.Type {
	return WebserverType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v WebserverValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"count":              basetypes.Int64Type{},
		"resource_preset_id": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = WorkerType{}

type WorkerType struct {
	basetypes.ObjectType
}

func (t WorkerType) Equal(o attr.Type) bool {
	other, ok := o.(WorkerType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t WorkerType) String() string {
	return "WorkerType"
}

func (t WorkerType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	maxCountAttribute, ok := attributes["max_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_count is missing from object`)

		return nil, diags
	}

	maxCountVal, ok := maxCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_count expected to be basetypes.Int64Value, was: %T`, maxCountAttribute))
	}

	minCountAttribute, ok := attributes["min_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`min_count is missing from object`)

		return nil, diags
	}

	minCountVal, ok := minCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`min_count expected to be basetypes.Int64Value, was: %T`, minCountAttribute))
	}

	resourcePresetIdAttribute, ok := attributes["resource_preset_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_preset_id is missing from object`)

		return nil, diags
	}

	resourcePresetIdVal, ok := resourcePresetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_preset_id expected to be basetypes.StringValue, was: %T`, resourcePresetIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return WorkerValue{
		MaxCount:         maxCountVal,
		MinCount:         minCountVal,
		ResourcePresetId: resourcePresetIdVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewWorkerValueNull() WorkerValue {
	return WorkerValue{
		state: attr.ValueStateNull,
	}
}

func NewWorkerValueUnknown() WorkerValue {
	return WorkerValue{
		state: attr.ValueStateUnknown,
	}
}

func NewWorkerValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (WorkerValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing WorkerValue Attribute Value",
				"While creating a WorkerValue value, a missing attribute value was detected. "+
					"A WorkerValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("WorkerValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid WorkerValue Attribute Type",
				"While creating a WorkerValue value, an invalid attribute value was detected. "+
					"A WorkerValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("WorkerValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("WorkerValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra WorkerValue Attribute Value",
				"While creating a WorkerValue value, an extra attribute value was detected. "+
					"A WorkerValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra WorkerValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewWorkerValueUnknown(), diags
	}

	maxCountAttribute, ok := attributes["max_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_count is missing from object`)

		return NewWorkerValueUnknown(), diags
	}

	maxCountVal, ok := maxCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_count expected to be basetypes.Int64Value, was: %T`, maxCountAttribute))
	}

	minCountAttribute, ok := attributes["min_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`min_count is missing from object`)

		return NewWorkerValueUnknown(), diags
	}

	minCountVal, ok := minCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`min_count expected to be basetypes.Int64Value, was: %T`, minCountAttribute))
	}

	resourcePresetIdAttribute, ok := attributes["resource_preset_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_preset_id is missing from object`)

		return NewWorkerValueUnknown(), diags
	}

	resourcePresetIdVal, ok := resourcePresetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_preset_id expected to be basetypes.StringValue, was: %T`, resourcePresetIdAttribute))
	}

	if diags.HasError() {
		return NewWorkerValueUnknown(), diags
	}

	return WorkerValue{
		MaxCount:         maxCountVal,
		MinCount:         minCountVal,
		ResourcePresetId: resourcePresetIdVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewWorkerValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) WorkerValue {
	object, diags := NewWorkerValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewWorkerValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t WorkerType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewWorkerValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewWorkerValueUnknown(), nil
	}

	if in.IsNull() {
		return NewWorkerValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewWorkerValueMust(WorkerValue{}.AttributeTypes(ctx), attributes), nil
}

func (t WorkerType) ValueType(ctx context.Context) attr.Value {
	return WorkerValue{}
}

var _ basetypes.ObjectValuable = WorkerValue{}

type WorkerValue struct {
	MaxCount         basetypes.Int64Value  `tfsdk:"max_count"`
	MinCount         basetypes.Int64Value  `tfsdk:"min_count"`
	ResourcePresetId basetypes.StringValue `tfsdk:"resource_preset_id"`
	state            attr.ValueState
}

func (v WorkerValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["max_count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["min_count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["resource_preset_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.MaxCount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["max_count"] = val

		val, err = v.MinCount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["min_count"] = val

		val, err = v.ResourcePresetId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["resource_preset_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v WorkerValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v WorkerValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v WorkerValue) String() string {
	return "WorkerValue"
}

func (v WorkerValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"max_count":          basetypes.Int64Type{},
		"min_count":          basetypes.Int64Type{},
		"resource_preset_id": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"max_count":          v.MaxCount,
			"min_count":          v.MinCount,
			"resource_preset_id": v.ResourcePresetId,
		})

	return objVal, diags
}

func (v WorkerValue) Equal(o attr.Value) bool {
	other, ok := o.(WorkerValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.MaxCount.Equal(other.MaxCount) {
		return false
	}

	if !v.MinCount.Equal(other.MinCount) {
		return false
	}

	if !v.ResourcePresetId.Equal(other.ResourcePresetId) {
		return false
	}

	return true
}

func (v WorkerValue) Type(ctx context.Context) attr.Type {
	return WorkerType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v WorkerValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"max_count":          basetypes.Int64Type{},
		"min_count":          basetypes.Int64Type{},
		"resource_preset_id": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = TimeoutsType{}

type TimeoutsType struct {
	basetypes.ObjectType
}

func (t TimeoutsType) Equal(o attr.Type) bool {
	other, ok := o.(TimeoutsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TimeoutsType) String() string {
	return "TimeoutsType"
}

func (t TimeoutsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if diags.HasError() {
		return nil, diags
	}

	return TimeoutsValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewTimeoutsValueNull() TimeoutsValue {
	return TimeoutsValue{
		state: attr.ValueStateNull,
	}
}

func NewTimeoutsValueUnknown() TimeoutsValue {
	return TimeoutsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTimeoutsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TimeoutsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TimeoutsValue Attribute Value",
				"While creating a TimeoutsValue value, a missing attribute value was detected. "+
					"A TimeoutsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TimeoutsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TimeoutsValue Attribute Type",
				"While creating a TimeoutsValue value, an invalid attribute value was detected. "+
					"A TimeoutsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TimeoutsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TimeoutsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TimeoutsValue Attribute Value",
				"While creating a TimeoutsValue value, an extra attribute value was detected. "+
					"A TimeoutsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TimeoutsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTimeoutsValueUnknown(), diags
	}

	if diags.HasError() {
		return NewTimeoutsValueUnknown(), diags
	}

	return TimeoutsValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewTimeoutsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TimeoutsValue {
	object, diags := NewTimeoutsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTimeoutsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TimeoutsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTimeoutsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTimeoutsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTimeoutsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTimeoutsValueMust(TimeoutsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TimeoutsType) ValueType(ctx context.Context) attr.Value {
	return TimeoutsValue{}
}

var _ basetypes.ObjectValuable = TimeoutsValue{}

type TimeoutsValue struct {
	state attr.ValueState
}

func (v TimeoutsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 0)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 0)

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TimeoutsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TimeoutsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TimeoutsValue) String() string {
	return "TimeoutsValue"
}

func (v TimeoutsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{})

	return objVal, diags
}

func (v TimeoutsValue) Equal(o attr.Value) bool {
	other, ok := o.(TimeoutsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	return true
}

func (v TimeoutsValue) Type(ctx context.Context) attr.Type {
	return TimeoutsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TimeoutsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{}
}

// Code generated by tfgen. DO NOT EDIT.

package yandex_compute_disk_placement_group

import (
	"context"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	compute "github.com/yandex-cloud/go-genproto/yandex/cloud/compute/v1"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/converter"
)

type yandexComputeDiskPlacementGroupModel struct {
	CreatedAt            types.String   `tfsdk:"created_at"`
	Description          types.String   `tfsdk:"description"`
	DiskPlacementGroupId types.String   `tfsdk:"disk_placement_group_id"`
	ID                   types.String   `tfsdk:"id"`
	FolderId             types.String   `tfsdk:"folder_id"`
	Labels               types.Map      `tfsdk:"labels"`
	Name                 types.String   `tfsdk:"name"`
	Status               types.String   `tfsdk:"status"`
	Zone                 types.String   `tfsdk:"zone"`
	Timeouts             timeouts.Value `tfsdk:"timeouts"`
}

func (m *yandexComputeDiskPlacementGroupModel) GetCreatedAt() types.String {
	return m.CreatedAt
}
func (m *yandexComputeDiskPlacementGroupModel) GetDescription() types.String {
	return m.Description
}
func (m *yandexComputeDiskPlacementGroupModel) GetDiskPlacementGroupId() types.String {
	return m.DiskPlacementGroupId
}
func (m *yandexComputeDiskPlacementGroupModel) GetID() types.String {
	return m.ID
}
func (m *yandexComputeDiskPlacementGroupModel) GetFolderId() types.String {
	return m.FolderId
}
func (m *yandexComputeDiskPlacementGroupModel) GetLabels() types.Map {
	return m.Labels
}
func (m *yandexComputeDiskPlacementGroupModel) GetName() types.String {
	return m.Name
}
func (m *yandexComputeDiskPlacementGroupModel) GetStatus() types.String {
	return m.Status
}
func (m *yandexComputeDiskPlacementGroupModel) GetZone() types.String {
	return m.Zone
}

func NewYandexComputeDiskPlacementGroupModel() yandexComputeDiskPlacementGroupModel {
	return yandexComputeDiskPlacementGroupModel{
		CreatedAt:            types.StringNull(),
		Description:          types.StringNull(),
		DiskPlacementGroupId: types.StringNull(),
		ID:                   types.StringNull(),
		FolderId:             types.StringNull(),
		Labels:               types.MapNull(types.StringType),
		Name:                 types.StringNull(),
		Status:               types.StringNull(),
		Zone:                 types.StringNull(),
	}
}

func yandexComputeDiskPlacementGroupModelFillUnknown(target yandexComputeDiskPlacementGroupModel) yandexComputeDiskPlacementGroupModel {
	if target.CreatedAt.IsUnknown() || target.CreatedAt.IsNull() {
		target.CreatedAt = types.StringNull()
	}
	if target.Description.IsUnknown() || target.Description.IsNull() {
		target.Description = types.StringNull()
	}
	if target.DiskPlacementGroupId.IsUnknown() || target.DiskPlacementGroupId.IsNull() {
		target.DiskPlacementGroupId = types.StringNull()
	}
	if target.ID.IsUnknown() || target.ID.IsNull() {
		target.ID = types.StringNull()
	}
	if target.FolderId.IsUnknown() || target.FolderId.IsNull() {
		target.FolderId = types.StringNull()
	}
	if target.Labels.IsUnknown() || target.Labels.IsNull() {
		target.Labels = types.MapNull(types.StringType)
	}
	if target.Name.IsUnknown() || target.Name.IsNull() {
		target.Name = types.StringNull()
	}
	if target.Status.IsUnknown() || target.Status.IsNull() {
		target.Status = types.StringNull()
	}
	if target.Zone.IsUnknown() || target.Zone.IsNull() {
		target.Zone = types.StringNull()
	}
	return target
}

var yandexComputeDiskPlacementGroupModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"created_at":              types.StringType,
		"description":             types.StringType,
		"disk_placement_group_id": types.StringType,
		"id":                      types.StringType,
		"folder_id":               types.StringType,
		"labels":                  types.MapType{ElemType: types.StringType},
		"name":                    types.StringType,
		"status":                  types.StringType,
		"zone":                    types.StringType,
		"timeouts":                timeouts.BlockAll(context.Background()).Type(),
	},
}

func flattenYandexComputeDiskPlacementGroup(ctx context.Context,
	yandexComputeDiskPlacementGroup *compute.DiskPlacementGroup,
	state yandexComputeDiskPlacementGroupModel,
	to timeouts.Value,
	diags *diag.Diagnostics) types.Object {
	if yandexComputeDiskPlacementGroup == nil {
		return types.ObjectNull(yandexComputeDiskPlacementGroupModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexComputeDiskPlacementGroupModelType.AttrTypes, yandexComputeDiskPlacementGroupModel{
		CreatedAt:            types.StringValue(yandexComputeDiskPlacementGroup.GetCreatedAt().AsTime().Format(time.RFC3339)),
		Description:          types.StringValue(yandexComputeDiskPlacementGroup.GetDescription()),
		DiskPlacementGroupId: types.StringValue(yandexComputeDiskPlacementGroup.GetId()),
		ID:                   types.StringValue(yandexComputeDiskPlacementGroup.GetId()),
		FolderId:             types.StringValue(yandexComputeDiskPlacementGroup.GetFolderId()),
		Labels:               flattenYandexComputeDiskPlacementGroupLabels(ctx, yandexComputeDiskPlacementGroup.GetLabels(), state.Labels, diags),
		Name:                 types.StringValue(yandexComputeDiskPlacementGroup.GetName()),
		Status:               types.StringValue(yandexComputeDiskPlacementGroup.GetStatus().String()),
		Zone:                 types.StringValue(yandexComputeDiskPlacementGroup.GetZoneId()),
		Timeouts:             to,
	})
	diags.Append(diag...)
	return value
}

func expandYandexComputeDiskPlacementGroup(ctx context.Context, yandexComputeDiskPlacementGroupState types.Object, diags *diag.Diagnostics) *compute.DiskPlacementGroup {
	if yandexComputeDiskPlacementGroupState.IsNull() || yandexComputeDiskPlacementGroupState.IsUnknown() {
		return nil
	}
	var yandexComputeDiskPlacementGroup yandexComputeDiskPlacementGroupModel
	diags.Append(yandexComputeDiskPlacementGroupState.As(ctx, &yandexComputeDiskPlacementGroup, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexComputeDiskPlacementGroupModel(ctx, yandexComputeDiskPlacementGroup, diags)
}

func expandYandexComputeDiskPlacementGroupModel(ctx context.Context, yandexComputeDiskPlacementGroupState yandexComputeDiskPlacementGroupModel, diags *diag.Diagnostics) *compute.DiskPlacementGroup {
	value := &compute.DiskPlacementGroup{}
	value.SetCreatedAt(converter.ParseTimestamp(yandexComputeDiskPlacementGroupState.CreatedAt.ValueString(), diags))
	value.SetDescription(yandexComputeDiskPlacementGroupState.Description.ValueString())
	value.SetId(yandexComputeDiskPlacementGroupState.DiskPlacementGroupId.ValueString())
	value.SetId(yandexComputeDiskPlacementGroupState.DiskPlacementGroupId.ValueString())
	value.SetFolderId(yandexComputeDiskPlacementGroupState.FolderId.ValueString())
	value.SetLabels(expandYandexComputeDiskPlacementGroupLabels(ctx, yandexComputeDiskPlacementGroupState.Labels, diags))
	value.SetName(yandexComputeDiskPlacementGroupState.Name.ValueString())
	value.SetStatus(compute.DiskPlacementGroup_Status(compute.DiskPlacementGroup_Status_value[yandexComputeDiskPlacementGroupState.Status.ValueString()]))
	value.SetZoneId(yandexComputeDiskPlacementGroupState.Zone.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexComputeDiskPlacementGroupLabels(ctx context.Context, yandexComputeDiskPlacementGroupLabels map[string]string, listState types.Map, diags *diag.Diagnostics) types.Map {
	if yandexComputeDiskPlacementGroupLabels == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.MapNull(types.StringType)
	}
	yandexComputeDiskPlacementGroupLabelsValues := make(map[string]attr.Value)
	for k, elem := range yandexComputeDiskPlacementGroupLabels {
		val := types.StringValue(elem)
		yandexComputeDiskPlacementGroupLabelsValues[k] = val
	}

	value, diag := types.MapValue(types.StringType, yandexComputeDiskPlacementGroupLabelsValues)
	diags.Append(diag...)
	return value
}

func expandYandexComputeDiskPlacementGroupLabels(ctx context.Context, yandexComputeDiskPlacementGroupLabelsState types.Map, diags *diag.Diagnostics) map[string]string {
	if yandexComputeDiskPlacementGroupLabelsState.IsNull() || yandexComputeDiskPlacementGroupLabelsState.IsUnknown() {
		return nil
	}
	if len(yandexComputeDiskPlacementGroupLabelsState.Elements()) == 0 {
		return map[string]string{}
	}
	yandexComputeDiskPlacementGroupLabelsRes := make(map[string]string)
	yandexComputeDiskPlacementGroupLabelsType := make(map[string]types.String)
	diags.Append(yandexComputeDiskPlacementGroupLabelsState.ElementsAs(ctx, &yandexComputeDiskPlacementGroupLabelsType, false)...)
	if diags.HasError() {
		return nil
	}
	for k, elem := range yandexComputeDiskPlacementGroupLabelsType {
		yandexComputeDiskPlacementGroupLabelsRes[k] = elem.ValueString()
	}
	return yandexComputeDiskPlacementGroupLabelsRes
}

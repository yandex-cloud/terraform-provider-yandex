// Code generated by tfgen. DO NOT EDIT.

package yandex_compute_filesystem

import (
	"context"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	compute "github.com/yandex-cloud/go-genproto/yandex/cloud/compute/v1"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/converter"
)

type yandexComputeFilesystemModel struct {
	BlockSize    types.Int64    `tfsdk:"block_size"`
	CreatedAt    types.String   `tfsdk:"created_at"`
	Description  types.String   `tfsdk:"description"`
	FilesystemId types.String   `tfsdk:"filesystem_id"`
	ID           types.String   `tfsdk:"id"`
	FolderId     types.String   `tfsdk:"folder_id"`
	Labels       types.Map      `tfsdk:"labels"`
	Name         types.String   `tfsdk:"name"`
	Size         types.Float64  `tfsdk:"size"`
	Status       types.String   `tfsdk:"status"`
	Type         types.String   `tfsdk:"type"`
	Zone         types.String   `tfsdk:"zone"`
	Timeouts     timeouts.Value `tfsdk:"timeouts"`
}

func (m *yandexComputeFilesystemModel) GetBlockSize() types.Int64 {
	return m.BlockSize
}
func (m *yandexComputeFilesystemModel) GetCreatedAt() types.String {
	return m.CreatedAt
}
func (m *yandexComputeFilesystemModel) GetDescription() types.String {
	return m.Description
}
func (m *yandexComputeFilesystemModel) GetFilesystemId() types.String {
	return m.FilesystemId
}
func (m *yandexComputeFilesystemModel) GetID() types.String {
	return m.ID
}
func (m *yandexComputeFilesystemModel) GetFolderId() types.String {
	return m.FolderId
}
func (m *yandexComputeFilesystemModel) GetLabels() types.Map {
	return m.Labels
}
func (m *yandexComputeFilesystemModel) GetName() types.String {
	return m.Name
}
func (m *yandexComputeFilesystemModel) GetSize() types.Float64 {
	return m.Size
}
func (m *yandexComputeFilesystemModel) GetStatus() types.String {
	return m.Status
}
func (m *yandexComputeFilesystemModel) GetType() types.String {
	return m.Type
}
func (m *yandexComputeFilesystemModel) GetZone() types.String {
	return m.Zone
}

func NewYandexComputeFilesystemModel() yandexComputeFilesystemModel {
	return yandexComputeFilesystemModel{
		BlockSize:    types.Int64Null(),
		CreatedAt:    types.StringNull(),
		Description:  types.StringNull(),
		FilesystemId: types.StringNull(),
		ID:           types.StringNull(),
		FolderId:     types.StringNull(),
		Labels:       types.MapNull(types.StringType),
		Name:         types.StringNull(),
		Size:         types.Float64Null(),
		Status:       types.StringNull(),
		Type:         types.StringNull(),
		Zone:         types.StringNull(),
	}
}

func yandexComputeFilesystemModelFillUnknown(target yandexComputeFilesystemModel) yandexComputeFilesystemModel {
	if target.BlockSize.IsUnknown() || target.BlockSize.IsNull() {
		target.BlockSize = types.Int64Null()
	}
	if target.CreatedAt.IsUnknown() || target.CreatedAt.IsNull() {
		target.CreatedAt = types.StringNull()
	}
	if target.Description.IsUnknown() || target.Description.IsNull() {
		target.Description = types.StringNull()
	}
	if target.FilesystemId.IsUnknown() || target.FilesystemId.IsNull() {
		target.FilesystemId = types.StringNull()
	}
	if target.ID.IsUnknown() || target.ID.IsNull() {
		target.ID = types.StringNull()
	}
	if target.FolderId.IsUnknown() || target.FolderId.IsNull() {
		target.FolderId = types.StringNull()
	}
	if target.Labels.IsUnknown() || target.Labels.IsNull() {
		target.Labels = types.MapNull(types.StringType)
	}
	if target.Name.IsUnknown() || target.Name.IsNull() {
		target.Name = types.StringNull()
	}
	if target.Size.IsUnknown() || target.Size.IsNull() {
		target.Size = types.Float64Null()
	}
	if target.Status.IsUnknown() || target.Status.IsNull() {
		target.Status = types.StringNull()
	}
	if target.Type.IsUnknown() || target.Type.IsNull() {
		target.Type = types.StringNull()
	}
	if target.Zone.IsUnknown() || target.Zone.IsNull() {
		target.Zone = types.StringNull()
	}
	return target
}

var yandexComputeFilesystemModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"block_size":    types.Int64Type,
		"created_at":    types.StringType,
		"description":   types.StringType,
		"filesystem_id": types.StringType,
		"id":            types.StringType,
		"folder_id":     types.StringType,
		"labels":        types.MapType{ElemType: types.StringType},
		"name":          types.StringType,
		"size":          types.Float64Type,
		"status":        types.StringType,
		"type":          types.StringType,
		"zone":          types.StringType,
		"timeouts":      timeouts.BlockAll(context.Background()).Type(),
	},
}

func flattenYandexComputeFilesystem(ctx context.Context,
	yandexComputeFilesystem *compute.Filesystem,
	state yandexComputeFilesystemModel,
	to timeouts.Value,
	diags *diag.Diagnostics) types.Object {
	if yandexComputeFilesystem == nil {
		return types.ObjectNull(yandexComputeFilesystemModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexComputeFilesystemModelType.AttrTypes, yandexComputeFilesystemModel{
		BlockSize:    types.Int64Value(int64(yandexComputeFilesystem.GetBlockSize())),
		CreatedAt:    types.StringValue(yandexComputeFilesystem.GetCreatedAt().AsTime().Format(time.RFC3339)),
		Description:  types.StringValue(yandexComputeFilesystem.GetDescription()),
		FilesystemId: types.StringValue(yandexComputeFilesystem.GetId()),
		ID:           types.StringValue(yandexComputeFilesystem.GetId()),
		FolderId:     types.StringValue(yandexComputeFilesystem.GetFolderId()),
		Labels:       flattenYandexComputeFilesystemLabels(ctx, yandexComputeFilesystem.GetLabels(), state.Labels, diags),
		Name:         types.StringValue(yandexComputeFilesystem.GetName()),
		Size:         types.Float64Value(float64(converter.ToGigabytesInFloat(yandexComputeFilesystem.GetSize()))),
		Status:       types.StringValue(yandexComputeFilesystem.GetStatus().String()),
		Type:         types.StringValue(yandexComputeFilesystem.GetTypeId()),
		Zone:         types.StringValue(yandexComputeFilesystem.GetZoneId()),
		Timeouts:     to,
	})
	diags.Append(diag...)
	return value
}

func expandYandexComputeFilesystem(ctx context.Context, yandexComputeFilesystemState types.Object, diags *diag.Diagnostics) *compute.Filesystem {
	if yandexComputeFilesystemState.IsNull() || yandexComputeFilesystemState.IsUnknown() {
		return nil
	}
	var yandexComputeFilesystem yandexComputeFilesystemModel
	diags.Append(yandexComputeFilesystemState.As(ctx, &yandexComputeFilesystem, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexComputeFilesystemModel(ctx, yandexComputeFilesystem, diags)
}

func expandYandexComputeFilesystemModel(ctx context.Context, yandexComputeFilesystemState yandexComputeFilesystemModel, diags *diag.Diagnostics) *compute.Filesystem {
	value := &compute.Filesystem{}
	value.SetBlockSize((yandexComputeFilesystemState.BlockSize.ValueInt64()))
	value.SetCreatedAt(converter.ParseTimestamp(yandexComputeFilesystemState.CreatedAt.ValueString(), diags))
	value.SetDescription(yandexComputeFilesystemState.Description.ValueString())
	value.SetId(yandexComputeFilesystemState.FilesystemId.ValueString())
	value.SetId(yandexComputeFilesystemState.FilesystemId.ValueString())
	value.SetFolderId(yandexComputeFilesystemState.FolderId.ValueString())
	value.SetLabels(expandYandexComputeFilesystemLabels(ctx, yandexComputeFilesystemState.Labels, diags))
	value.SetName(yandexComputeFilesystemState.Name.ValueString())
	value.SetSize(converter.ToBytesFromFloat((yandexComputeFilesystemState.Size.ValueFloat64())))
	value.SetStatus(compute.Filesystem_Status(compute.Filesystem_Status_value[yandexComputeFilesystemState.Status.ValueString()]))
	value.SetTypeId(yandexComputeFilesystemState.Type.ValueString())
	value.SetZoneId(yandexComputeFilesystemState.Zone.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexComputeFilesystemLabels(ctx context.Context, yandexComputeFilesystemLabels map[string]string, listState types.Map, diags *diag.Diagnostics) types.Map {
	if yandexComputeFilesystemLabels == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.MapNull(types.StringType)
	}
	yandexComputeFilesystemLabelsValues := make(map[string]attr.Value)
	for k, elem := range yandexComputeFilesystemLabels {
		val := types.StringValue(elem)
		yandexComputeFilesystemLabelsValues[k] = val
	}

	value, diag := types.MapValue(types.StringType, yandexComputeFilesystemLabelsValues)
	diags.Append(diag...)
	return value
}

func expandYandexComputeFilesystemLabels(ctx context.Context, yandexComputeFilesystemLabelsState types.Map, diags *diag.Diagnostics) map[string]string {
	if yandexComputeFilesystemLabelsState.IsNull() || yandexComputeFilesystemLabelsState.IsUnknown() {
		return nil
	}
	if len(yandexComputeFilesystemLabelsState.Elements()) == 0 {
		return map[string]string{}
	}
	yandexComputeFilesystemLabelsRes := make(map[string]string)
	yandexComputeFilesystemLabelsType := make(map[string]types.String)
	diags.Append(yandexComputeFilesystemLabelsState.ElementsAs(ctx, &yandexComputeFilesystemLabelsType, false)...)
	if diags.HasError() {
		return nil
	}
	for k, elem := range yandexComputeFilesystemLabelsType {
		yandexComputeFilesystemLabelsRes[k] = elem.ValueString()
	}
	return yandexComputeFilesystemLabelsRes
}

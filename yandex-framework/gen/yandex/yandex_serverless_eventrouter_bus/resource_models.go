// Code generated by tfgen. DO NOT EDIT.

package yandex_serverless_eventrouter_bus

import (
	"context"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	eventrouter "github.com/yandex-cloud/go-genproto/yandex/cloud/serverless/eventrouter/v1"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/converter"
)

type yandexServerlessEventrouterBusModel struct {
	BusId              types.String   `tfsdk:"bus_id"`
	ID                 types.String   `tfsdk:"id"`
	CloudId            types.String   `tfsdk:"cloud_id"`
	CreatedAt          types.String   `tfsdk:"created_at"`
	DeletionProtection types.Bool     `tfsdk:"deletion_protection"`
	Description        types.String   `tfsdk:"description"`
	FolderId           types.String   `tfsdk:"folder_id"`
	Labels             types.Map      `tfsdk:"labels"`
	Name               types.String   `tfsdk:"name"`
	Status             types.String   `tfsdk:"status"`
	Timeouts           timeouts.Value `tfsdk:"timeouts"`
}

func (m *yandexServerlessEventrouterBusModel) GetBusId() types.String {
	return m.BusId
}
func (m *yandexServerlessEventrouterBusModel) GetID() types.String {
	return m.ID
}
func (m *yandexServerlessEventrouterBusModel) GetCloudId() types.String {
	return m.CloudId
}
func (m *yandexServerlessEventrouterBusModel) GetCreatedAt() types.String {
	return m.CreatedAt
}
func (m *yandexServerlessEventrouterBusModel) GetDeletionProtection() types.Bool {
	return m.DeletionProtection
}
func (m *yandexServerlessEventrouterBusModel) GetDescription() types.String {
	return m.Description
}
func (m *yandexServerlessEventrouterBusModel) GetFolderId() types.String {
	return m.FolderId
}
func (m *yandexServerlessEventrouterBusModel) GetLabels() types.Map {
	return m.Labels
}
func (m *yandexServerlessEventrouterBusModel) GetName() types.String {
	return m.Name
}
func (m *yandexServerlessEventrouterBusModel) GetStatus() types.String {
	return m.Status
}

func NewYandexServerlessEventrouterBusModel() yandexServerlessEventrouterBusModel {
	return yandexServerlessEventrouterBusModel{
		BusId:              types.StringNull(),
		ID:                 types.StringNull(),
		CloudId:            types.StringNull(),
		CreatedAt:          types.StringNull(),
		DeletionProtection: types.BoolNull(),
		Description:        types.StringNull(),
		FolderId:           types.StringNull(),
		Labels:             types.MapNull(types.StringType),
		Name:               types.StringNull(),
		Status:             types.StringNull(),
	}
}

func yandexServerlessEventrouterBusModelFillUnknown(target yandexServerlessEventrouterBusModel) yandexServerlessEventrouterBusModel {
	if target.BusId.IsUnknown() || target.BusId.IsNull() {
		target.BusId = types.StringNull()
	}
	if target.ID.IsUnknown() || target.ID.IsNull() {
		target.ID = types.StringNull()
	}
	if target.CloudId.IsUnknown() || target.CloudId.IsNull() {
		target.CloudId = types.StringNull()
	}
	if target.CreatedAt.IsUnknown() || target.CreatedAt.IsNull() {
		target.CreatedAt = types.StringNull()
	}
	if target.DeletionProtection.IsUnknown() || target.DeletionProtection.IsNull() {
		target.DeletionProtection = types.BoolNull()
	}
	if target.Description.IsUnknown() || target.Description.IsNull() {
		target.Description = types.StringNull()
	}
	if target.FolderId.IsUnknown() || target.FolderId.IsNull() {
		target.FolderId = types.StringNull()
	}
	if target.Labels.IsUnknown() || target.Labels.IsNull() {
		target.Labels = types.MapNull(types.StringType)
	}
	if target.Name.IsUnknown() || target.Name.IsNull() {
		target.Name = types.StringNull()
	}
	if target.Status.IsUnknown() || target.Status.IsNull() {
		target.Status = types.StringNull()
	}
	return target
}

var yandexServerlessEventrouterBusModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"bus_id":              types.StringType,
		"id":                  types.StringType,
		"cloud_id":            types.StringType,
		"created_at":          types.StringType,
		"deletion_protection": types.BoolType,
		"description":         types.StringType,
		"folder_id":           types.StringType,
		"labels":              types.MapType{ElemType: types.StringType},
		"name":                types.StringType,
		"status":              types.StringType,
		"timeouts":            timeouts.BlockAll(context.Background()).Type(),
	},
}

func flattenYandexServerlessEventrouterBus(ctx context.Context,
	yandexServerlessEventrouterBus *eventrouter.Bus,
	state yandexServerlessEventrouterBusModel,
	to timeouts.Value,
	diags *diag.Diagnostics) types.Object {
	if yandexServerlessEventrouterBus == nil {
		return types.ObjectNull(yandexServerlessEventrouterBusModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexServerlessEventrouterBusModelType.AttrTypes, yandexServerlessEventrouterBusModel{
		BusId:              types.StringValue(yandexServerlessEventrouterBus.GetId()),
		ID:                 types.StringValue(yandexServerlessEventrouterBus.GetId()),
		CloudId:            types.StringValue(yandexServerlessEventrouterBus.GetCloudId()),
		CreatedAt:          types.StringValue(yandexServerlessEventrouterBus.GetCreatedAt().AsTime().Format(time.RFC3339)),
		DeletionProtection: types.BoolValue(yandexServerlessEventrouterBus.GetDeletionProtection()),
		Description:        types.StringValue(yandexServerlessEventrouterBus.GetDescription()),
		FolderId:           types.StringValue(yandexServerlessEventrouterBus.GetFolderId()),
		Labels:             flattenYandexServerlessEventrouterBusLabels(ctx, yandexServerlessEventrouterBus.GetLabels(), state.Labels, diags),
		Name:               types.StringValue(yandexServerlessEventrouterBus.GetName()),
		Status:             types.StringValue(yandexServerlessEventrouterBus.GetStatus().String()),
		Timeouts:           to,
	})
	diags.Append(diag...)
	return value
}

func expandYandexServerlessEventrouterBus(ctx context.Context, yandexServerlessEventrouterBusState types.Object, diags *diag.Diagnostics) *eventrouter.Bus {
	if yandexServerlessEventrouterBusState.IsNull() || yandexServerlessEventrouterBusState.IsUnknown() {
		return nil
	}
	var yandexServerlessEventrouterBus yandexServerlessEventrouterBusModel
	diags.Append(yandexServerlessEventrouterBusState.As(ctx, &yandexServerlessEventrouterBus, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexServerlessEventrouterBusModel(ctx, yandexServerlessEventrouterBus, diags)
}

func expandYandexServerlessEventrouterBusModel(ctx context.Context, yandexServerlessEventrouterBusState yandexServerlessEventrouterBusModel, diags *diag.Diagnostics) *eventrouter.Bus {
	value := &eventrouter.Bus{}
	value.SetId(yandexServerlessEventrouterBusState.BusId.ValueString())
	value.SetId(yandexServerlessEventrouterBusState.BusId.ValueString())
	value.SetCloudId(yandexServerlessEventrouterBusState.CloudId.ValueString())
	value.SetCreatedAt(converter.ParseTimestamp(yandexServerlessEventrouterBusState.CreatedAt.ValueString(), diags))
	value.SetDeletionProtection(yandexServerlessEventrouterBusState.DeletionProtection.ValueBool())
	value.SetDescription(yandexServerlessEventrouterBusState.Description.ValueString())
	value.SetFolderId(yandexServerlessEventrouterBusState.FolderId.ValueString())
	value.SetLabels(expandYandexServerlessEventrouterBusLabels(ctx, yandexServerlessEventrouterBusState.Labels, diags))
	value.SetName(yandexServerlessEventrouterBusState.Name.ValueString())
	value.SetStatus(eventrouter.Bus_Status(eventrouter.Bus_Status_value[yandexServerlessEventrouterBusState.Status.ValueString()]))
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexServerlessEventrouterBusLabels(ctx context.Context, yandexServerlessEventrouterBusLabels map[string]string, listState types.Map, diags *diag.Diagnostics) types.Map {
	if yandexServerlessEventrouterBusLabels == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.MapNull(types.StringType)
	}
	yandexServerlessEventrouterBusLabelsValues := make(map[string]attr.Value)
	for k, elem := range yandexServerlessEventrouterBusLabels {
		val := types.StringValue(elem)
		yandexServerlessEventrouterBusLabelsValues[k] = val
	}

	value, diag := types.MapValue(types.StringType, yandexServerlessEventrouterBusLabelsValues)
	diags.Append(diag...)
	return value
}

func expandYandexServerlessEventrouterBusLabels(ctx context.Context, yandexServerlessEventrouterBusLabelsState types.Map, diags *diag.Diagnostics) map[string]string {
	if yandexServerlessEventrouterBusLabelsState.IsNull() || yandexServerlessEventrouterBusLabelsState.IsUnknown() {
		return nil
	}
	if len(yandexServerlessEventrouterBusLabelsState.Elements()) == 0 {
		return map[string]string{}
	}
	yandexServerlessEventrouterBusLabelsRes := make(map[string]string)
	yandexServerlessEventrouterBusLabelsType := make(map[string]types.String)
	diags.Append(yandexServerlessEventrouterBusLabelsState.ElementsAs(ctx, &yandexServerlessEventrouterBusLabelsType, false)...)
	if diags.HasError() {
		return nil
	}
	for k, elem := range yandexServerlessEventrouterBusLabelsType {
		yandexServerlessEventrouterBusLabelsRes[k] = elem.ValueString()
	}
	return yandexServerlessEventrouterBusLabelsRes
}

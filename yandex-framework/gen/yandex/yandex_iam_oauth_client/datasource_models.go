// Code generated by tfgen. DO NOT EDIT.

package yandex_iam_oauth_client

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	iam "github.com/yandex-cloud/go-genproto/yandex/cloud/iam/v1"
)

type yandexIamOauthClientDatasourceModel struct {
	FolderId      types.String   `tfsdk:"folder_id"`
	Name          types.String   `tfsdk:"name"`
	OauthClientId types.String   `tfsdk:"oauth_client_id"`
	ID            types.String   `tfsdk:"id"`
	RedirectUris  types.List     `tfsdk:"redirect_uris"`
	Scopes        types.List     `tfsdk:"scopes"`
	Status        types.String   `tfsdk:"status"`
	Timeouts      timeouts.Value `tfsdk:"timeouts"`
}

func (m *yandexIamOauthClientDatasourceModel) GetFolderId() types.String {
	return m.FolderId
}
func (m *yandexIamOauthClientDatasourceModel) GetName() types.String {
	return m.Name
}
func (m *yandexIamOauthClientDatasourceModel) GetOauthClientId() types.String {
	return m.OauthClientId
}
func (m *yandexIamOauthClientDatasourceModel) GetID() types.String {
	return m.ID
}
func (m *yandexIamOauthClientDatasourceModel) GetRedirectUris() types.List {
	return m.RedirectUris
}
func (m *yandexIamOauthClientDatasourceModel) GetScopes() types.List {
	return m.Scopes
}
func (m *yandexIamOauthClientDatasourceModel) GetStatus() types.String {
	return m.Status
}

func NewYandexIamOauthClientDatasourceModel() yandexIamOauthClientDatasourceModel {
	return yandexIamOauthClientDatasourceModel{
		FolderId:      types.StringNull(),
		Name:          types.StringNull(),
		OauthClientId: types.StringNull(),
		ID:            types.StringNull(),
		RedirectUris:  types.ListNull(types.StringType),
		Scopes:        types.ListNull(types.StringType),
		Status:        types.StringNull(),
	}
}

func yandexIamOauthClientDatasourceModelFillUnknown(target yandexIamOauthClientDatasourceModel) yandexIamOauthClientDatasourceModel {
	if target.FolderId.IsUnknown() || target.FolderId.IsNull() {
		target.FolderId = types.StringNull()
	}
	if target.Name.IsUnknown() || target.Name.IsNull() {
		target.Name = types.StringNull()
	}
	if target.OauthClientId.IsUnknown() || target.OauthClientId.IsNull() {
		target.OauthClientId = types.StringNull()
	}
	if target.ID.IsUnknown() || target.ID.IsNull() {
		target.ID = types.StringNull()
	}
	if target.RedirectUris.IsUnknown() || target.RedirectUris.IsNull() {
		target.RedirectUris = types.ListNull(types.StringType)
	}
	if target.Scopes.IsUnknown() || target.Scopes.IsNull() {
		target.Scopes = types.ListNull(types.StringType)
	}
	if target.Status.IsUnknown() || target.Status.IsNull() {
		target.Status = types.StringNull()
	}
	return target
}

var yandexIamOauthClientDatasourceModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"folder_id":       types.StringType,
		"name":            types.StringType,
		"oauth_client_id": types.StringType,
		"id":              types.StringType,
		"redirect_uris":   types.ListType{ElemType: types.StringType},
		"scopes":          types.ListType{ElemType: types.StringType},
		"status":          types.StringType,
		"timeouts":        timeouts.AttributesAll(context.Background()).GetType(),
	},
}

func flattenYandexIamOauthClientDatasource(ctx context.Context,
	yandexIamOauthClientDatasource *iam.OAuthClient,
	state yandexIamOauthClientDatasourceModel,
	to timeouts.Value,
	diags *diag.Diagnostics) types.Object {
	if yandexIamOauthClientDatasource == nil {
		return types.ObjectNull(yandexIamOauthClientDatasourceModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexIamOauthClientDatasourceModelType.AttrTypes, yandexIamOauthClientDatasourceModel{
		FolderId:      types.StringValue(yandexIamOauthClientDatasource.GetFolderId()),
		Name:          types.StringValue(yandexIamOauthClientDatasource.GetName()),
		OauthClientId: types.StringValue(yandexIamOauthClientDatasource.GetId()),
		ID:            types.StringValue(yandexIamOauthClientDatasource.GetId()),
		RedirectUris:  flattenYandexIamOauthClientRedirectUris(ctx, yandexIamOauthClientDatasource.GetRedirectUris(), state.RedirectUris, diags),
		Scopes:        flattenYandexIamOauthClientScopes(ctx, yandexIamOauthClientDatasource.GetScopes(), state.Scopes, diags),
		Status:        types.StringValue(yandexIamOauthClientDatasource.GetStatus().String()),
		Timeouts:      to,
	})
	diags.Append(diag...)
	return value
}

// Code generated by tfgen. DO NOT EDIT.

package yandex_iam_oauth_client

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	iam "github.com/yandex-cloud/go-genproto/yandex/cloud/iam/v1"
)

type yandexIamOauthClientModel struct {
	FolderId      types.String   `tfsdk:"folder_id"`
	Name          types.String   `tfsdk:"name"`
	OauthClientId types.String   `tfsdk:"oauth_client_id"`
	ID            types.String   `tfsdk:"id"`
	RedirectUris  types.List     `tfsdk:"redirect_uris"`
	Scopes        types.List     `tfsdk:"scopes"`
	Status        types.String   `tfsdk:"status"`
	Timeouts      timeouts.Value `tfsdk:"timeouts"`
}

func (m *yandexIamOauthClientModel) GetFolderId() types.String {
	return m.FolderId
}
func (m *yandexIamOauthClientModel) GetName() types.String {
	return m.Name
}
func (m *yandexIamOauthClientModel) GetOauthClientId() types.String {
	return m.OauthClientId
}
func (m *yandexIamOauthClientModel) GetID() types.String {
	return m.ID
}
func (m *yandexIamOauthClientModel) GetRedirectUris() types.List {
	return m.RedirectUris
}
func (m *yandexIamOauthClientModel) GetScopes() types.List {
	return m.Scopes
}
func (m *yandexIamOauthClientModel) GetStatus() types.String {
	return m.Status
}

func NewYandexIamOauthClientModel() yandexIamOauthClientModel {
	return yandexIamOauthClientModel{
		FolderId:      types.StringNull(),
		Name:          types.StringNull(),
		OauthClientId: types.StringNull(),
		ID:            types.StringNull(),
		RedirectUris:  types.ListNull(types.StringType),
		Scopes:        types.ListNull(types.StringType),
		Status:        types.StringNull(),
	}
}

func yandexIamOauthClientModelFillUnknown(target yandexIamOauthClientModel) yandexIamOauthClientModel {
	if target.FolderId.IsUnknown() || target.FolderId.IsNull() {
		target.FolderId = types.StringNull()
	}
	if target.Name.IsUnknown() || target.Name.IsNull() {
		target.Name = types.StringNull()
	}
	if target.OauthClientId.IsUnknown() || target.OauthClientId.IsNull() {
		target.OauthClientId = types.StringNull()
	}
	if target.ID.IsUnknown() || target.ID.IsNull() {
		target.ID = types.StringNull()
	}
	if target.RedirectUris.IsUnknown() || target.RedirectUris.IsNull() {
		target.RedirectUris = types.ListNull(types.StringType)
	}
	if target.Scopes.IsUnknown() || target.Scopes.IsNull() {
		target.Scopes = types.ListNull(types.StringType)
	}
	if target.Status.IsUnknown() || target.Status.IsNull() {
		target.Status = types.StringNull()
	}
	return target
}

var yandexIamOauthClientModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"folder_id":       types.StringType,
		"name":            types.StringType,
		"oauth_client_id": types.StringType,
		"id":              types.StringType,
		"redirect_uris":   types.ListType{ElemType: types.StringType},
		"scopes":          types.ListType{ElemType: types.StringType},
		"status":          types.StringType,
		"timeouts":        timeouts.AttributesAll(context.Background()).GetType(),
	},
}

func flattenYandexIamOauthClient(ctx context.Context,
	yandexIamOauthClient *iam.OAuthClient,
	state yandexIamOauthClientModel,
	to timeouts.Value,
	diags *diag.Diagnostics) types.Object {
	if yandexIamOauthClient == nil {
		return types.ObjectNull(yandexIamOauthClientModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexIamOauthClientModelType.AttrTypes, yandexIamOauthClientModel{
		FolderId:      types.StringValue(yandexIamOauthClient.GetFolderId()),
		Name:          types.StringValue(yandexIamOauthClient.GetName()),
		OauthClientId: types.StringValue(yandexIamOauthClient.GetId()),
		ID:            types.StringValue(yandexIamOauthClient.GetId()),
		RedirectUris:  flattenYandexIamOauthClientRedirectUris(ctx, yandexIamOauthClient.GetRedirectUris(), state.RedirectUris, diags),
		Scopes:        flattenYandexIamOauthClientScopes(ctx, yandexIamOauthClient.GetScopes(), state.Scopes, diags),
		Status:        types.StringValue(yandexIamOauthClient.GetStatus().String()),
		Timeouts:      to,
	})
	diags.Append(diag...)
	return value
}

func expandYandexIamOauthClient(ctx context.Context, yandexIamOauthClientState types.Object, diags *diag.Diagnostics) *iam.OAuthClient {
	if yandexIamOauthClientState.IsNull() || yandexIamOauthClientState.IsUnknown() {
		return nil
	}
	var yandexIamOauthClient yandexIamOauthClientModel
	diags.Append(yandexIamOauthClientState.As(ctx, &yandexIamOauthClient, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexIamOauthClientModel(ctx, yandexIamOauthClient, diags)
}

func expandYandexIamOauthClientModel(ctx context.Context, yandexIamOauthClientState yandexIamOauthClientModel, diags *diag.Diagnostics) *iam.OAuthClient {
	value := &iam.OAuthClient{}
	value.SetFolderId(yandexIamOauthClientState.FolderId.ValueString())
	value.SetName(yandexIamOauthClientState.Name.ValueString())
	value.SetId(yandexIamOauthClientState.OauthClientId.ValueString())
	value.SetId(yandexIamOauthClientState.OauthClientId.ValueString())
	value.SetRedirectUris(expandYandexIamOauthClientRedirectUris(ctx, yandexIamOauthClientState.RedirectUris, diags))
	value.SetScopes(expandYandexIamOauthClientScopes(ctx, yandexIamOauthClientState.Scopes, diags))
	value.SetStatus(iam.OAuthClient_Status(iam.OAuthClient_Status_value[yandexIamOauthClientState.Status.ValueString()]))
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexIamOauthClientRedirectUris(ctx context.Context, yandexIamOauthClientRedirectUris []string, listState types.List, diags *diag.Diagnostics) types.List {
	if yandexIamOauthClientRedirectUris == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.ListNull(types.StringType)
	}
	var yandexIamOauthClientRedirectUrisValues []attr.Value
	for _, elem := range yandexIamOauthClientRedirectUris {
		val := types.StringValue(elem)
		yandexIamOauthClientRedirectUrisValues = append(yandexIamOauthClientRedirectUrisValues, val)
	}

	value, diag := types.ListValue(types.StringType, yandexIamOauthClientRedirectUrisValues)
	diags.Append(diag...)
	return value
}

func expandYandexIamOauthClientRedirectUris(ctx context.Context, yandexIamOauthClientRedirectUrisState types.List, diags *diag.Diagnostics) []string {
	if yandexIamOauthClientRedirectUrisState.IsNull() || yandexIamOauthClientRedirectUrisState.IsUnknown() {
		return nil
	}
	if len(yandexIamOauthClientRedirectUrisState.Elements()) == 0 {
		return []string{}
	}
	yandexIamOauthClientRedirectUrisRes := make([]string, 0, len(yandexIamOauthClientRedirectUrisState.Elements()))
	yandexIamOauthClientRedirectUrisType := make([]types.String, 0, len(yandexIamOauthClientRedirectUrisState.Elements()))
	diags.Append(yandexIamOauthClientRedirectUrisState.ElementsAs(ctx, &yandexIamOauthClientRedirectUrisType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexIamOauthClientRedirectUrisType {
		yandexIamOauthClientRedirectUrisRes = append(yandexIamOauthClientRedirectUrisRes, elem.ValueString())
	}
	return yandexIamOauthClientRedirectUrisRes
}

func flattenYandexIamOauthClientScopes(ctx context.Context, yandexIamOauthClientScopes []string, listState types.List, diags *diag.Diagnostics) types.List {
	if yandexIamOauthClientScopes == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.ListNull(types.StringType)
	}
	var yandexIamOauthClientScopesValues []attr.Value
	for _, elem := range yandexIamOauthClientScopes {
		val := types.StringValue(elem)
		yandexIamOauthClientScopesValues = append(yandexIamOauthClientScopesValues, val)
	}

	value, diag := types.ListValue(types.StringType, yandexIamOauthClientScopesValues)
	diags.Append(diag...)
	return value
}

func expandYandexIamOauthClientScopes(ctx context.Context, yandexIamOauthClientScopesState types.List, diags *diag.Diagnostics) []string {
	if yandexIamOauthClientScopesState.IsNull() || yandexIamOauthClientScopesState.IsUnknown() {
		return nil
	}
	if len(yandexIamOauthClientScopesState.Elements()) == 0 {
		return []string{}
	}
	yandexIamOauthClientScopesRes := make([]string, 0, len(yandexIamOauthClientScopesState.Elements()))
	yandexIamOauthClientScopesType := make([]types.String, 0, len(yandexIamOauthClientScopesState.Elements()))
	diags.Append(yandexIamOauthClientScopesState.ElementsAs(ctx, &yandexIamOauthClientScopesType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexIamOauthClientScopesType {
		yandexIamOauthClientScopesRes = append(yandexIamOauthClientScopesRes, elem.ValueString())
	}
	return yandexIamOauthClientScopesRes
}

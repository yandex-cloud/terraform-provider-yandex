// Code generated by tfgen. DO NOT EDIT.

package yandex_organizationmanager_idp_user

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	idp "github.com/yandex-cloud/go-genproto/yandex/cloud/organizationmanager/v1/idp"
	idpsdk "github.com/yandex-cloud/go-sdk/services/organizationmanager/v1/idp"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/validate"
	provider_config "github.com/yandex-cloud/terraform-provider-yandex/yandex-framework/provider/config"
	"google.golang.org/genproto/protobuf/field_mask"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/metadata"
	"google.golang.org/protobuf/types/known/wrapperspb"
)

var _ resource.ResourceWithConfigure = (*yandexOrganizationmanagerIdpUserResource)(nil)
var _ resource.ResourceWithImportState = (*yandexOrganizationmanagerIdpUserResource)(nil)

type yandexOrganizationmanagerIdpUserResource struct {
	providerConfig *provider_config.Config
}

func NewResource() resource.Resource {
	return &yandexOrganizationmanagerIdpUserResource{}
}

func (r *yandexOrganizationmanagerIdpUserResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "yandex_organizationmanager_idp_user"
}

func (r *yandexOrganizationmanagerIdpUserResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerConfig, ok := req.ProviderData.(*provider_config.Config)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *provider_config.Config, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)
		return
	}

	r.providerConfig = providerConfig
}

func (r *yandexOrganizationmanagerIdpUserResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = YandexOrganizationmanagerIdpUserResourceSchema(ctx)
}

func (r *yandexOrganizationmanagerIdpUserResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("user_id"), req, resp)
}

func (r *yandexOrganizationmanagerIdpUserResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state yandexOrganizationmanagerIdpUserModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	readTimeout, timeoutInitError := state.Timeouts.Read(ctx, provider_config.DefaultTimeout)
	if timeoutInitError != nil {
		resp.Diagnostics.Append(timeoutInitError...)
		return
	}

	ctx, cancel := context.WithTimeout(ctx, readTimeout)
	defer cancel()

	reqApi := &idp.GetUserRequest{}
	id := state.ID.ValueString()
	if !state.UserId.IsUnknown() && !state.UserId.IsNull() {
		id = state.UserId.ValueString()
	}
	reqApi.SetUserId(id)
	tflog.Debug(ctx, fmt.Sprintf("Read user request: %s", validate.ProtoDump(reqApi)))

	md := new(metadata.MD)
	res, err := idpsdk.NewUserClient(r.providerConfig.SDKv2).Get(ctx, reqApi, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read user x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read user x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		if validate.IsStatusWithCode(err, codes.NotFound) {
			resp.Diagnostics.AddWarning(
				"Failed to Read resource",
				"user not found",
			)
			resp.State.RemoveResource(ctx)
			return
		} else {
			resp.Diagnostics.AddError(
				"Failed to Read resource",
				"Error while requesting API to get user:"+err.Error(),
			)
		}
	}
	tflog.Debug(ctx, fmt.Sprintf("Read user response: %s", validate.ProtoDump(res)))

	if resp.Diagnostics.HasError() {
		return
	}

	// diagnostics don't have errors and resource is nil => resource not found
	if res == nil {
		resp.Diagnostics.AddError("Failed to read", "Resource not found")
		return
	}

	newState := flattenYandexOrganizationmanagerIdpUser(ctx, res, state, state.Timeouts, &resp.Diagnostics)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &newState)...)
	if resp.Diagnostics.HasError() {
		return
	}
}

func (r *yandexOrganizationmanagerIdpUserResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan yandexOrganizationmanagerIdpUserModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	createTimeout, timeoutInitError := plan.Timeouts.Create(ctx, provider_config.DefaultTimeout)
	if timeoutInitError != nil {
		resp.Diagnostics.Append(timeoutInitError...)
		return
	}

	ctx, cancel := context.WithTimeout(ctx, createTimeout)
	defer cancel()

	createReq := &idp.CreateUserRequest{}
	createReq.SetUserpoolId(plan.UserpoolId.ValueString())
	createReq.SetUsername(plan.Username.ValueString())
	createReq.SetFullName(plan.FullName.ValueString())
	createReq.SetGivenName(plan.GivenName.ValueString())
	createReq.SetFamilyName(plan.FamilyName.ValueString())
	createReq.SetEmail(plan.Email.ValueString())
	createReq.SetPhoneNumber(plan.PhoneNumber.ValueString())
	if !(plan.PasswordSpec.IsNull() || plan.PasswordSpec.IsUnknown() || plan.PasswordSpec.Equal(types.Object{})) {
		createReq.SetPasswordSpec(expandYandexOrganizationmanagerIdpUserPasswordSpec(ctx, plan.PasswordSpec, &diags))
	}
	if !(plan.PasswordHash.IsNull() || plan.PasswordHash.IsUnknown() || plan.PasswordHash.Equal(types.Object{})) {
		createReq.SetPasswordHash(expandYandexOrganizationmanagerIdpUserPasswordHash(ctx, plan.PasswordHash, &diags))
	}
	createReq.SetIsActive(wrapperspb.Bool(plan.IsActive.ValueBool()))
	createReq.SetExternalId(plan.ExternalId.ValueString())
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, fmt.Sprintf("Create user request: %s", validate.ProtoDump(createReq)))

	md := new(metadata.MD)
	op, err := idpsdk.NewUserClient(r.providerConfig.SDKv2).Create(ctx, createReq, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("[DEBUG] Create user x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Create user x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		resp.Diagnostics.AddError(
			"Failed to Create resource",
			"Error while requesting API to create user:"+err.Error(),
		)
		return
	}
	createRes, err := op.Wait(ctx)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to Create Resource",
			fmt.Sprintf("An unexpected error occurred while waiting longrunning response. "+
				"Please retry the operation or report this issue to the provider developers.\n\n"+
				"Error: %s", err),
		)
		return
	}
	tflog.Debug(ctx, fmt.Sprintf("Create user response: %s", validate.ProtoDump(createRes)))

	plan.UserId = types.StringValue(createRes.Id)

	reqApi := &idp.GetUserRequest{}
	reqApi.SetUserId(plan.UserId.ValueString())
	tflog.Debug(ctx, fmt.Sprintf("Read user request: %s", validate.ProtoDump(reqApi)))

	md = new(metadata.MD)
	res, err := idpsdk.NewUserClient(r.providerConfig.SDKv2).Get(ctx, reqApi, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read user x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read user x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		if validate.IsStatusWithCode(err, codes.NotFound) {
			resp.Diagnostics.AddWarning(
				"Failed to Read resource",
				"user not found",
			)
		} else {
			resp.Diagnostics.AddError(
				"Failed to Read resource",
				"Error while requesting API to get user:"+err.Error(),
			)
		}
	}
	tflog.Debug(ctx, fmt.Sprintf("Read user response: %s", validate.ProtoDump(res)))

	if resp.Diagnostics.HasError() {
		return
	}

	// diagnostics don't have errors and resource is nil => resource not found
	if res == nil {
		resp.Diagnostics.AddError("Failed to read", "Resource not found")
		return
	}

	newState := flattenYandexOrganizationmanagerIdpUser(ctx, res, plan, plan.Timeouts, &resp.Diagnostics)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &newState)...)
	if resp.Diagnostics.HasError() {
		return
	}
}

func (r *yandexOrganizationmanagerIdpUserResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state yandexOrganizationmanagerIdpUserModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	deleteTimeout, timeoutInitError := state.Timeouts.Delete(ctx, provider_config.DefaultTimeout)
	if timeoutInitError != nil {
		resp.Diagnostics.Append(timeoutInitError...)
		return
	}

	ctx, cancel := context.WithTimeout(ctx, deleteTimeout)
	defer cancel()

	reqApi := &idp.DeleteUserRequest{}
	id := state.ID.ValueString()
	if !state.UserId.IsUnknown() && !state.UserId.IsNull() {
		id = state.UserId.ValueString()
	}
	reqApi.SetUserId(id)
	tflog.Debug(ctx, fmt.Sprintf("Delete user request: %s", validate.ProtoDump(reqApi)))

	md := new(metadata.MD)

	op, err := idpsdk.NewUserClient(r.providerConfig.SDKv2).Delete(ctx, reqApi, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Delete user x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Delete user x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		resp.Diagnostics.AddError(
			"Failed to Delete resource",
			"Error while requesting API to delete user:"+err.Error(),
		)
		return
	}
	deleteRes, err := op.Wait(ctx)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to Delete Resource",
			fmt.Sprintf("An unexpected error occurred while waiting longrunning response. "+
				"Please retry the operation or report this issue to the provider developers.\n\n"+
				"Error: %s", err),
		)
		return
	}
	tflog.Debug(ctx, fmt.Sprintf("[DEBUG] Delete user response: %s", validate.ProtoDump(deleteRes)))
}

func (r *yandexOrganizationmanagerIdpUserResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state yandexOrganizationmanagerIdpUserModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	diags = req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	updateTimeout, timeoutInitError := plan.Timeouts.Update(ctx, provider_config.DefaultTimeout)
	if timeoutInitError != nil {
		resp.Diagnostics.Append(timeoutInitError...)
		return
	}

	ctx, cancel := context.WithTimeout(ctx, updateTimeout)
	defer cancel()
	var updatePaths []string

	if !plan.Email.Equal(state.Email) {
		updatePaths = append(updatePaths, "email")
	}
	if !plan.FamilyName.Equal(state.FamilyName) {
		updatePaths = append(updatePaths, "family_name")
	}
	if !plan.FullName.Equal(state.FullName) {
		updatePaths = append(updatePaths, "full_name")
	}
	if !plan.GivenName.Equal(state.GivenName) {
		updatePaths = append(updatePaths, "given_name")
	}
	if !plan.PhoneNumber.Equal(state.PhoneNumber) {
		updatePaths = append(updatePaths, "phone_number")
	}
	if !plan.UserId.Equal(state.UserId) {
		updatePaths = append(updatePaths, "user_id")
	}
	if !plan.Username.Equal(state.Username) {
		updatePaths = append(updatePaths, "username")
	}
	if len(updatePaths) != 0 {

		updateReq := &idp.UpdateUserRequest{}
		id := plan.ID.ValueString()
		if !plan.UserId.IsUnknown() && !plan.UserId.IsNull() {
			id = plan.UserId.ValueString()
		}
		updateReq.SetUserId(id)
		updateReq.SetUsername(plan.Username.ValueString())
		updateReq.SetFullName(plan.FullName.ValueString())
		updateReq.SetGivenName(plan.GivenName.ValueString())
		updateReq.SetFamilyName(plan.FamilyName.ValueString())
		updateReq.SetEmail(plan.Email.ValueString())
		updateReq.SetPhoneNumber(plan.PhoneNumber.ValueString())
		updateReq.SetUpdateMask(&field_mask.FieldMask{Paths: updatePaths})

		resp.Diagnostics.Append(diags...)
		if resp.Diagnostics.HasError() {
			return
		}
		tflog.Debug(ctx, fmt.Sprintf("Update user request: %s", validate.ProtoDump(updateReq)))

		md := new(metadata.MD)
		op, err := idpsdk.NewUserClient(r.providerConfig.SDKv2).Update(ctx, updateReq, grpc.Header(md))
		if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
			tflog.Debug(ctx, fmt.Sprintf("Update user x-server-trace-id: %s", traceHeader[0]))
		}
		if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
			tflog.Debug(ctx, fmt.Sprintf("Update user x-server-request-id: %s", traceHeader[0]))
		}
		if err != nil {
			resp.Diagnostics.AddError(
				"Failed to Read resource",
				"Error while requesting API to update user:"+err.Error(),
			)
			return
		}
		updateRes, err := op.Wait(ctx)
		if err != nil {
			resp.Diagnostics.AddError(
				"Unable to Update Resource",
				fmt.Sprintf("An unexpected error occurred while waiting longrunning response. "+
					"Please retry the operation or report this issue to the provider developers.\n\n"+
					"Error: %s", err),
			)
			return
		}
		tflog.Debug(ctx, fmt.Sprintf("Update user response: %s", validate.ProtoDump(updateRes)))

		plan.UserId = types.StringValue(updateRes.Id)
	}
	reqApi := &idp.GetUserRequest{}
	reqApi.SetUserId(plan.UserId.ValueString())
	tflog.Debug(ctx, fmt.Sprintf("Read user request: %s", validate.ProtoDump(reqApi)))
	md := new(metadata.MD)
	res, err := idpsdk.NewUserClient(r.providerConfig.SDKv2).Get(ctx, reqApi, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read user x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read user x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		if validate.IsStatusWithCode(err, codes.NotFound) {
			resp.Diagnostics.AddWarning(
				"Failed to Read resource",
				"user not found",
			)
		} else {
			resp.Diagnostics.AddError(
				"Failed to Read resource",
				"Error while requesting API to get user:"+err.Error(),
			)
		}
	}
	tflog.Debug(ctx, fmt.Sprintf("Read user response: %s", validate.ProtoDump(res)))

	if resp.Diagnostics.HasError() {
		return
	}

	// diagnostics don't have errors and resource is nil => resource not found
	if res == nil {
		resp.Diagnostics.AddError("Failed to read", "Resource not found")
		return
	}

	to := state.Timeouts
	if !plan.Timeouts.Equal(state.Timeouts) {
		to = plan.Timeouts
	}

	newState := flattenYandexOrganizationmanagerIdpUser(ctx, res, plan, to, &resp.Diagnostics)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &newState)...)
	if resp.Diagnostics.HasError() {
		return
	}
}

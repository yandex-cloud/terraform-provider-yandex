// Code generated by tfgen. DO NOT EDIT.

package yandex_organizationmanager_idp_user

import (
	"context"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	idp "github.com/yandex-cloud/go-genproto/yandex/cloud/organizationmanager/v1/idp"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/converter"
)

type yandexOrganizationmanagerIdpUserModel struct {
	CreatedAt    types.String   `tfsdk:"created_at"`
	Email        types.String   `tfsdk:"email"`
	ExternalId   types.String   `tfsdk:"external_id"`
	FamilyName   types.String   `tfsdk:"family_name"`
	FullName     types.String   `tfsdk:"full_name"`
	GivenName    types.String   `tfsdk:"given_name"`
	IsActive     types.Bool     `tfsdk:"is_active"`
	PasswordHash types.Object   `tfsdk:"password_hash"`
	PasswordSpec types.Object   `tfsdk:"password_spec"`
	PhoneNumber  types.String   `tfsdk:"phone_number"`
	Status       types.String   `tfsdk:"status"`
	UpdatedAt    types.String   `tfsdk:"updated_at"`
	UserId       types.String   `tfsdk:"user_id"`
	ID           types.String   `tfsdk:"id"`
	Username     types.String   `tfsdk:"username"`
	UserpoolId   types.String   `tfsdk:"userpool_id"`
	Timeouts     timeouts.Value `tfsdk:"timeouts"`
}

func (m *yandexOrganizationmanagerIdpUserModel) GetCreatedAt() types.String {
	return m.CreatedAt
}
func (m *yandexOrganizationmanagerIdpUserModel) GetEmail() types.String {
	return m.Email
}
func (m *yandexOrganizationmanagerIdpUserModel) GetExternalId() types.String {
	return m.ExternalId
}
func (m *yandexOrganizationmanagerIdpUserModel) GetFamilyName() types.String {
	return m.FamilyName
}
func (m *yandexOrganizationmanagerIdpUserModel) GetFullName() types.String {
	return m.FullName
}
func (m *yandexOrganizationmanagerIdpUserModel) GetGivenName() types.String {
	return m.GivenName
}
func (m *yandexOrganizationmanagerIdpUserModel) GetIsActive() types.Bool {
	return m.IsActive
}
func (m *yandexOrganizationmanagerIdpUserModel) GetPasswordHash() types.Object {
	return m.PasswordHash
}
func (m *yandexOrganizationmanagerIdpUserModel) GetPasswordSpec() types.Object {
	return m.PasswordSpec
}
func (m *yandexOrganizationmanagerIdpUserModel) GetPhoneNumber() types.String {
	return m.PhoneNumber
}
func (m *yandexOrganizationmanagerIdpUserModel) GetStatus() types.String {
	return m.Status
}
func (m *yandexOrganizationmanagerIdpUserModel) GetUpdatedAt() types.String {
	return m.UpdatedAt
}
func (m *yandexOrganizationmanagerIdpUserModel) GetUserId() types.String {
	return m.UserId
}
func (m *yandexOrganizationmanagerIdpUserModel) GetID() types.String {
	return m.ID
}
func (m *yandexOrganizationmanagerIdpUserModel) GetUsername() types.String {
	return m.Username
}
func (m *yandexOrganizationmanagerIdpUserModel) GetUserpoolId() types.String {
	return m.UserpoolId
}

func NewYandexOrganizationmanagerIdpUserModel() yandexOrganizationmanagerIdpUserModel {
	return yandexOrganizationmanagerIdpUserModel{
		CreatedAt:    types.StringNull(),
		Email:        types.StringNull(),
		ExternalId:   types.StringNull(),
		FamilyName:   types.StringNull(),
		FullName:     types.StringNull(),
		GivenName:    types.StringNull(),
		IsActive:     types.BoolNull(),
		PasswordHash: types.ObjectNull(yandexOrganizationmanagerIdpUserPasswordHashModelType.AttrTypes),
		PasswordSpec: types.ObjectNull(yandexOrganizationmanagerIdpUserPasswordSpecModelType.AttrTypes),
		PhoneNumber:  types.StringNull(),
		Status:       types.StringNull(),
		UpdatedAt:    types.StringNull(),
		UserId:       types.StringNull(),
		ID:           types.StringNull(),
		Username:     types.StringNull(),
		UserpoolId:   types.StringNull(),
	}
}

func yandexOrganizationmanagerIdpUserModelFillUnknown(target yandexOrganizationmanagerIdpUserModel) yandexOrganizationmanagerIdpUserModel {
	if target.CreatedAt.IsUnknown() || target.CreatedAt.IsNull() {
		target.CreatedAt = types.StringNull()
	}
	if target.Email.IsUnknown() || target.Email.IsNull() {
		target.Email = types.StringNull()
	}
	if target.ExternalId.IsUnknown() || target.ExternalId.IsNull() {
		target.ExternalId = types.StringNull()
	}
	if target.FamilyName.IsUnknown() || target.FamilyName.IsNull() {
		target.FamilyName = types.StringNull()
	}
	if target.FullName.IsUnknown() || target.FullName.IsNull() {
		target.FullName = types.StringNull()
	}
	if target.GivenName.IsUnknown() || target.GivenName.IsNull() {
		target.GivenName = types.StringNull()
	}
	if target.IsActive.IsUnknown() || target.IsActive.IsNull() {
		target.IsActive = types.BoolNull()
	}
	if target.PasswordHash.IsUnknown() || target.PasswordHash.IsNull() {
		target.PasswordHash = types.ObjectNull(yandexOrganizationmanagerIdpUserPasswordHashModelType.AttrTypes)
	}
	if target.PasswordSpec.IsUnknown() || target.PasswordSpec.IsNull() {
		target.PasswordSpec = types.ObjectNull(yandexOrganizationmanagerIdpUserPasswordSpecModelType.AttrTypes)
	}
	if target.PhoneNumber.IsUnknown() || target.PhoneNumber.IsNull() {
		target.PhoneNumber = types.StringNull()
	}
	if target.Status.IsUnknown() || target.Status.IsNull() {
		target.Status = types.StringNull()
	}
	if target.UpdatedAt.IsUnknown() || target.UpdatedAt.IsNull() {
		target.UpdatedAt = types.StringNull()
	}
	if target.UserId.IsUnknown() || target.UserId.IsNull() {
		target.UserId = types.StringNull()
	}
	if target.ID.IsUnknown() || target.ID.IsNull() {
		target.ID = types.StringNull()
	}
	if target.Username.IsUnknown() || target.Username.IsNull() {
		target.Username = types.StringNull()
	}
	if target.UserpoolId.IsUnknown() || target.UserpoolId.IsNull() {
		target.UserpoolId = types.StringNull()
	}
	return target
}

var yandexOrganizationmanagerIdpUserModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"created_at":    types.StringType,
		"email":         types.StringType,
		"external_id":   types.StringType,
		"family_name":   types.StringType,
		"full_name":     types.StringType,
		"given_name":    types.StringType,
		"is_active":     types.BoolType,
		"password_hash": yandexOrganizationmanagerIdpUserPasswordHashModelType,
		"password_spec": yandexOrganizationmanagerIdpUserPasswordSpecModelType,
		"phone_number":  types.StringType,
		"status":        types.StringType,
		"updated_at":    types.StringType,
		"user_id":       types.StringType,
		"id":            types.StringType,
		"username":      types.StringType,
		"userpool_id":   types.StringType,
		"timeouts":      timeouts.AttributesAll(context.Background()).GetType(),
	},
}

func flattenYandexOrganizationmanagerIdpUser(ctx context.Context,
	yandexOrganizationmanagerIdpUser *idp.User,
	state yandexOrganizationmanagerIdpUserModel,
	to timeouts.Value,
	diags *diag.Diagnostics) types.Object {
	if yandexOrganizationmanagerIdpUser == nil {
		return types.ObjectNull(yandexOrganizationmanagerIdpUserModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexOrganizationmanagerIdpUserModelType.AttrTypes, yandexOrganizationmanagerIdpUserModel{
		CreatedAt:    types.StringValue(yandexOrganizationmanagerIdpUser.GetCreatedAt().AsTime().Format(time.RFC3339)),
		Email:        types.StringValue(yandexOrganizationmanagerIdpUser.GetEmail()),
		ExternalId:   types.StringValue(yandexOrganizationmanagerIdpUser.GetExternalId()),
		FamilyName:   types.StringValue(yandexOrganizationmanagerIdpUser.GetFamilyName()),
		FullName:     types.StringValue(yandexOrganizationmanagerIdpUser.GetFullName()),
		GivenName:    types.StringValue(yandexOrganizationmanagerIdpUser.GetGivenName()),
		IsActive:     state.IsActive,
		PasswordHash: state.PasswordHash,
		PasswordSpec: state.PasswordSpec,
		PhoneNumber:  types.StringValue(yandexOrganizationmanagerIdpUser.GetPhoneNumber()),
		Status:       types.StringValue(yandexOrganizationmanagerIdpUser.GetStatus().String()),
		UpdatedAt:    types.StringValue(yandexOrganizationmanagerIdpUser.GetUpdatedAt().AsTime().Format(time.RFC3339)),
		UserId:       types.StringValue(yandexOrganizationmanagerIdpUser.GetId()),
		ID:           types.StringValue(yandexOrganizationmanagerIdpUser.GetId()),
		Username:     types.StringValue(yandexOrganizationmanagerIdpUser.GetUsername()),
		UserpoolId:   types.StringValue(yandexOrganizationmanagerIdpUser.GetUserpoolId()),
		Timeouts:     to,
	})
	diags.Append(diag...)
	return value
}

func expandYandexOrganizationmanagerIdpUser(ctx context.Context, yandexOrganizationmanagerIdpUserState types.Object, diags *diag.Diagnostics) *idp.User {
	if yandexOrganizationmanagerIdpUserState.IsNull() || yandexOrganizationmanagerIdpUserState.IsUnknown() {
		return nil
	}
	var yandexOrganizationmanagerIdpUser yandexOrganizationmanagerIdpUserModel
	diags.Append(yandexOrganizationmanagerIdpUserState.As(ctx, &yandexOrganizationmanagerIdpUser, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexOrganizationmanagerIdpUserModel(ctx, yandexOrganizationmanagerIdpUser, diags)
}

func expandYandexOrganizationmanagerIdpUserModel(ctx context.Context, yandexOrganizationmanagerIdpUserState yandexOrganizationmanagerIdpUserModel, diags *diag.Diagnostics) *idp.User {
	value := &idp.User{}
	value.SetCreatedAt(converter.ParseTimestamp(yandexOrganizationmanagerIdpUserState.CreatedAt.ValueString(), diags))
	value.SetEmail(yandexOrganizationmanagerIdpUserState.Email.ValueString())
	value.SetExternalId(yandexOrganizationmanagerIdpUserState.ExternalId.ValueString())
	value.SetFamilyName(yandexOrganizationmanagerIdpUserState.FamilyName.ValueString())
	value.SetFullName(yandexOrganizationmanagerIdpUserState.FullName.ValueString())
	value.SetGivenName(yandexOrganizationmanagerIdpUserState.GivenName.ValueString())
	value.SetPhoneNumber(yandexOrganizationmanagerIdpUserState.PhoneNumber.ValueString())
	value.SetStatus(idp.User_Status(idp.User_Status_value[yandexOrganizationmanagerIdpUserState.Status.ValueString()]))
	value.SetUpdatedAt(converter.ParseTimestamp(yandexOrganizationmanagerIdpUserState.UpdatedAt.ValueString(), diags))
	value.SetId(yandexOrganizationmanagerIdpUserState.UserId.ValueString())
	value.SetId(yandexOrganizationmanagerIdpUserState.UserId.ValueString())
	value.SetUsername(yandexOrganizationmanagerIdpUserState.Username.ValueString())
	value.SetUserpoolId(yandexOrganizationmanagerIdpUserState.UserpoolId.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexOrganizationmanagerIdpUserPasswordHashModel struct {
	PasswordHash     types.String `tfsdk:"password_hash"`
	PasswordHashType types.String `tfsdk:"password_hash_type"`
}

func (m *yandexOrganizationmanagerIdpUserPasswordHashModel) GetPasswordHash() types.String {
	return m.PasswordHash
}
func (m *yandexOrganizationmanagerIdpUserPasswordHashModel) GetPasswordHashType() types.String {
	return m.PasswordHashType
}

func NewYandexOrganizationmanagerIdpUserPasswordHashModel() yandexOrganizationmanagerIdpUserPasswordHashModel {
	return yandexOrganizationmanagerIdpUserPasswordHashModel{
		PasswordHash:     types.StringNull(),
		PasswordHashType: types.StringNull(),
	}
}

func yandexOrganizationmanagerIdpUserPasswordHashModelFillUnknown(target yandexOrganizationmanagerIdpUserPasswordHashModel) yandexOrganizationmanagerIdpUserPasswordHashModel {
	if target.PasswordHash.IsUnknown() || target.PasswordHash.IsNull() {
		target.PasswordHash = types.StringNull()
	}
	if target.PasswordHashType.IsUnknown() || target.PasswordHashType.IsNull() {
		target.PasswordHashType = types.StringNull()
	}
	return target
}

var yandexOrganizationmanagerIdpUserPasswordHashModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"password_hash":      types.StringType,
		"password_hash_type": types.StringType,
	},
}

func flattenYandexOrganizationmanagerIdpUserPasswordHash(ctx context.Context,
	yandexOrganizationmanagerIdpUserPasswordHash *idp.PasswordHash,
	state yandexOrganizationmanagerIdpUserPasswordHashModel,
	diags *diag.Diagnostics) types.Object {
	if yandexOrganizationmanagerIdpUserPasswordHash == nil {
		return types.ObjectNull(yandexOrganizationmanagerIdpUserPasswordHashModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexOrganizationmanagerIdpUserPasswordHashModelType.AttrTypes, yandexOrganizationmanagerIdpUserPasswordHashModel{
		PasswordHash:     state.PasswordHash,
		PasswordHashType: state.PasswordHashType,
	})
	diags.Append(diag...)
	return value
}

func expandYandexOrganizationmanagerIdpUserPasswordHash(ctx context.Context, yandexOrganizationmanagerIdpUserPasswordHashState types.Object, diags *diag.Diagnostics) *idp.PasswordHash {
	if yandexOrganizationmanagerIdpUserPasswordHashState.IsNull() || yandexOrganizationmanagerIdpUserPasswordHashState.IsUnknown() {
		return nil
	}
	var yandexOrganizationmanagerIdpUserPasswordHash yandexOrganizationmanagerIdpUserPasswordHashModel
	diags.Append(yandexOrganizationmanagerIdpUserPasswordHashState.As(ctx, &yandexOrganizationmanagerIdpUserPasswordHash, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexOrganizationmanagerIdpUserPasswordHashModel(ctx, yandexOrganizationmanagerIdpUserPasswordHash, diags)
}

func expandYandexOrganizationmanagerIdpUserPasswordHashModel(ctx context.Context, yandexOrganizationmanagerIdpUserPasswordHashState yandexOrganizationmanagerIdpUserPasswordHashModel, diags *diag.Diagnostics) *idp.PasswordHash {
	value := &idp.PasswordHash{}
	value.SetPasswordHash(yandexOrganizationmanagerIdpUserPasswordHashState.PasswordHash.ValueString())
	value.SetPasswordHashType(idp.PasswordHash_PasswordHashType(idp.PasswordHash_PasswordHashType_value[yandexOrganizationmanagerIdpUserPasswordHashState.PasswordHashType.ValueString()]))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexOrganizationmanagerIdpUserPasswordSpecModel struct {
	GenerationProof types.String `tfsdk:"generation_proof"`
	Password        types.String `tfsdk:"password"`
}

func (m *yandexOrganizationmanagerIdpUserPasswordSpecModel) GetGenerationProof() types.String {
	return m.GenerationProof
}
func (m *yandexOrganizationmanagerIdpUserPasswordSpecModel) GetPassword() types.String {
	return m.Password
}

func NewYandexOrganizationmanagerIdpUserPasswordSpecModel() yandexOrganizationmanagerIdpUserPasswordSpecModel {
	return yandexOrganizationmanagerIdpUserPasswordSpecModel{
		GenerationProof: types.StringNull(),
		Password:        types.StringNull(),
	}
}

func yandexOrganizationmanagerIdpUserPasswordSpecModelFillUnknown(target yandexOrganizationmanagerIdpUserPasswordSpecModel) yandexOrganizationmanagerIdpUserPasswordSpecModel {
	if target.GenerationProof.IsUnknown() || target.GenerationProof.IsNull() {
		target.GenerationProof = types.StringNull()
	}
	if target.Password.IsUnknown() || target.Password.IsNull() {
		target.Password = types.StringNull()
	}
	return target
}

var yandexOrganizationmanagerIdpUserPasswordSpecModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"generation_proof": types.StringType,
		"password":         types.StringType,
	},
}

func flattenYandexOrganizationmanagerIdpUserPasswordSpec(ctx context.Context,
	yandexOrganizationmanagerIdpUserPasswordSpec *idp.PasswordSpec,
	state yandexOrganizationmanagerIdpUserPasswordSpecModel,
	diags *diag.Diagnostics) types.Object {
	if yandexOrganizationmanagerIdpUserPasswordSpec == nil {
		return types.ObjectNull(yandexOrganizationmanagerIdpUserPasswordSpecModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexOrganizationmanagerIdpUserPasswordSpecModelType.AttrTypes, yandexOrganizationmanagerIdpUserPasswordSpecModel{
		GenerationProof: state.GenerationProof,
		Password:        state.Password,
	})
	diags.Append(diag...)
	return value
}

func expandYandexOrganizationmanagerIdpUserPasswordSpec(ctx context.Context, yandexOrganizationmanagerIdpUserPasswordSpecState types.Object, diags *diag.Diagnostics) *idp.PasswordSpec {
	if yandexOrganizationmanagerIdpUserPasswordSpecState.IsNull() || yandexOrganizationmanagerIdpUserPasswordSpecState.IsUnknown() {
		return nil
	}
	var yandexOrganizationmanagerIdpUserPasswordSpec yandexOrganizationmanagerIdpUserPasswordSpecModel
	diags.Append(yandexOrganizationmanagerIdpUserPasswordSpecState.As(ctx, &yandexOrganizationmanagerIdpUserPasswordSpec, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexOrganizationmanagerIdpUserPasswordSpecModel(ctx, yandexOrganizationmanagerIdpUserPasswordSpec, diags)
}

func expandYandexOrganizationmanagerIdpUserPasswordSpecModel(ctx context.Context, yandexOrganizationmanagerIdpUserPasswordSpecState yandexOrganizationmanagerIdpUserPasswordSpecModel, diags *diag.Diagnostics) *idp.PasswordSpec {
	value := &idp.PasswordSpec{}
	value.SetGenerationProof(yandexOrganizationmanagerIdpUserPasswordSpecState.GenerationProof.ValueString())
	value.SetPassword(yandexOrganizationmanagerIdpUserPasswordSpecState.Password.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

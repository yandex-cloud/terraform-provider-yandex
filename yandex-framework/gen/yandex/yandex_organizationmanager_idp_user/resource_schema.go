// Code generated by tfgen. DO NOT EDIT.

package yandex_organizationmanager_idp_user

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	idp "github.com/yandex-cloud/go-genproto/yandex/cloud/organizationmanager/v1/idp"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/converter"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/planmodifiers"
)

func YandexOrganizationmanagerIdpUserResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Description:         "Request to delete a user.",
		MarkdownDescription: "Request to delete a user.",
		Version:             1,
		Attributes: map[string]schema.Attribute{

			"created_at": schema.StringAttribute{
				MarkdownDescription: "Timestamp when the user was created.",
				Description: "Timestamp when the user was created." +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.idp.User.created_at
					"package: yandex.cloud.organizationmanager.v1.idp\n" +
					"filename: yandex/cloud/organizationmanager/v1/idp/user.proto\n",
				Computed: true,
			},

			"email": schema.StringAttribute{
				MarkdownDescription: "User's email address.",
				Description: "User's email address." +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.idp.CreateUserRequest.email
					// -> yandex.cloud.organizationmanager.v1.idp.UpdateUserRequest.email
					// -> yandex.cloud.organizationmanager.v1.idp.User.email
					"package: yandex.cloud.organizationmanager.v1.idp\n" +
					"filename: yandex/cloud/organizationmanager/v1/idp/user.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^(|(.{3,254}))$"), "error validating regexp"),
					stringvalidator.LengthBetween(0, 254),
				},
			},

			"external_id": schema.StringAttribute{
				MarkdownDescription: "External identifier for federation with external identity systems.\n This ID can be used to link this user with an account in an external system.",
				Description: "External identifier for federation with external identity systems.\n This ID can be used to link this user with an account in an external system." +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.idp.CreateUserRequest.external_id
					// -> yandex.cloud.organizationmanager.v1.idp.User.external_id
					"package: yandex.cloud.organizationmanager.v1.idp\n" +
					"filename: yandex/cloud/organizationmanager/v1/idp/user.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 256),
				},
			},

			"family_name": schema.StringAttribute{
				MarkdownDescription: "User's last name.\n Part of the user's profile information.",
				Description: "User's last name.\n Part of the user's profile information." +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.idp.CreateUserRequest.family_name
					// -> yandex.cloud.organizationmanager.v1.idp.UpdateUserRequest.family_name
					// -> yandex.cloud.organizationmanager.v1.idp.User.family_name
					"package: yandex.cloud.organizationmanager.v1.idp\n" +
					"filename: yandex/cloud/organizationmanager/v1/idp/user.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 256),
				},
			},

			"full_name": schema.StringAttribute{
				MarkdownDescription: "User's full name (display name).\n This is typically shown in the UI and used for identification purposes.",
				Description: "User's full name (display name).\n This is typically shown in the UI and used for identification purposes." +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.idp.CreateUserRequest.full_name
					// -> yandex.cloud.organizationmanager.v1.idp.UpdateUserRequest.full_name
					// -> yandex.cloud.organizationmanager.v1.idp.User.full_name
					"package: yandex.cloud.organizationmanager.v1.idp\n" +
					"filename: yandex/cloud/organizationmanager/v1/idp/user.proto\n",
				Required: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 256),
				},
			},

			"given_name": schema.StringAttribute{
				MarkdownDescription: "User's first name.\n Part of the user's profile information.",
				Description: "User's first name.\n Part of the user's profile information." +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.idp.CreateUserRequest.given_name
					// -> yandex.cloud.organizationmanager.v1.idp.UpdateUserRequest.given_name
					// -> yandex.cloud.organizationmanager.v1.idp.User.given_name
					"package: yandex.cloud.organizationmanager.v1.idp\n" +
					"filename: yandex/cloud/organizationmanager/v1/idp/user.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 256),
				},
			},

			"is_active": schema.BoolAttribute{
				MarkdownDescription: "Whether the user is active. Default is true.",
				Description: "Whether the user is active. Default is true." +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.idp.CreateUserRequest.is_active
					"package: yandex.cloud.organizationmanager.v1.idp\n" +
					"filename: yandex/cloud/organizationmanager/v1/idp/user_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.UseStateForUnknown(),
					planmodifiers.NilRelaxedBool(),
					planmodifiers.NullWriteOnlyBool(),
				},
			},

			"password_hash": schema.SingleNestedAttribute{

				Attributes: map[string]schema.Attribute{

					"password_hash": schema.StringAttribute{
						MarkdownDescription: "The password hash string.",
						Description: "The password hash string." +
							// proto paths: +
							// -> yandex.cloud.organizationmanager.v1.idp.CreateUserRequest.password_hashyandex.cloud.organizationmanager.v1.idp.PasswordHash.password_hash
							"package: yandex.cloud.organizationmanager.v1.idp\n" +
							"filename: yandex/cloud/organizationmanager/v1/idp/user_service.proto\n",
						Required:  true,
						Sensitive: true,

						PlanModifiers: []planmodifier.String{
							stringplanmodifier.UseStateForUnknown(),
							planmodifiers.NullWriteOnlyString(),
						},
						Validators: []validator.String{
							stringvalidator.LengthBetween(0, 128),
						},
					},

					"password_hash_type": schema.StringAttribute{
						MarkdownDescription: "Type of the password hash.",
						Description: "Type of the password hash." +
							// proto paths: +
							// -> yandex.cloud.organizationmanager.v1.idp.CreateUserRequest.password_hashyandex.cloud.organizationmanager.v1.idp.PasswordHash.password_hash_type
							"package: yandex.cloud.organizationmanager.v1.idp\n" +
							"filename: yandex/cloud/organizationmanager/v1/idp/user_service.proto\n",
						Required: true,

						PlanModifiers: []planmodifier.String{
							stringplanmodifier.UseStateForUnknown(),
							planmodifiers.NullWriteOnlyString(),
						},
						Validators: []validator.String{
							stringvalidator.OneOf(converter.MapKeys(idp.PasswordHash_PasswordHashType_value)...),
						},
					},
				},
				MarkdownDescription: "Password hash.",
				Description: "Password hash." +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.idp.CreateUserRequest.password_hash
					"package: yandex.cloud.organizationmanager.v1.idp\n" +
					"filename: yandex/cloud/organizationmanager/v1/idp/user_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.UseStateForUnknown(),
					planmodifiers.NilRelaxedObject(),
					planmodifiers.NullWriteOnlyObject(),
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(
						path.MatchRelative().AtParent().AtName("password_spec"),
					),
				},
			},

			"password_spec": schema.SingleNestedAttribute{

				Attributes: map[string]schema.Attribute{

					"generation_proof": schema.StringAttribute{
						MarkdownDescription: "Proof that the password was generated by the system.",
						Description: "Proof that the password was generated by the system." +
							// proto paths: +
							// -> yandex.cloud.organizationmanager.v1.idp.CreateUserRequest.password_specyandex.cloud.organizationmanager.v1.idp.PasswordSpec.generation_proof
							"package: yandex.cloud.organizationmanager.v1.idp\n" +
							"filename: yandex/cloud/organizationmanager/v1/idp/user_service.proto\n",
						Optional:  true,
						Computed:  true,
						Sensitive: true,

						PlanModifiers: []planmodifier.String{
							stringplanmodifier.UseStateForUnknown(),
							planmodifiers.NilRelaxedString(),
							planmodifiers.NullWriteOnlyString(),
						},
						Validators: []validator.String{
							stringvalidator.LengthBetween(0, 128),
						},
					},

					"password": schema.StringAttribute{
						MarkdownDescription: "The password string.",
						Description: "The password string." +
							// proto paths: +
							// -> yandex.cloud.organizationmanager.v1.idp.CreateUserRequest.password_specyandex.cloud.organizationmanager.v1.idp.PasswordSpec.password
							"package: yandex.cloud.organizationmanager.v1.idp\n" +
							"filename: yandex/cloud/organizationmanager/v1/idp/user_service.proto\n",
						Required:  true,
						Sensitive: true,

						PlanModifiers: []planmodifier.String{
							stringplanmodifier.UseStateForUnknown(),
							planmodifiers.NullWriteOnlyString(),
						},
						Validators: []validator.String{
							stringvalidator.LengthBetween(0, 128),
						},
					},
				},
				MarkdownDescription: "Password specification.",
				Description: "Password specification." +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.idp.CreateUserRequest.password_spec
					"package: yandex.cloud.organizationmanager.v1.idp\n" +
					"filename: yandex/cloud/organizationmanager/v1/idp/user_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.UseStateForUnknown(),
					planmodifiers.NilRelaxedObject(),
					planmodifiers.NullWriteOnlyObject(),
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(
						path.MatchRelative().AtParent().AtName("password_hash"),
					),
				},
			},

			"phone_number": schema.StringAttribute{
				MarkdownDescription: "User's phone number.",
				Description: "User's phone number." +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.idp.CreateUserRequest.phone_number
					// -> yandex.cloud.organizationmanager.v1.idp.UpdateUserRequest.phone_number
					// -> yandex.cloud.organizationmanager.v1.idp.User.phone_number
					"package: yandex.cloud.organizationmanager.v1.idp\n" +
					"filename: yandex/cloud/organizationmanager/v1/idp/user.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"status": schema.StringAttribute{
				MarkdownDescription: "Current status of the user.\n Determines whether the user can authenticate and access the system.",
				Description: "Current status of the user.\n Determines whether the user can authenticate and access the system." +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.idp.User.status
					"package: yandex.cloud.organizationmanager.v1.idp\n" +
					"filename: yandex/cloud/organizationmanager/v1/idp/user.proto\n",
				Computed: true,
			},

			"updated_at": schema.StringAttribute{
				MarkdownDescription: "Timestamp when the user was last updated.",
				Description: "Timestamp when the user was last updated." +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.idp.User.updated_at
					"package: yandex.cloud.organizationmanager.v1.idp\n" +
					"filename: yandex/cloud/organizationmanager/v1/idp/user.proto\n",
				Computed: true,
			},

			"user_id": schema.StringAttribute{
				MarkdownDescription: "ID of the user to return.",
				Description: "ID of the user to return." +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.idp.DeleteUserRequest.user_id
					// -> yandex.cloud.organizationmanager.v1.idp.GetUserRequest.user_id
					// -> yandex.cloud.organizationmanager.v1.idp.UpdateUserRequest.user_id
					// -> yandex.cloud.organizationmanager.v1.idp.User.id
					"package: yandex.cloud.organizationmanager.v1.idp\n" +
					"filename: yandex/cloud/organizationmanager/v1/idp/user_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"id": schema.StringAttribute{
				MarkdownDescription: "ID of the user to return.",
				Description: "ID of the user to return." +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.idp.DeleteUserRequest.user_id
					// -> yandex.cloud.organizationmanager.v1.idp.GetUserRequest.user_id
					// -> yandex.cloud.organizationmanager.v1.idp.UpdateUserRequest.user_id
					// -> yandex.cloud.organizationmanager.v1.idp.User.id
					"package: yandex.cloud.organizationmanager.v1.idp\n" +
					"filename: yandex/cloud/organizationmanager/v1/idp/user_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"username": schema.StringAttribute{
				MarkdownDescription: "Username used for authentication.\n Usually in the format of an email address.",
				Description: "Username used for authentication.\n Usually in the format of an email address." +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.idp.CreateUserRequest.username
					// -> yandex.cloud.organizationmanager.v1.idp.UpdateUserRequest.username
					// -> yandex.cloud.organizationmanager.v1.idp.User.username
					"package: yandex.cloud.organizationmanager.v1.idp\n" +
					"filename: yandex/cloud/organizationmanager/v1/idp/user.proto\n",
				Required: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^(|[a-z0-9A-Z\\._-]{1,64}@.{1,256})$"), "error validating regexp"),
					stringvalidator.LengthBetween(0, 254),
				},
			},

			"userpool_id": schema.StringAttribute{
				MarkdownDescription: "ID of the userpool this user belongs to.\n To get the userpool ID, make a [UserpoolService.List] request.",
				Description: "ID of the userpool this user belongs to.\n To get the userpool ID, make a [UserpoolService.List] request." +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.idp.CreateUserRequest.userpool_id
					// -> yandex.cloud.organizationmanager.v1.idp.User.userpool_id
					"package: yandex.cloud.organizationmanager.v1.idp\n" +
					"filename: yandex/cloud/organizationmanager/v1/idp/user.proto\n",
				Required: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},
			"timeouts": timeouts.AttributesAll(ctx),
		},

		Blocks: map[string]schema.Block{},
	}
}

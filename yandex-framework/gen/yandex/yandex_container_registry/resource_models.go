// Code generated by tfgen. DO NOT EDIT.

package yandex_container_registry

import (
	"context"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	containerregistry "github.com/yandex-cloud/go-genproto/yandex/cloud/containerregistry/v1"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/converter"
)

type yandexContainerRegistryModel struct {
	CreatedAt  types.String   `tfsdk:"created_at"`
	FolderId   types.String   `tfsdk:"folder_id"`
	Labels     types.Map      `tfsdk:"labels"`
	Name       types.String   `tfsdk:"name"`
	RegistryId types.String   `tfsdk:"registry_id"`
	ID         types.String   `tfsdk:"id"`
	Status     types.String   `tfsdk:"status"`
	Timeouts   timeouts.Value `tfsdk:"timeouts"`
}

func (m *yandexContainerRegistryModel) GetCreatedAt() types.String {
	return m.CreatedAt
}
func (m *yandexContainerRegistryModel) GetFolderId() types.String {
	return m.FolderId
}
func (m *yandexContainerRegistryModel) GetLabels() types.Map {
	return m.Labels
}
func (m *yandexContainerRegistryModel) GetName() types.String {
	return m.Name
}
func (m *yandexContainerRegistryModel) GetRegistryId() types.String {
	return m.RegistryId
}
func (m *yandexContainerRegistryModel) GetID() types.String {
	return m.ID
}
func (m *yandexContainerRegistryModel) GetStatus() types.String {
	return m.Status
}

func NewYandexContainerRegistryModel() yandexContainerRegistryModel {
	return yandexContainerRegistryModel{
		CreatedAt:  types.StringNull(),
		FolderId:   types.StringNull(),
		Labels:     types.MapNull(types.StringType),
		Name:       types.StringNull(),
		RegistryId: types.StringNull(),
		ID:         types.StringNull(),
		Status:     types.StringNull(),
	}
}

func yandexContainerRegistryModelFillUnknown(target yandexContainerRegistryModel) yandexContainerRegistryModel {
	if target.CreatedAt.IsUnknown() || target.CreatedAt.IsNull() {
		target.CreatedAt = types.StringNull()
	}
	if target.FolderId.IsUnknown() || target.FolderId.IsNull() {
		target.FolderId = types.StringNull()
	}
	if target.Labels.IsUnknown() || target.Labels.IsNull() {
		target.Labels = types.MapNull(types.StringType)
	}
	if target.Name.IsUnknown() || target.Name.IsNull() {
		target.Name = types.StringNull()
	}
	if target.RegistryId.IsUnknown() || target.RegistryId.IsNull() {
		target.RegistryId = types.StringNull()
	}
	if target.ID.IsUnknown() || target.ID.IsNull() {
		target.ID = types.StringNull()
	}
	if target.Status.IsUnknown() || target.Status.IsNull() {
		target.Status = types.StringNull()
	}
	return target
}

var yandexContainerRegistryModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"created_at":  types.StringType,
		"folder_id":   types.StringType,
		"labels":      types.MapType{ElemType: types.StringType},
		"name":        types.StringType,
		"registry_id": types.StringType,
		"id":          types.StringType,
		"status":      types.StringType,
		"timeouts":    timeouts.BlockAll(context.Background()).Type(),
	},
}

func flattenYandexContainerRegistry(ctx context.Context,
	yandexContainerRegistry *containerregistry.Registry,
	state yandexContainerRegistryModel,
	to timeouts.Value,
	diags *diag.Diagnostics) types.Object {
	if yandexContainerRegistry == nil {
		return types.ObjectNull(yandexContainerRegistryModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexContainerRegistryModelType.AttrTypes, yandexContainerRegistryModel{
		CreatedAt:  types.StringValue(yandexContainerRegistry.GetCreatedAt().AsTime().Format(time.RFC3339)),
		FolderId:   types.StringValue(yandexContainerRegistry.GetFolderId()),
		Labels:     flattenYandexContainerRegistryLabels(ctx, yandexContainerRegistry.GetLabels(), state.Labels, diags),
		Name:       types.StringValue(yandexContainerRegistry.GetName()),
		RegistryId: types.StringValue(yandexContainerRegistry.GetId()),
		ID:         types.StringValue(yandexContainerRegistry.GetId()),
		Status:     types.StringValue(yandexContainerRegistry.GetStatus().String()),
		Timeouts:   to,
	})
	diags.Append(diag...)
	return value
}

func expandYandexContainerRegistry(ctx context.Context, yandexContainerRegistryState types.Object, diags *diag.Diagnostics) *containerregistry.Registry {
	if yandexContainerRegistryState.IsNull() || yandexContainerRegistryState.IsUnknown() {
		return nil
	}
	var yandexContainerRegistry yandexContainerRegistryModel
	diags.Append(yandexContainerRegistryState.As(ctx, &yandexContainerRegistry, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexContainerRegistryModel(ctx, yandexContainerRegistry, diags)
}

func expandYandexContainerRegistryModel(ctx context.Context, yandexContainerRegistryState yandexContainerRegistryModel, diags *diag.Diagnostics) *containerregistry.Registry {
	value := &containerregistry.Registry{}
	value.SetCreatedAt(converter.ParseTimestamp(yandexContainerRegistryState.CreatedAt.ValueString(), diags))
	value.SetFolderId(yandexContainerRegistryState.FolderId.ValueString())
	value.SetLabels(expandYandexContainerRegistryLabels(ctx, yandexContainerRegistryState.Labels, diags))
	value.SetName(yandexContainerRegistryState.Name.ValueString())
	value.SetId(yandexContainerRegistryState.RegistryId.ValueString())
	value.SetId(yandexContainerRegistryState.RegistryId.ValueString())
	value.SetStatus(containerregistry.Registry_Status(containerregistry.Registry_Status_value[yandexContainerRegistryState.Status.ValueString()]))
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexContainerRegistryLabels(ctx context.Context, yandexContainerRegistryLabels map[string]string, listState types.Map, diags *diag.Diagnostics) types.Map {
	if yandexContainerRegistryLabels == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.MapNull(types.StringType)
	}
	yandexContainerRegistryLabelsValues := make(map[string]attr.Value)
	for k, elem := range yandexContainerRegistryLabels {
		val := types.StringValue(elem)
		yandexContainerRegistryLabelsValues[k] = val
	}

	value, diag := types.MapValue(types.StringType, yandexContainerRegistryLabelsValues)
	diags.Append(diag...)
	return value
}

func expandYandexContainerRegistryLabels(ctx context.Context, yandexContainerRegistryLabelsState types.Map, diags *diag.Diagnostics) map[string]string {
	if yandexContainerRegistryLabelsState.IsNull() || yandexContainerRegistryLabelsState.IsUnknown() {
		return nil
	}
	if len(yandexContainerRegistryLabelsState.Elements()) == 0 {
		return map[string]string{}
	}
	yandexContainerRegistryLabelsRes := make(map[string]string)
	yandexContainerRegistryLabelsType := make(map[string]types.String)
	diags.Append(yandexContainerRegistryLabelsState.ElementsAs(ctx, &yandexContainerRegistryLabelsType, false)...)
	if diags.HasError() {
		return nil
	}
	for k, elem := range yandexContainerRegistryLabelsType {
		yandexContainerRegistryLabelsRes[k] = elem.ValueString()
	}
	return yandexContainerRegistryLabelsRes
}

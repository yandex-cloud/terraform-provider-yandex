// Code generated by tfgen. DO NOT EDIT.

package yandex_resourcemanager_folder

import (
	"context"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	resourcemanager "github.com/yandex-cloud/go-genproto/yandex/cloud/resourcemanager/v1"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/converter"
)

type yandexResourcemanagerFolderModel struct {
	CloudId     types.String   `tfsdk:"cloud_id"`
	CreatedAt   types.String   `tfsdk:"created_at"`
	Description types.String   `tfsdk:"description"`
	FolderId    types.String   `tfsdk:"folder_id"`
	ID          types.String   `tfsdk:"id"`
	Labels      types.Map      `tfsdk:"labels"`
	Name        types.String   `tfsdk:"name"`
	Status      types.String   `tfsdk:"status"`
	Timeouts    timeouts.Value `tfsdk:"timeouts"`
}

func (m *yandexResourcemanagerFolderModel) GetCloudId() types.String {
	return m.CloudId
}
func (m *yandexResourcemanagerFolderModel) GetCreatedAt() types.String {
	return m.CreatedAt
}
func (m *yandexResourcemanagerFolderModel) GetDescription() types.String {
	return m.Description
}
func (m *yandexResourcemanagerFolderModel) GetFolderId() types.String {
	return m.FolderId
}
func (m *yandexResourcemanagerFolderModel) GetID() types.String {
	return m.ID
}
func (m *yandexResourcemanagerFolderModel) GetLabels() types.Map {
	return m.Labels
}
func (m *yandexResourcemanagerFolderModel) GetName() types.String {
	return m.Name
}
func (m *yandexResourcemanagerFolderModel) GetStatus() types.String {
	return m.Status
}

func NewYandexResourcemanagerFolderModel() yandexResourcemanagerFolderModel {
	return yandexResourcemanagerFolderModel{
		CloudId:     types.StringNull(),
		CreatedAt:   types.StringNull(),
		Description: types.StringNull(),
		FolderId:    types.StringNull(),
		ID:          types.StringNull(),
		Labels:      types.MapNull(types.StringType),
		Name:        types.StringNull(),
		Status:      types.StringNull(),
	}
}

func yandexResourcemanagerFolderModelFillUnknown(target yandexResourcemanagerFolderModel) yandexResourcemanagerFolderModel {
	if target.CloudId.IsUnknown() || target.CloudId.IsNull() {
		target.CloudId = types.StringNull()
	}
	if target.CreatedAt.IsUnknown() || target.CreatedAt.IsNull() {
		target.CreatedAt = types.StringNull()
	}
	if target.Description.IsUnknown() || target.Description.IsNull() {
		target.Description = types.StringNull()
	}
	if target.FolderId.IsUnknown() || target.FolderId.IsNull() {
		target.FolderId = types.StringNull()
	}
	if target.ID.IsUnknown() || target.ID.IsNull() {
		target.ID = types.StringNull()
	}
	if target.Labels.IsUnknown() || target.Labels.IsNull() {
		target.Labels = types.MapNull(types.StringType)
	}
	if target.Name.IsUnknown() || target.Name.IsNull() {
		target.Name = types.StringNull()
	}
	if target.Status.IsUnknown() || target.Status.IsNull() {
		target.Status = types.StringNull()
	}
	return target
}

var yandexResourcemanagerFolderModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"cloud_id":    types.StringType,
		"created_at":  types.StringType,
		"description": types.StringType,
		"folder_id":   types.StringType,
		"id":          types.StringType,
		"labels":      types.MapType{ElemType: types.StringType},
		"name":        types.StringType,
		"status":      types.StringType,
		"timeouts":    timeouts.AttributesAll(context.Background()).GetType(),
	},
}

func flattenYandexResourcemanagerFolder(ctx context.Context,
	yandexResourcemanagerFolder *resourcemanager.Folder,
	state yandexResourcemanagerFolderModel,
	to timeouts.Value,
	diags *diag.Diagnostics) types.Object {
	if yandexResourcemanagerFolder == nil {
		return types.ObjectNull(yandexResourcemanagerFolderModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexResourcemanagerFolderModelType.AttrTypes, yandexResourcemanagerFolderModel{
		CloudId:     types.StringValue(yandexResourcemanagerFolder.GetCloudId()),
		CreatedAt:   types.StringValue(yandexResourcemanagerFolder.GetCreatedAt().AsTime().Format(time.RFC3339)),
		Description: types.StringValue(yandexResourcemanagerFolder.GetDescription()),
		FolderId:    types.StringValue(yandexResourcemanagerFolder.GetId()),
		ID:          types.StringValue(yandexResourcemanagerFolder.GetId()),
		Labels:      flattenYandexResourcemanagerFolderLabels(ctx, yandexResourcemanagerFolder.GetLabels(), state.Labels, diags),
		Name:        types.StringValue(yandexResourcemanagerFolder.GetName()),
		Status:      types.StringValue(yandexResourcemanagerFolder.GetStatus().String()),
		Timeouts:    to,
	})
	diags.Append(diag...)
	return value
}

func expandYandexResourcemanagerFolder(ctx context.Context, yandexResourcemanagerFolderState types.Object, diags *diag.Diagnostics) *resourcemanager.Folder {
	if yandexResourcemanagerFolderState.IsNull() || yandexResourcemanagerFolderState.IsUnknown() {
		return nil
	}
	var yandexResourcemanagerFolder yandexResourcemanagerFolderModel
	diags.Append(yandexResourcemanagerFolderState.As(ctx, &yandexResourcemanagerFolder, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexResourcemanagerFolderModel(ctx, yandexResourcemanagerFolder, diags)
}

func expandYandexResourcemanagerFolderModel(ctx context.Context, yandexResourcemanagerFolderState yandexResourcemanagerFolderModel, diags *diag.Diagnostics) *resourcemanager.Folder {
	value := &resourcemanager.Folder{}
	value.SetCloudId(yandexResourcemanagerFolderState.CloudId.ValueString())
	value.SetCreatedAt(converter.ParseTimestamp(yandexResourcemanagerFolderState.CreatedAt.ValueString(), diags))
	value.SetDescription(yandexResourcemanagerFolderState.Description.ValueString())
	value.SetId(yandexResourcemanagerFolderState.FolderId.ValueString())
	value.SetId(yandexResourcemanagerFolderState.FolderId.ValueString())
	value.SetLabels(expandYandexResourcemanagerFolderLabels(ctx, yandexResourcemanagerFolderState.Labels, diags))
	value.SetName(yandexResourcemanagerFolderState.Name.ValueString())
	value.SetStatus(resourcemanager.Folder_Status(resourcemanager.Folder_Status_value[yandexResourcemanagerFolderState.Status.ValueString()]))
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexResourcemanagerFolderLabels(ctx context.Context, yandexResourcemanagerFolderLabels map[string]string, listState types.Map, diags *diag.Diagnostics) types.Map {
	if yandexResourcemanagerFolderLabels == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.MapNull(types.StringType)
	}
	yandexResourcemanagerFolderLabelsValues := make(map[string]attr.Value)
	for k, elem := range yandexResourcemanagerFolderLabels {
		val := types.StringValue(elem)
		yandexResourcemanagerFolderLabelsValues[k] = val
	}

	value, diag := types.MapValue(types.StringType, yandexResourcemanagerFolderLabelsValues)
	diags.Append(diag...)
	return value
}

func expandYandexResourcemanagerFolderLabels(ctx context.Context, yandexResourcemanagerFolderLabelsState types.Map, diags *diag.Diagnostics) map[string]string {
	if yandexResourcemanagerFolderLabelsState.IsNull() || yandexResourcemanagerFolderLabelsState.IsUnknown() {
		return nil
	}
	if len(yandexResourcemanagerFolderLabelsState.Elements()) == 0 {
		return map[string]string{}
	}
	yandexResourcemanagerFolderLabelsRes := make(map[string]string)
	yandexResourcemanagerFolderLabelsType := make(map[string]types.String)
	diags.Append(yandexResourcemanagerFolderLabelsState.ElementsAs(ctx, &yandexResourcemanagerFolderLabelsType, false)...)
	if diags.HasError() {
		return nil
	}
	for k, elem := range yandexResourcemanagerFolderLabelsType {
		yandexResourcemanagerFolderLabelsRes[k] = elem.ValueString()
	}
	return yandexResourcemanagerFolderLabelsRes
}

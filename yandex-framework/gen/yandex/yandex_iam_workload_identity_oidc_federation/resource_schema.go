// Code generated by tfgen. DO NOT EDIT.

package yandex_iam_workload_identity_oidc_federation

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/planmodifiers"
)

func YandexIamWorkloadIdentityOidcFederationResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Description:         "A OIDC workload identity federation.",
		MarkdownDescription: "A OIDC workload identity federation.",
		Version:             1,
		Attributes: map[string]schema.Attribute{

			"audiences": schema.SetAttribute{
				ElementType:         types.StringType,
				MarkdownDescription: "List of trusted values for aud claim.",
				Description: "List of trusted values for aud claim." +
					// proto paths: +
					// -> yandex.cloud.iam.v1.workload.oidc.CreateFederationRequest.audiences
					// -> yandex.cloud.iam.v1.workload.oidc.Federation.audiences
					// -> yandex.cloud.iam.v1.workload.oidc.UpdateFederationRequest.audiences
					"package: yandex.cloud.iam.v1.workload.oidc\n" +
					"filename: yandex/cloud/iam/v1/workload/oidc/federation.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.Set{
					setplanmodifier.UseStateForUnknown(),
					planmodifiers.NilRelaxedSet(),
				},
				Validators: []validator.Set{
					setvalidator.ValueStringsAre(
						stringvalidator.LengthBetween(0, 255),
					),
				},
			},

			"created_at": schema.StringAttribute{
				MarkdownDescription: "Creation timestamp.",
				Description: "Creation timestamp." +
					// proto paths: +
					// -> yandex.cloud.iam.v1.workload.oidc.Federation.created_at
					"package: yandex.cloud.iam.v1.workload.oidc\n" +
					"filename: yandex/cloud/iam/v1/workload/oidc/federation.proto\n",
				Computed: true,
			},

			"description": schema.StringAttribute{
				MarkdownDescription: "Description of the service account. 0-256 characters long.",
				Description: "Description of the service account. 0-256 characters long." +
					// proto paths: +
					// -> yandex.cloud.iam.v1.workload.oidc.CreateFederationRequest.description
					// -> yandex.cloud.iam.v1.workload.oidc.Federation.description
					// -> yandex.cloud.iam.v1.workload.oidc.UpdateFederationRequest.description
					"package: yandex.cloud.iam.v1.workload.oidc\n" +
					"filename: yandex/cloud/iam/v1/workload/oidc/federation.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 256),
				},
			},

			"disabled": schema.BoolAttribute{
				MarkdownDescription: "True - the OIDC workload identity federation is disabled and cannot be used for authentication.\n False - the OIDC workload identity federation is enabled and can be used for authentication.",
				Description: "True - the OIDC workload identity federation is disabled and cannot be used for authentication.\n False - the OIDC workload identity federation is enabled and can be used for authentication." +
					// proto paths: +
					// -> yandex.cloud.iam.v1.workload.oidc.CreateFederationRequest.disabled
					// -> yandex.cloud.iam.v1.workload.oidc.UpdateFederationRequest.disabled
					"package: yandex.cloud.iam.v1.workload.oidc\n" +
					"filename: yandex/cloud/iam/v1/workload/oidc/federation_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.UseStateForUnknown(),
					planmodifiers.NilRelaxedBool(),
					planmodifiers.NullWriteOnlyBool(),
				},
			},

			"enabled": schema.BoolAttribute{
				MarkdownDescription: "True - the OIDC workload identity federation is enabled and can be used for authentication.\n False - the OIDC workload identity federation is disabled and cannot be used for authentication.",
				Description: "True - the OIDC workload identity federation is enabled and can be used for authentication.\n False - the OIDC workload identity federation is disabled and cannot be used for authentication." +
					// proto paths: +
					// -> yandex.cloud.iam.v1.workload.oidc.Federation.enabled
					"package: yandex.cloud.iam.v1.workload.oidc\n" +
					"filename: yandex/cloud/iam/v1/workload/oidc/federation.proto\n",
				Computed: true,
			},

			"federation_id": schema.StringAttribute{
				MarkdownDescription: "ID of the OIDC workload identity federation to return.\n To get the OIDC workload identity federation ID, make a [FederationService.List] request.",
				Description: "ID of the OIDC workload identity federation to return.\n To get the OIDC workload identity federation ID, make a [FederationService.List] request." +
					// proto paths: +
					// -> yandex.cloud.iam.v1.workload.oidc.DeleteFederationRequest.federation_id
					// -> yandex.cloud.iam.v1.workload.oidc.Federation.id
					// -> yandex.cloud.iam.v1.workload.oidc.GetFederationRequest.federation_id
					// -> yandex.cloud.iam.v1.workload.oidc.UpdateFederationRequest.federation_id
					"package: yandex.cloud.iam.v1.workload.oidc\n" +
					"filename: yandex/cloud/iam/v1/workload/oidc/federation_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"id": schema.StringAttribute{
				MarkdownDescription: "ID of the OIDC workload identity federation to return.\n To get the OIDC workload identity federation ID, make a [FederationService.List] request.",
				Description: "ID of the OIDC workload identity federation to return.\n To get the OIDC workload identity federation ID, make a [FederationService.List] request." +
					// proto paths: +
					// -> yandex.cloud.iam.v1.workload.oidc.DeleteFederationRequest.federation_id
					// -> yandex.cloud.iam.v1.workload.oidc.Federation.id
					// -> yandex.cloud.iam.v1.workload.oidc.GetFederationRequest.federation_id
					// -> yandex.cloud.iam.v1.workload.oidc.UpdateFederationRequest.federation_id
					"package: yandex.cloud.iam.v1.workload.oidc\n" +
					"filename: yandex/cloud/iam/v1/workload/oidc/federation_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"folder_id": schema.StringAttribute{
				MarkdownDescription: "ID of the folder that the OIDC workload identity federation belongs to.",
				Description: "ID of the folder that the OIDC workload identity federation belongs to." +
					// proto paths: +
					// -> yandex.cloud.iam.v1.workload.oidc.CreateFederationRequest.folder_id
					// -> yandex.cloud.iam.v1.workload.oidc.Federation.folder_id
					"package: yandex.cloud.iam.v1.workload.oidc\n" +
					"filename: yandex/cloud/iam/v1/workload/oidc/federation.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"issuer": schema.StringAttribute{
				MarkdownDescription: "URL of the external IdP server to be used for authentication.",
				Description: "URL of the external IdP server to be used for authentication." +
					// proto paths: +
					// -> yandex.cloud.iam.v1.workload.oidc.CreateFederationRequest.issuer
					// -> yandex.cloud.iam.v1.workload.oidc.Federation.issuer
					"package: yandex.cloud.iam.v1.workload.oidc\n" +
					"filename: yandex/cloud/iam/v1/workload/oidc/federation.proto\n",
				Required: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 8000),
				},
			},

			"jwks_url": schema.StringAttribute{
				MarkdownDescription: "URL reference to trusted keys in format of JSON Web Key Set.",
				Description: "URL reference to trusted keys in format of JSON Web Key Set." +
					// proto paths: +
					// -> yandex.cloud.iam.v1.workload.oidc.CreateFederationRequest.jwks_url
					// -> yandex.cloud.iam.v1.workload.oidc.Federation.jwks_url
					// -> yandex.cloud.iam.v1.workload.oidc.UpdateFederationRequest.jwks_url
					"package: yandex.cloud.iam.v1.workload.oidc\n" +
					"filename: yandex/cloud/iam/v1/workload/oidc/federation.proto\n",
				Required: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 8000),
				},
			},

			"labels": schema.MapAttribute{
				ElementType:         types.StringType,
				MarkdownDescription: "Resource labels as `` key:value `` pairs",
				Description: "Resource labels as `` key:value `` pairs" +
					// proto paths: +
					// -> yandex.cloud.iam.v1.workload.oidc.CreateFederationRequest.labels
					// -> yandex.cloud.iam.v1.workload.oidc.Federation.labels
					// -> yandex.cloud.iam.v1.workload.oidc.UpdateFederationRequest.labels
					"package: yandex.cloud.iam.v1.workload.oidc\n" +
					"filename: yandex/cloud/iam/v1/workload/oidc/federation.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.Map{
					mapplanmodifier.UseStateForUnknown(),
					planmodifiers.NilRelaxedMap(),
				},
				Validators: []validator.Map{
					mapvalidator.ValueStringsAre(),
				},
			},

			"name": schema.StringAttribute{
				MarkdownDescription: "Name of the OIDC workload identity federation\n The name is unique within the folder. 3-63 characters long.",
				Description: "Name of the OIDC workload identity federation\n The name is unique within the folder. 3-63 characters long." +
					// proto paths: +
					// -> yandex.cloud.iam.v1.workload.oidc.CreateFederationRequest.name
					// -> yandex.cloud.iam.v1.workload.oidc.Federation.name
					// -> yandex.cloud.iam.v1.workload.oidc.UpdateFederationRequest.name
					"package: yandex.cloud.iam.v1.workload.oidc\n" +
					"filename: yandex/cloud/iam/v1/workload/oidc/federation.proto\n",
				Required: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^([a-z]([-a-z0-9]{0,61}[a-z0-9])?)$"), "error validating regexp"),
				},
			},
		},

		Blocks: map[string]schema.Block{
			"timeouts": timeouts.BlockAll(ctx),
		},
	}
}

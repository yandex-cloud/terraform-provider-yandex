// Code generated by tfgen. DO NOT EDIT.

package yandex_logging_group

import (
	"context"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	logging "github.com/yandex-cloud/go-genproto/yandex/cloud/logging/v1"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/converter"
)

type yandexLoggingGroupModel struct {
	CloudId         types.String   `tfsdk:"cloud_id"`
	CreatedAt       types.String   `tfsdk:"created_at"`
	DataStream      types.String   `tfsdk:"data_stream"`
	Description     types.String   `tfsdk:"description"`
	FolderId        types.String   `tfsdk:"folder_id"`
	Labels          types.Map      `tfsdk:"labels"`
	LogGroupId      types.String   `tfsdk:"log_group_id"`
	ID              types.String   `tfsdk:"id"`
	Name            types.String   `tfsdk:"name"`
	RetentionPeriod types.String   `tfsdk:"retention_period"`
	Status          types.String   `tfsdk:"status"`
	Timeouts        timeouts.Value `tfsdk:"timeouts"`
}

func (m *yandexLoggingGroupModel) GetCloudId() types.String {
	return m.CloudId
}
func (m *yandexLoggingGroupModel) GetCreatedAt() types.String {
	return m.CreatedAt
}
func (m *yandexLoggingGroupModel) GetDataStream() types.String {
	return m.DataStream
}
func (m *yandexLoggingGroupModel) GetDescription() types.String {
	return m.Description
}
func (m *yandexLoggingGroupModel) GetFolderId() types.String {
	return m.FolderId
}
func (m *yandexLoggingGroupModel) GetLabels() types.Map {
	return m.Labels
}
func (m *yandexLoggingGroupModel) GetLogGroupId() types.String {
	return m.LogGroupId
}
func (m *yandexLoggingGroupModel) GetID() types.String {
	return m.ID
}
func (m *yandexLoggingGroupModel) GetName() types.String {
	return m.Name
}
func (m *yandexLoggingGroupModel) GetRetentionPeriod() types.String {
	return m.RetentionPeriod
}
func (m *yandexLoggingGroupModel) GetStatus() types.String {
	return m.Status
}

func NewYandexLoggingGroupModel() yandexLoggingGroupModel {
	return yandexLoggingGroupModel{
		CloudId:         types.StringNull(),
		CreatedAt:       types.StringNull(),
		DataStream:      types.StringNull(),
		Description:     types.StringNull(),
		FolderId:        types.StringNull(),
		Labels:          types.MapNull(types.StringType),
		LogGroupId:      types.StringNull(),
		ID:              types.StringNull(),
		Name:            types.StringNull(),
		RetentionPeriod: types.StringNull(),
		Status:          types.StringNull(),
	}
}

func yandexLoggingGroupModelFillUnknown(target yandexLoggingGroupModel) yandexLoggingGroupModel {
	if target.CloudId.IsUnknown() || target.CloudId.IsNull() {
		target.CloudId = types.StringNull()
	}
	if target.CreatedAt.IsUnknown() || target.CreatedAt.IsNull() {
		target.CreatedAt = types.StringNull()
	}
	if target.DataStream.IsUnknown() || target.DataStream.IsNull() {
		target.DataStream = types.StringNull()
	}
	if target.Description.IsUnknown() || target.Description.IsNull() {
		target.Description = types.StringNull()
	}
	if target.FolderId.IsUnknown() || target.FolderId.IsNull() {
		target.FolderId = types.StringNull()
	}
	if target.Labels.IsUnknown() || target.Labels.IsNull() {
		target.Labels = types.MapNull(types.StringType)
	}
	if target.LogGroupId.IsUnknown() || target.LogGroupId.IsNull() {
		target.LogGroupId = types.StringNull()
	}
	if target.ID.IsUnknown() || target.ID.IsNull() {
		target.ID = types.StringNull()
	}
	if target.Name.IsUnknown() || target.Name.IsNull() {
		target.Name = types.StringNull()
	}
	if target.RetentionPeriod.IsUnknown() || target.RetentionPeriod.IsNull() {
		target.RetentionPeriod = types.StringNull()
	}
	if target.Status.IsUnknown() || target.Status.IsNull() {
		target.Status = types.StringNull()
	}
	return target
}

var yandexLoggingGroupModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"cloud_id":         types.StringType,
		"created_at":       types.StringType,
		"data_stream":      types.StringType,
		"description":      types.StringType,
		"folder_id":        types.StringType,
		"labels":           types.MapType{ElemType: types.StringType},
		"log_group_id":     types.StringType,
		"id":               types.StringType,
		"name":             types.StringType,
		"retention_period": types.StringType,
		"status":           types.StringType,
		"timeouts":         timeouts.BlockAll(context.Background()).Type(),
	},
}

func flattenYandexLoggingGroup(ctx context.Context,
	yandexLoggingGroup *logging.LogGroup,
	state yandexLoggingGroupModel,
	to timeouts.Value,
	diags *diag.Diagnostics) types.Object {
	if yandexLoggingGroup == nil {
		return types.ObjectNull(yandexLoggingGroupModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexLoggingGroupModelType.AttrTypes, yandexLoggingGroupModel{
		CloudId:         types.StringValue(yandexLoggingGroup.GetCloudId()),
		CreatedAt:       types.StringValue(yandexLoggingGroup.GetCreatedAt().AsTime().Format(time.RFC3339)),
		DataStream:      types.StringValue(yandexLoggingGroup.GetDataStream()),
		Description:     types.StringValue(yandexLoggingGroup.GetDescription()),
		FolderId:        types.StringValue(yandexLoggingGroup.GetFolderId()),
		Labels:          flattenYandexLoggingGroupLabels(ctx, yandexLoggingGroup.GetLabels(), state.Labels, diags),
		LogGroupId:      types.StringValue(yandexLoggingGroup.GetId()),
		ID:              types.StringValue(yandexLoggingGroup.GetId()),
		Name:            types.StringValue(yandexLoggingGroup.GetName()),
		RetentionPeriod: types.StringValue(converter.GetDuration(yandexLoggingGroup.GetRetentionPeriod(), state.RetentionPeriod.ValueString(), diags)),
		Status:          types.StringValue(yandexLoggingGroup.GetStatus().String()),
		Timeouts:        to,
	})
	diags.Append(diag...)
	return value
}

func expandYandexLoggingGroup(ctx context.Context, yandexLoggingGroupState types.Object, diags *diag.Diagnostics) *logging.LogGroup {
	if yandexLoggingGroupState.IsNull() || yandexLoggingGroupState.IsUnknown() {
		return nil
	}
	var yandexLoggingGroup yandexLoggingGroupModel
	diags.Append(yandexLoggingGroupState.As(ctx, &yandexLoggingGroup, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexLoggingGroupModel(ctx, yandexLoggingGroup, diags)
}

func expandYandexLoggingGroupModel(ctx context.Context, yandexLoggingGroupState yandexLoggingGroupModel, diags *diag.Diagnostics) *logging.LogGroup {
	value := &logging.LogGroup{}
	value.SetCloudId(yandexLoggingGroupState.CloudId.ValueString())
	value.SetCreatedAt(converter.ParseTimestamp(yandexLoggingGroupState.CreatedAt.ValueString(), diags))
	value.SetDataStream(yandexLoggingGroupState.DataStream.ValueString())
	value.SetDescription(yandexLoggingGroupState.Description.ValueString())
	value.SetFolderId(yandexLoggingGroupState.FolderId.ValueString())
	value.SetLabels(expandYandexLoggingGroupLabels(ctx, yandexLoggingGroupState.Labels, diags))
	value.SetId(yandexLoggingGroupState.LogGroupId.ValueString())
	value.SetId(yandexLoggingGroupState.LogGroupId.ValueString())
	value.SetName(yandexLoggingGroupState.Name.ValueString())
	value.SetRetentionPeriod(converter.ParseDuration(yandexLoggingGroupState.RetentionPeriod.ValueString(), diags))
	value.SetStatus(logging.LogGroup_Status(logging.LogGroup_Status_value[yandexLoggingGroupState.Status.ValueString()]))
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexLoggingGroupLabels(ctx context.Context, yandexLoggingGroupLabels map[string]string, listState types.Map, diags *diag.Diagnostics) types.Map {
	if yandexLoggingGroupLabels == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.MapNull(types.StringType)
	}
	yandexLoggingGroupLabelsValues := make(map[string]attr.Value)
	for k, elem := range yandexLoggingGroupLabels {
		val := types.StringValue(elem)
		yandexLoggingGroupLabelsValues[k] = val
	}

	value, diag := types.MapValue(types.StringType, yandexLoggingGroupLabelsValues)
	diags.Append(diag...)
	return value
}

func expandYandexLoggingGroupLabels(ctx context.Context, yandexLoggingGroupLabelsState types.Map, diags *diag.Diagnostics) map[string]string {
	if yandexLoggingGroupLabelsState.IsNull() || yandexLoggingGroupLabelsState.IsUnknown() {
		return nil
	}
	if len(yandexLoggingGroupLabelsState.Elements()) == 0 {
		return map[string]string{}
	}
	yandexLoggingGroupLabelsRes := make(map[string]string)
	yandexLoggingGroupLabelsType := make(map[string]types.String)
	diags.Append(yandexLoggingGroupLabelsState.ElementsAs(ctx, &yandexLoggingGroupLabelsType, false)...)
	if diags.HasError() {
		return nil
	}
	for k, elem := range yandexLoggingGroupLabelsType {
		yandexLoggingGroupLabelsRes[k] = elem.ValueString()
	}
	return yandexLoggingGroupLabelsRes
}

// Code generated by tfgen. DO NOT EDIT.

package yandex_organizationmanager_idp_userpool

import (
	"context"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	idp "github.com/yandex-cloud/go-genproto/yandex/cloud/organizationmanager/v1/idp"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/converter"
)

type yandexOrganizationmanagerIdpUserpoolModel struct {
	BruteforceProtectionPolicy types.Object   `tfsdk:"bruteforce_protection_policy"`
	CreatedAt                  types.String   `tfsdk:"created_at"`
	DefaultSubdomain           types.String   `tfsdk:"default_subdomain"`
	Description                types.String   `tfsdk:"description"`
	Domains                    types.List     `tfsdk:"domains"`
	Labels                     types.Map      `tfsdk:"labels"`
	Name                       types.String   `tfsdk:"name"`
	OrganizationId             types.String   `tfsdk:"organization_id"`
	PasswordLifetimePolicy     types.Object   `tfsdk:"password_lifetime_policy"`
	PasswordQualityPolicy      types.Object   `tfsdk:"password_quality_policy"`
	Status                     types.String   `tfsdk:"status"`
	UpdatedAt                  types.String   `tfsdk:"updated_at"`
	UserSettings               types.Object   `tfsdk:"user_settings"`
	UserpoolId                 types.String   `tfsdk:"userpool_id"`
	ID                         types.String   `tfsdk:"id"`
	Timeouts                   timeouts.Value `tfsdk:"timeouts"`
}

func NewYandexOrganizationmanagerIdpUserpoolModel() yandexOrganizationmanagerIdpUserpoolModel {
	return yandexOrganizationmanagerIdpUserpoolModel{
		BruteforceProtectionPolicy: types.ObjectNull(yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyModelType.AttrTypes),
		CreatedAt:                  types.StringNull(),
		DefaultSubdomain:           types.StringNull(),
		Description:                types.StringNull(),
		Domains:                    types.ListNull(types.StringType),
		Labels:                     types.MapNull(types.StringType),
		Name:                       types.StringNull(),
		OrganizationId:             types.StringNull(),
		PasswordLifetimePolicy:     types.ObjectNull(yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyModelType.AttrTypes),
		PasswordQualityPolicy:      types.ObjectNull(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyModelType.AttrTypes),
		Status:                     types.StringNull(),
		UpdatedAt:                  types.StringNull(),
		UserSettings:               types.ObjectNull(yandexOrganizationmanagerIdpUserpoolUserSettingsModelType.AttrTypes),
		UserpoolId:                 types.StringNull(),
		ID:                         types.StringNull(),
	}
}

func yandexOrganizationmanagerIdpUserpoolModelFillUnknown(target yandexOrganizationmanagerIdpUserpoolModel) yandexOrganizationmanagerIdpUserpoolModel {
	if target.BruteforceProtectionPolicy.IsUnknown() || target.BruteforceProtectionPolicy.IsNull() {
		target.BruteforceProtectionPolicy = types.ObjectNull(yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyModelType.AttrTypes)
	}
	if target.CreatedAt.IsUnknown() || target.CreatedAt.IsNull() {
		target.CreatedAt = types.StringNull()
	}
	if target.DefaultSubdomain.IsUnknown() || target.DefaultSubdomain.IsNull() {
		target.DefaultSubdomain = types.StringNull()
	}
	if target.Description.IsUnknown() || target.Description.IsNull() {
		target.Description = types.StringNull()
	}
	if target.Domains.IsUnknown() || target.Domains.IsNull() {
		target.Domains = types.ListNull(types.StringType)
	}
	if target.Labels.IsUnknown() || target.Labels.IsNull() {
		target.Labels = types.MapNull(types.StringType)
	}
	if target.Name.IsUnknown() || target.Name.IsNull() {
		target.Name = types.StringNull()
	}
	if target.OrganizationId.IsUnknown() || target.OrganizationId.IsNull() {
		target.OrganizationId = types.StringNull()
	}
	if target.PasswordLifetimePolicy.IsUnknown() || target.PasswordLifetimePolicy.IsNull() {
		target.PasswordLifetimePolicy = types.ObjectNull(yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyModelType.AttrTypes)
	}
	if target.PasswordQualityPolicy.IsUnknown() || target.PasswordQualityPolicy.IsNull() {
		target.PasswordQualityPolicy = types.ObjectNull(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyModelType.AttrTypes)
	}
	if target.Status.IsUnknown() || target.Status.IsNull() {
		target.Status = types.StringNull()
	}
	if target.UpdatedAt.IsUnknown() || target.UpdatedAt.IsNull() {
		target.UpdatedAt = types.StringNull()
	}
	if target.UserSettings.IsUnknown() || target.UserSettings.IsNull() {
		target.UserSettings = types.ObjectNull(yandexOrganizationmanagerIdpUserpoolUserSettingsModelType.AttrTypes)
	}
	if target.UserpoolId.IsUnknown() || target.UserpoolId.IsNull() {
		target.UserpoolId = types.StringNull()
	}
	if target.ID.IsUnknown() || target.ID.IsNull() {
		target.ID = types.StringNull()
	}
	return target
}

var yandexOrganizationmanagerIdpUserpoolModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"bruteforce_protection_policy": yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyModelType,
		"created_at":                   types.StringType,
		"default_subdomain":            types.StringType,
		"description":                  types.StringType,
		"domains":                      types.ListType{ElemType: types.StringType},
		"labels":                       types.MapType{ElemType: types.StringType},
		"name":                         types.StringType,
		"organization_id":              types.StringType,
		"password_lifetime_policy":     yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyModelType,
		"password_quality_policy":      yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyModelType,
		"status":                       types.StringType,
		"updated_at":                   types.StringType,
		"user_settings":                yandexOrganizationmanagerIdpUserpoolUserSettingsModelType,
		"userpool_id":                  types.StringType,
		"id":                           types.StringType,
		"timeouts":                     timeouts.AttributesAll(context.Background()).GetType(),
	},
}

func flattenYandexOrganizationmanagerIdpUserpool(ctx context.Context,
	yandexOrganizationmanagerIdpUserpool *idp.Userpool,
	state yandexOrganizationmanagerIdpUserpoolModel,
	to timeouts.Value,
	diags *diag.Diagnostics) types.Object {
	if yandexOrganizationmanagerIdpUserpool == nil {
		return types.ObjectNull(yandexOrganizationmanagerIdpUserpoolModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexOrganizationmanagerIdpUserpoolModelType.AttrTypes, yandexOrganizationmanagerIdpUserpoolModel{
		BruteforceProtectionPolicy: flattenYandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicy(ctx, yandexOrganizationmanagerIdpUserpool.GetBruteforceProtectionPolicy(), converter.ExpandObject(ctx, state.BruteforceProtectionPolicy, yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyModel{}, diags).(yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyModel), diags),
		CreatedAt:                  types.StringValue(yandexOrganizationmanagerIdpUserpool.GetCreatedAt().AsTime().Format(time.RFC3339)),
		DefaultSubdomain:           state.DefaultSubdomain,
		Description:                types.StringValue(yandexOrganizationmanagerIdpUserpool.GetDescription()),
		Domains:                    flattenYandexOrganizationmanagerIdpUserpoolDomains(ctx, yandexOrganizationmanagerIdpUserpool.GetDomains(), state.Domains, diags),
		Labels:                     flattenYandexOrganizationmanagerIdpUserpoolLabels(ctx, yandexOrganizationmanagerIdpUserpool.GetLabels(), state.Labels, diags),
		Name:                       types.StringValue(yandexOrganizationmanagerIdpUserpool.GetName()),
		OrganizationId:             types.StringValue(yandexOrganizationmanagerIdpUserpool.GetOrganizationId()),
		PasswordLifetimePolicy:     flattenYandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicy(ctx, yandexOrganizationmanagerIdpUserpool.GetPasswordLifetimePolicy(), diags),
		PasswordQualityPolicy:      flattenYandexOrganizationmanagerIdpUserpoolPasswordQualityPolicy(ctx, yandexOrganizationmanagerIdpUserpool.GetPasswordQualityPolicy(), diags),
		Status:                     types.StringValue(yandexOrganizationmanagerIdpUserpool.GetStatus().String()),
		UpdatedAt:                  types.StringValue(yandexOrganizationmanagerIdpUserpool.GetUpdatedAt().AsTime().Format(time.RFC3339)),
		UserSettings:               flattenYandexOrganizationmanagerIdpUserpoolUserSettings(ctx, yandexOrganizationmanagerIdpUserpool.GetUserSettings(), diags),
		UserpoolId:                 types.StringValue(yandexOrganizationmanagerIdpUserpool.GetId()),
		ID:                         types.StringValue(yandexOrganizationmanagerIdpUserpool.GetId()),
		Timeouts:                   to,
	})
	diags.Append(diag...)
	return value
}

func expandYandexOrganizationmanagerIdpUserpool(ctx context.Context, yandexOrganizationmanagerIdpUserpoolState types.Object, diags *diag.Diagnostics) *idp.Userpool {
	if yandexOrganizationmanagerIdpUserpoolState.IsNull() || yandexOrganizationmanagerIdpUserpoolState.IsUnknown() {
		return nil
	}
	var yandexOrganizationmanagerIdpUserpool yandexOrganizationmanagerIdpUserpoolModel
	diags.Append(yandexOrganizationmanagerIdpUserpoolState.As(ctx, &yandexOrganizationmanagerIdpUserpool, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexOrganizationmanagerIdpUserpoolModel(ctx, yandexOrganizationmanagerIdpUserpool, diags)
}

func expandYandexOrganizationmanagerIdpUserpoolModel(ctx context.Context, yandexOrganizationmanagerIdpUserpoolState yandexOrganizationmanagerIdpUserpoolModel, diags *diag.Diagnostics) *idp.Userpool {
	value := &idp.Userpool{}
	value.SetBruteforceProtectionPolicy(expandYandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicy(ctx, yandexOrganizationmanagerIdpUserpoolState.BruteforceProtectionPolicy, diags))
	value.SetCreatedAt(converter.ParseTimestamp(yandexOrganizationmanagerIdpUserpoolState.CreatedAt.ValueString(), diags))
	value.SetDescription(yandexOrganizationmanagerIdpUserpoolState.Description.ValueString())
	value.SetDomains(expandYandexOrganizationmanagerIdpUserpoolDomains(ctx, yandexOrganizationmanagerIdpUserpoolState.Domains, diags))
	value.SetLabels(expandYandexOrganizationmanagerIdpUserpoolLabels(ctx, yandexOrganizationmanagerIdpUserpoolState.Labels, diags))
	value.SetName(yandexOrganizationmanagerIdpUserpoolState.Name.ValueString())
	value.SetOrganizationId(yandexOrganizationmanagerIdpUserpoolState.OrganizationId.ValueString())
	value.SetPasswordLifetimePolicy(expandYandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicy(ctx, yandexOrganizationmanagerIdpUserpoolState.PasswordLifetimePolicy, diags))
	value.SetPasswordQualityPolicy(expandYandexOrganizationmanagerIdpUserpoolPasswordQualityPolicy(ctx, yandexOrganizationmanagerIdpUserpoolState.PasswordQualityPolicy, diags))
	value.SetStatus(idp.Userpool_Status(idp.Userpool_Status_value[yandexOrganizationmanagerIdpUserpoolState.Status.ValueString()]))
	value.SetUpdatedAt(converter.ParseTimestamp(yandexOrganizationmanagerIdpUserpoolState.UpdatedAt.ValueString(), diags))
	value.SetUserSettings(expandYandexOrganizationmanagerIdpUserpoolUserSettings(ctx, yandexOrganizationmanagerIdpUserpoolState.UserSettings, diags))
	value.SetId(yandexOrganizationmanagerIdpUserpoolState.UserpoolId.ValueString())
	value.SetId(yandexOrganizationmanagerIdpUserpoolState.UserpoolId.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyModel struct {
	Attempts types.Int64  `tfsdk:"attempts"`
	Block    types.String `tfsdk:"block"`
	Window   types.String `tfsdk:"window"`
}

func NewYandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyModel() yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyModel {
	return yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyModel{
		Attempts: types.Int64Null(),
		Block:    types.StringNull(),
		Window:   types.StringNull(),
	}
}

func yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyModelFillUnknown(target yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyModel) yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyModel {
	if target.Attempts.IsUnknown() || target.Attempts.IsNull() {
		target.Attempts = types.Int64Null()
	}
	if target.Block.IsUnknown() || target.Block.IsNull() {
		target.Block = types.StringNull()
	}
	if target.Window.IsUnknown() || target.Window.IsNull() {
		target.Window = types.StringNull()
	}
	return target
}

var yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"attempts": types.Int64Type,
		"block":    types.StringType,
		"window":   types.StringType,
	},
}

func flattenYandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicy(ctx context.Context,
	yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicy *idp.BruteforceProtectionPolicy,
	state yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyModel,
	diags *diag.Diagnostics) types.Object {
	if yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicy == nil {
		return types.ObjectNull(yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyModelType.AttrTypes, yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyModel{
		Attempts: types.Int64Value(int64(yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicy.GetAttempts())),
		Block:    types.StringValue(converter.GetDuration(yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicy.GetBlock(), state.Block.ValueString(), diags)),
		Window:   types.StringValue(converter.GetDuration(yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicy.GetWindow(), state.Window.ValueString(), diags)),
	})
	diags.Append(diag...)
	return value
}

func expandYandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicy(ctx context.Context, yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyState types.Object, diags *diag.Diagnostics) *idp.BruteforceProtectionPolicy {
	if yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyState.IsNull() || yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyState.IsUnknown() {
		return nil
	}
	var yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicy yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyModel
	diags.Append(yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyState.As(ctx, &yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicy, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyModel(ctx, yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicy, diags)
}

func expandYandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyModel(ctx context.Context, yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyState yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyModel, diags *diag.Diagnostics) *idp.BruteforceProtectionPolicy {
	value := &idp.BruteforceProtectionPolicy{}
	value.SetAttempts((yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyState.Attempts.ValueInt64()))
	value.SetBlock(converter.ParseDuration(yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyState.Block.ValueString(), diags))
	value.SetWindow(converter.ParseDuration(yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyState.Window.ValueString(), diags))
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexOrganizationmanagerIdpUserpoolDomains(ctx context.Context, yandexOrganizationmanagerIdpUserpoolDomains []string, listState types.List, diags *diag.Diagnostics) types.List {
	if yandexOrganizationmanagerIdpUserpoolDomains == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.ListNull(types.StringType)
	}
	var yandexOrganizationmanagerIdpUserpoolDomainsValues []attr.Value
	for _, elem := range yandexOrganizationmanagerIdpUserpoolDomains {
		val := types.StringValue(elem)
		yandexOrganizationmanagerIdpUserpoolDomainsValues = append(yandexOrganizationmanagerIdpUserpoolDomainsValues, val)
	}

	value, diag := types.ListValue(types.StringType, yandexOrganizationmanagerIdpUserpoolDomainsValues)
	diags.Append(diag...)
	return value
}

func expandYandexOrganizationmanagerIdpUserpoolDomains(ctx context.Context, yandexOrganizationmanagerIdpUserpoolDomainsState types.List, diags *diag.Diagnostics) []string {
	if yandexOrganizationmanagerIdpUserpoolDomainsState.IsNull() || yandexOrganizationmanagerIdpUserpoolDomainsState.IsUnknown() {
		return nil
	}
	if len(yandexOrganizationmanagerIdpUserpoolDomainsState.Elements()) == 0 {
		return []string{}
	}
	yandexOrganizationmanagerIdpUserpoolDomainsRes := make([]string, 0, len(yandexOrganizationmanagerIdpUserpoolDomainsState.Elements()))
	yandexOrganizationmanagerIdpUserpoolDomainsType := make([]types.String, 0, len(yandexOrganizationmanagerIdpUserpoolDomainsState.Elements()))
	diags.Append(yandexOrganizationmanagerIdpUserpoolDomainsState.ElementsAs(ctx, &yandexOrganizationmanagerIdpUserpoolDomainsType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexOrganizationmanagerIdpUserpoolDomainsType {
		yandexOrganizationmanagerIdpUserpoolDomainsRes = append(yandexOrganizationmanagerIdpUserpoolDomainsRes, elem.ValueString())
	}
	return yandexOrganizationmanagerIdpUserpoolDomainsRes
}

func flattenYandexOrganizationmanagerIdpUserpoolLabels(ctx context.Context, yandexOrganizationmanagerIdpUserpoolLabels map[string]string, listState types.Map, diags *diag.Diagnostics) types.Map {
	if yandexOrganizationmanagerIdpUserpoolLabels == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.MapNull(types.StringType)
	}
	yandexOrganizationmanagerIdpUserpoolLabelsValues := make(map[string]attr.Value)
	for k, elem := range yandexOrganizationmanagerIdpUserpoolLabels {
		val := types.StringValue(elem)
		yandexOrganizationmanagerIdpUserpoolLabelsValues[k] = val
	}

	value, diag := types.MapValue(types.StringType, yandexOrganizationmanagerIdpUserpoolLabelsValues)
	diags.Append(diag...)
	return value
}

func expandYandexOrganizationmanagerIdpUserpoolLabels(ctx context.Context, yandexOrganizationmanagerIdpUserpoolLabelsState types.Map, diags *diag.Diagnostics) map[string]string {
	if yandexOrganizationmanagerIdpUserpoolLabelsState.IsNull() || yandexOrganizationmanagerIdpUserpoolLabelsState.IsUnknown() {
		return nil
	}
	if len(yandexOrganizationmanagerIdpUserpoolLabelsState.Elements()) == 0 {
		return map[string]string{}
	}
	yandexOrganizationmanagerIdpUserpoolLabelsRes := make(map[string]string)
	yandexOrganizationmanagerIdpUserpoolLabelsType := make(map[string]types.String)
	diags.Append(yandexOrganizationmanagerIdpUserpoolLabelsState.ElementsAs(ctx, &yandexOrganizationmanagerIdpUserpoolLabelsType, false)...)
	if diags.HasError() {
		return nil
	}
	for k, elem := range yandexOrganizationmanagerIdpUserpoolLabelsType {
		yandexOrganizationmanagerIdpUserpoolLabelsRes[k] = elem.ValueString()
	}
	return yandexOrganizationmanagerIdpUserpoolLabelsRes
}

type yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyModel struct {
	MaxDaysCount types.Int64 `tfsdk:"max_days_count"`
	MinDaysCount types.Int64 `tfsdk:"min_days_count"`
}

func NewYandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyModel() yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyModel {
	return yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyModel{
		MaxDaysCount: types.Int64Null(),
		MinDaysCount: types.Int64Null(),
	}
}

func yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyModelFillUnknown(target yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyModel) yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyModel {
	if target.MaxDaysCount.IsUnknown() || target.MaxDaysCount.IsNull() {
		target.MaxDaysCount = types.Int64Null()
	}
	if target.MinDaysCount.IsUnknown() || target.MinDaysCount.IsNull() {
		target.MinDaysCount = types.Int64Null()
	}
	return target
}

var yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"max_days_count": types.Int64Type,
		"min_days_count": types.Int64Type,
	},
}

func flattenYandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicy(ctx context.Context,
	yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicy *idp.PasswordLifetimePolicy,
	diags *diag.Diagnostics) types.Object {
	if yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicy == nil {
		return types.ObjectNull(yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyModelType.AttrTypes, yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyModel{
		MaxDaysCount: types.Int64Value(int64(yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicy.GetMaxDaysCount())),
		MinDaysCount: types.Int64Value(int64(yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicy.GetMinDaysCount())),
	})
	diags.Append(diag...)
	return value
}

func expandYandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicy(ctx context.Context, yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyState types.Object, diags *diag.Diagnostics) *idp.PasswordLifetimePolicy {
	if yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyState.IsNull() || yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyState.IsUnknown() {
		return nil
	}
	var yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicy yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyModel
	diags.Append(yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyState.As(ctx, &yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicy, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyModel(ctx, yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicy, diags)
}

func expandYandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyModel(ctx context.Context, yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyState yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyModel, diags *diag.Diagnostics) *idp.PasswordLifetimePolicy {
	value := &idp.PasswordLifetimePolicy{}
	value.SetMaxDaysCount((yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyState.MaxDaysCount.ValueInt64()))
	value.SetMinDaysCount((yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyState.MinDaysCount.ValueInt64()))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyModel struct {
	AllowSimilar             types.Bool   `tfsdk:"allow_similar"`
	MatchLength              types.Int64  `tfsdk:"match_length"`
	MaxLength                types.Int64  `tfsdk:"max_length"`
	MinLength                types.Int64  `tfsdk:"min_length"`
	MinLengthByClassSettings types.Object `tfsdk:"min_length_by_class_settings"`
	RequiredClasses          types.Object `tfsdk:"required_classes"`
}

func NewYandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyModel() yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyModel {
	return yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyModel{
		AllowSimilar:             types.BoolNull(),
		MatchLength:              types.Int64Null(),
		MaxLength:                types.Int64Null(),
		MinLength:                types.Int64Null(),
		MinLengthByClassSettings: types.ObjectNull(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsModelType.AttrTypes),
		RequiredClasses:          types.ObjectNull(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesModelType.AttrTypes),
	}
}

func yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyModelFillUnknown(target yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyModel) yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyModel {
	if target.AllowSimilar.IsUnknown() || target.AllowSimilar.IsNull() {
		target.AllowSimilar = types.BoolNull()
	}
	if target.MatchLength.IsUnknown() || target.MatchLength.IsNull() {
		target.MatchLength = types.Int64Null()
	}
	if target.MaxLength.IsUnknown() || target.MaxLength.IsNull() {
		target.MaxLength = types.Int64Null()
	}
	if target.MinLength.IsUnknown() || target.MinLength.IsNull() {
		target.MinLength = types.Int64Null()
	}
	if target.MinLengthByClassSettings.IsUnknown() || target.MinLengthByClassSettings.IsNull() {
		target.MinLengthByClassSettings = types.ObjectNull(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsModelType.AttrTypes)
	}
	if target.RequiredClasses.IsUnknown() || target.RequiredClasses.IsNull() {
		target.RequiredClasses = types.ObjectNull(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesModelType.AttrTypes)
	}
	return target
}

var yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"allow_similar":                types.BoolType,
		"match_length":                 types.Int64Type,
		"max_length":                   types.Int64Type,
		"min_length":                   types.Int64Type,
		"min_length_by_class_settings": yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsModelType,
		"required_classes":             yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesModelType,
	},
}

func flattenYandexOrganizationmanagerIdpUserpoolPasswordQualityPolicy(ctx context.Context,
	yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicy *idp.PasswordQualityPolicy,
	diags *diag.Diagnostics) types.Object {
	if yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicy == nil {
		return types.ObjectNull(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyModelType.AttrTypes, yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyModel{
		AllowSimilar:             types.BoolValue(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicy.GetAllowSimilar()),
		MatchLength:              types.Int64Value(int64(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicy.GetMatchLength())),
		MaxLength:                types.Int64Value(int64(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicy.GetMaxLength())),
		MinLength:                types.Int64Value(int64(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicy.GetMinLength())),
		MinLengthByClassSettings: flattenYandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettings(ctx, yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicy.GetMinLengthByClassSettings(), diags),
		RequiredClasses:          flattenYandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClasses(ctx, yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicy.GetRequiredClasses(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexOrganizationmanagerIdpUserpoolPasswordQualityPolicy(ctx context.Context, yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyState types.Object, diags *diag.Diagnostics) *idp.PasswordQualityPolicy {
	if yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyState.IsNull() || yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyState.IsUnknown() {
		return nil
	}
	var yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicy yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyModel
	diags.Append(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyState.As(ctx, &yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicy, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyModel(ctx, yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicy, diags)
}

func expandYandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyModel(ctx context.Context, yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyState yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyModel, diags *diag.Diagnostics) *idp.PasswordQualityPolicy {
	value := &idp.PasswordQualityPolicy{}
	value.SetAllowSimilar(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyState.AllowSimilar.ValueBool())
	value.SetMatchLength((yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyState.MatchLength.ValueInt64()))
	value.SetMaxLength((yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyState.MaxLength.ValueInt64()))
	value.SetMinLength((yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyState.MinLength.ValueInt64()))
	value.SetMinLengthByClassSettings(expandYandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettings(ctx, yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyState.MinLengthByClassSettings, diags))
	value.SetRequiredClasses(expandYandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClasses(ctx, yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyState.RequiredClasses, diags))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsModel struct {
	One   types.Int64 `tfsdk:"one"`
	Three types.Int64 `tfsdk:"three"`
	Two   types.Int64 `tfsdk:"two"`
}

func NewYandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsModel() yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsModel {
	return yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsModel{
		One:   types.Int64Null(),
		Three: types.Int64Null(),
		Two:   types.Int64Null(),
	}
}

func yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsModelFillUnknown(target yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsModel) yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsModel {
	if target.One.IsUnknown() || target.One.IsNull() {
		target.One = types.Int64Null()
	}
	if target.Three.IsUnknown() || target.Three.IsNull() {
		target.Three = types.Int64Null()
	}
	if target.Two.IsUnknown() || target.Two.IsNull() {
		target.Two = types.Int64Null()
	}
	return target
}

var yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"one":   types.Int64Type,
		"three": types.Int64Type,
		"two":   types.Int64Type,
	},
}

func flattenYandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettings(ctx context.Context,
	yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettings *idp.PasswordQualityPolicy_MinLengthByClassSettings,
	diags *diag.Diagnostics) types.Object {
	if yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettings == nil {
		return types.ObjectNull(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsModelType.AttrTypes, yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsModel{
		One:   types.Int64Value(int64(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettings.GetOne())),
		Three: types.Int64Value(int64(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettings.GetThree())),
		Two:   types.Int64Value(int64(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettings.GetTwo())),
	})
	diags.Append(diag...)
	return value
}

func expandYandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettings(ctx context.Context, yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsState types.Object, diags *diag.Diagnostics) *idp.PasswordQualityPolicy_MinLengthByClassSettings {
	if yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsState.IsNull() || yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsState.IsUnknown() {
		return nil
	}
	var yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettings yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsModel
	diags.Append(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsState.As(ctx, &yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettings, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsModel(ctx, yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettings, diags)
}

func expandYandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsModel(ctx context.Context, yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsState yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsModel, diags *diag.Diagnostics) *idp.PasswordQualityPolicy_MinLengthByClassSettings {
	value := &idp.PasswordQualityPolicy_MinLengthByClassSettings{}
	value.SetOne((yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsState.One.ValueInt64()))
	value.SetThree((yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsState.Three.ValueInt64()))
	value.SetTwo((yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsState.Two.ValueInt64()))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesModel struct {
	Digits   types.Bool `tfsdk:"digits"`
	Lowers   types.Bool `tfsdk:"lowers"`
	Specials types.Bool `tfsdk:"specials"`
	Uppers   types.Bool `tfsdk:"uppers"`
}

func NewYandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesModel() yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesModel {
	return yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesModel{
		Digits:   types.BoolNull(),
		Lowers:   types.BoolNull(),
		Specials: types.BoolNull(),
		Uppers:   types.BoolNull(),
	}
}

func yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesModelFillUnknown(target yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesModel) yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesModel {
	if target.Digits.IsUnknown() || target.Digits.IsNull() {
		target.Digits = types.BoolNull()
	}
	if target.Lowers.IsUnknown() || target.Lowers.IsNull() {
		target.Lowers = types.BoolNull()
	}
	if target.Specials.IsUnknown() || target.Specials.IsNull() {
		target.Specials = types.BoolNull()
	}
	if target.Uppers.IsUnknown() || target.Uppers.IsNull() {
		target.Uppers = types.BoolNull()
	}
	return target
}

var yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"digits":   types.BoolType,
		"lowers":   types.BoolType,
		"specials": types.BoolType,
		"uppers":   types.BoolType,
	},
}

func flattenYandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClasses(ctx context.Context,
	yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClasses *idp.PasswordQualityPolicy_RequiredClasses,
	diags *diag.Diagnostics) types.Object {
	if yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClasses == nil {
		return types.ObjectNull(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesModelType.AttrTypes, yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesModel{
		Digits:   types.BoolValue(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClasses.GetDigits()),
		Lowers:   types.BoolValue(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClasses.GetLowers()),
		Specials: types.BoolValue(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClasses.GetSpecials()),
		Uppers:   types.BoolValue(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClasses.GetUppers()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClasses(ctx context.Context, yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesState types.Object, diags *diag.Diagnostics) *idp.PasswordQualityPolicy_RequiredClasses {
	if yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesState.IsNull() || yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesState.IsUnknown() {
		return nil
	}
	var yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClasses yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesModel
	diags.Append(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesState.As(ctx, &yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClasses, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesModel(ctx, yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClasses, diags)
}

func expandYandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesModel(ctx context.Context, yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesState yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesModel, diags *diag.Diagnostics) *idp.PasswordQualityPolicy_RequiredClasses {
	value := &idp.PasswordQualityPolicy_RequiredClasses{}
	value.SetDigits(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesState.Digits.ValueBool())
	value.SetLowers(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesState.Lowers.ValueBool())
	value.SetSpecials(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesState.Specials.ValueBool())
	value.SetUppers(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesState.Uppers.ValueBool())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexOrganizationmanagerIdpUserpoolUserSettingsModel struct {
	AllowEditSelfContacts types.Bool `tfsdk:"allow_edit_self_contacts"`
	AllowEditSelfInfo     types.Bool `tfsdk:"allow_edit_self_info"`
	AllowEditSelfLogin    types.Bool `tfsdk:"allow_edit_self_login"`
	AllowEditSelfPassword types.Bool `tfsdk:"allow_edit_self_password"`
}

func NewYandexOrganizationmanagerIdpUserpoolUserSettingsModel() yandexOrganizationmanagerIdpUserpoolUserSettingsModel {
	return yandexOrganizationmanagerIdpUserpoolUserSettingsModel{
		AllowEditSelfContacts: types.BoolNull(),
		AllowEditSelfInfo:     types.BoolNull(),
		AllowEditSelfLogin:    types.BoolNull(),
		AllowEditSelfPassword: types.BoolNull(),
	}
}

func yandexOrganizationmanagerIdpUserpoolUserSettingsModelFillUnknown(target yandexOrganizationmanagerIdpUserpoolUserSettingsModel) yandexOrganizationmanagerIdpUserpoolUserSettingsModel {
	if target.AllowEditSelfContacts.IsUnknown() || target.AllowEditSelfContacts.IsNull() {
		target.AllowEditSelfContacts = types.BoolNull()
	}
	if target.AllowEditSelfInfo.IsUnknown() || target.AllowEditSelfInfo.IsNull() {
		target.AllowEditSelfInfo = types.BoolNull()
	}
	if target.AllowEditSelfLogin.IsUnknown() || target.AllowEditSelfLogin.IsNull() {
		target.AllowEditSelfLogin = types.BoolNull()
	}
	if target.AllowEditSelfPassword.IsUnknown() || target.AllowEditSelfPassword.IsNull() {
		target.AllowEditSelfPassword = types.BoolNull()
	}
	return target
}

var yandexOrganizationmanagerIdpUserpoolUserSettingsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"allow_edit_self_contacts": types.BoolType,
		"allow_edit_self_info":     types.BoolType,
		"allow_edit_self_login":    types.BoolType,
		"allow_edit_self_password": types.BoolType,
	},
}

func flattenYandexOrganizationmanagerIdpUserpoolUserSettings(ctx context.Context,
	yandexOrganizationmanagerIdpUserpoolUserSettings *idp.UserSettings,
	diags *diag.Diagnostics) types.Object {
	if yandexOrganizationmanagerIdpUserpoolUserSettings == nil {
		return types.ObjectNull(yandexOrganizationmanagerIdpUserpoolUserSettingsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexOrganizationmanagerIdpUserpoolUserSettingsModelType.AttrTypes, yandexOrganizationmanagerIdpUserpoolUserSettingsModel{
		AllowEditSelfContacts: types.BoolValue(yandexOrganizationmanagerIdpUserpoolUserSettings.GetAllowEditSelfContacts()),
		AllowEditSelfInfo:     types.BoolValue(yandexOrganizationmanagerIdpUserpoolUserSettings.GetAllowEditSelfInfo()),
		AllowEditSelfLogin:    types.BoolValue(yandexOrganizationmanagerIdpUserpoolUserSettings.GetAllowEditSelfLogin()),
		AllowEditSelfPassword: types.BoolValue(yandexOrganizationmanagerIdpUserpoolUserSettings.GetAllowEditSelfPassword()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexOrganizationmanagerIdpUserpoolUserSettings(ctx context.Context, yandexOrganizationmanagerIdpUserpoolUserSettingsState types.Object, diags *diag.Diagnostics) *idp.UserSettings {
	if yandexOrganizationmanagerIdpUserpoolUserSettingsState.IsNull() || yandexOrganizationmanagerIdpUserpoolUserSettingsState.IsUnknown() {
		return nil
	}
	var yandexOrganizationmanagerIdpUserpoolUserSettings yandexOrganizationmanagerIdpUserpoolUserSettingsModel
	diags.Append(yandexOrganizationmanagerIdpUserpoolUserSettingsState.As(ctx, &yandexOrganizationmanagerIdpUserpoolUserSettings, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexOrganizationmanagerIdpUserpoolUserSettingsModel(ctx, yandexOrganizationmanagerIdpUserpoolUserSettings, diags)
}

func expandYandexOrganizationmanagerIdpUserpoolUserSettingsModel(ctx context.Context, yandexOrganizationmanagerIdpUserpoolUserSettingsState yandexOrganizationmanagerIdpUserpoolUserSettingsModel, diags *diag.Diagnostics) *idp.UserSettings {
	value := &idp.UserSettings{}
	value.SetAllowEditSelfContacts(yandexOrganizationmanagerIdpUserpoolUserSettingsState.AllowEditSelfContacts.ValueBool())
	value.SetAllowEditSelfInfo(yandexOrganizationmanagerIdpUserpoolUserSettingsState.AllowEditSelfInfo.ValueBool())
	value.SetAllowEditSelfLogin(yandexOrganizationmanagerIdpUserpoolUserSettingsState.AllowEditSelfLogin.ValueBool())
	value.SetAllowEditSelfPassword(yandexOrganizationmanagerIdpUserpoolUserSettingsState.AllowEditSelfPassword.ValueBool())
	if diags.HasError() {
		return nil
	}
	return value
}

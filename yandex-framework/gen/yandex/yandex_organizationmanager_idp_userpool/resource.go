// Code generated by tfgen. DO NOT EDIT.

package yandex_organizationmanager_idp_userpool

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	idp "github.com/yandex-cloud/go-genproto/yandex/cloud/organizationmanager/v1/idp"
	idpsdk "github.com/yandex-cloud/go-sdk/services/organizationmanager/v1/idp"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/converter"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/validate"
	provider_config "github.com/yandex-cloud/terraform-provider-yandex/yandex-framework/provider/config"
	"google.golang.org/genproto/protobuf/field_mask"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/metadata"
)

var _ resource.ResourceWithConfigure = (*yandexOrganizationmanagerIdpUserpoolResource)(nil)
var _ resource.ResourceWithImportState = (*yandexOrganizationmanagerIdpUserpoolResource)(nil)

type yandexOrganizationmanagerIdpUserpoolResource struct {
	providerConfig *provider_config.Config
}

func NewResource() resource.Resource {
	return &yandexOrganizationmanagerIdpUserpoolResource{}
}

func (r *yandexOrganizationmanagerIdpUserpoolResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "yandex_organizationmanager_idp_userpool"
}

func (r *yandexOrganizationmanagerIdpUserpoolResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerConfig, ok := req.ProviderData.(*provider_config.Config)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *provider_config.Config, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)
		return
	}

	r.providerConfig = providerConfig
}

func (r *yandexOrganizationmanagerIdpUserpoolResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = YandexOrganizationmanagerIdpUserpoolResourceSchema(ctx)
}

func (r *yandexOrganizationmanagerIdpUserpoolResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("userpool_id"), req, resp)
}

func (r *yandexOrganizationmanagerIdpUserpoolResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state yandexOrganizationmanagerIdpUserpoolModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	readTimeout, timeoutInitError := state.Timeouts.Read(ctx, provider_config.DefaultTimeout)
	if timeoutInitError != nil {
		resp.Diagnostics.Append(timeoutInitError...)
		return
	}

	ctx, cancel := context.WithTimeout(ctx, readTimeout)
	defer cancel()

	reqApi := &idp.GetUserpoolRequest{}
	id := state.ID.ValueString()
	if !state.UserpoolId.IsUnknown() && !state.UserpoolId.IsNull() {
		id = state.UserpoolId.ValueString()
	}
	reqApi.SetUserpoolId(id)
	tflog.Debug(ctx, fmt.Sprintf("Read userpool request: %s", validate.ProtoDump(reqApi)))

	md := new(metadata.MD)
	res, err := idpsdk.NewUserpoolClient(r.providerConfig.SDKv2).Get(ctx, reqApi, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read userpool x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read userpool x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		if validate.IsStatusWithCode(err, codes.NotFound) {
			resp.Diagnostics.AddWarning(
				"Failed to Read resource",
				"userpool not found",
			)
			resp.State.RemoveResource(ctx)
			return
		} else {
			resp.Diagnostics.AddError(
				"Failed to Read resource",
				"Error while requesting API to get userpool:"+err.Error(),
			)
		}
	}
	tflog.Debug(ctx, fmt.Sprintf("Read userpool response: %s", validate.ProtoDump(res)))

	if resp.Diagnostics.HasError() {
		return
	}

	// diagnostics don't have errors and resource is nil => resource not found
	if res == nil {
		resp.Diagnostics.AddError("Failed to read", "Resource not found")
		return
	}

	newState := flattenYandexOrganizationmanagerIdpUserpool(ctx, res, state, state.Timeouts, &resp.Diagnostics)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &newState)...)
	if resp.Diagnostics.HasError() {
		return
	}
}

func (r *yandexOrganizationmanagerIdpUserpoolResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan yandexOrganizationmanagerIdpUserpoolModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	createTimeout, timeoutInitError := plan.Timeouts.Create(ctx, provider_config.DefaultTimeout)
	if timeoutInitError != nil {
		resp.Diagnostics.Append(timeoutInitError...)
		return
	}

	ctx, cancel := context.WithTimeout(ctx, createTimeout)
	defer cancel()

	createReq := &idp.CreateUserpoolRequest{}
	createReq.SetOrganizationId(converter.GetOrganizationID(plan.OrganizationId.ValueString(), r.providerConfig, &diags))
	createReq.SetName(plan.Name.ValueString())
	createReq.SetDescription(plan.Description.ValueString())
	createReq.SetLabels(expandYandexOrganizationmanagerIdpUserpoolLabels(ctx, plan.Labels, &diags))
	createReq.SetDefaultSubdomain(plan.DefaultSubdomain.ValueString())
	createReq.SetUserSettings(expandYandexOrganizationmanagerIdpUserpoolUserSettings(ctx, plan.UserSettings, &diags))
	createReq.SetPasswordQualityPolicy(expandYandexOrganizationmanagerIdpUserpoolPasswordQualityPolicy(ctx, plan.PasswordQualityPolicy, &diags))
	createReq.SetPasswordLifetimePolicy(expandYandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicy(ctx, plan.PasswordLifetimePolicy, &diags))
	createReq.SetBruteforceProtectionPolicy(expandYandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicy(ctx, plan.BruteforceProtectionPolicy, &diags))
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, fmt.Sprintf("Create userpool request: %s", validate.ProtoDump(createReq)))

	md := new(metadata.MD)
	op, err := idpsdk.NewUserpoolClient(r.providerConfig.SDKv2).Create(ctx, createReq, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("[DEBUG] Create userpool x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Create userpool x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		resp.Diagnostics.AddError(
			"Failed to Create resource",
			"Error while requesting API to create userpool:"+err.Error(),
		)
		return
	}
	createRes, err := op.Wait(ctx)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to Create Resource",
			fmt.Sprintf("An unexpected error occurred while waiting longrunning response. "+
				"Please retry the operation or report this issue to the provider developers.\n\n"+
				"Error: %s", err),
		)
		return
	}
	tflog.Debug(ctx, fmt.Sprintf("Create userpool response: %s", validate.ProtoDump(createRes)))

	plan.UserpoolId = types.StringValue(createRes.Id)

	reqApi := &idp.GetUserpoolRequest{}
	reqApi.SetUserpoolId(plan.UserpoolId.ValueString())
	tflog.Debug(ctx, fmt.Sprintf("Read userpool request: %s", validate.ProtoDump(reqApi)))

	md = new(metadata.MD)
	res, err := idpsdk.NewUserpoolClient(r.providerConfig.SDKv2).Get(ctx, reqApi, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read userpool x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read userpool x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		if validate.IsStatusWithCode(err, codes.NotFound) {
			resp.Diagnostics.AddWarning(
				"Failed to Read resource",
				"userpool not found",
			)
		} else {
			resp.Diagnostics.AddError(
				"Failed to Read resource",
				"Error while requesting API to get userpool:"+err.Error(),
			)
		}
	}
	tflog.Debug(ctx, fmt.Sprintf("Read userpool response: %s", validate.ProtoDump(res)))

	if resp.Diagnostics.HasError() {
		return
	}

	// diagnostics don't have errors and resource is nil => resource not found
	if res == nil {
		resp.Diagnostics.AddError("Failed to read", "Resource not found")
		return
	}

	newState := flattenYandexOrganizationmanagerIdpUserpool(ctx, res, plan, plan.Timeouts, &resp.Diagnostics)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &newState)...)
	if resp.Diagnostics.HasError() {
		return
	}
}

func (r *yandexOrganizationmanagerIdpUserpoolResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state yandexOrganizationmanagerIdpUserpoolModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	deleteTimeout, timeoutInitError := state.Timeouts.Delete(ctx, provider_config.DefaultTimeout)
	if timeoutInitError != nil {
		resp.Diagnostics.Append(timeoutInitError...)
		return
	}

	ctx, cancel := context.WithTimeout(ctx, deleteTimeout)
	defer cancel()

	reqApi := &idp.DeleteUserpoolRequest{}
	id := state.ID.ValueString()
	if !state.UserpoolId.IsUnknown() && !state.UserpoolId.IsNull() {
		id = state.UserpoolId.ValueString()
	}
	reqApi.SetUserpoolId(id)
	tflog.Debug(ctx, fmt.Sprintf("Delete userpool request: %s", validate.ProtoDump(reqApi)))

	md := new(metadata.MD)

	op, err := idpsdk.NewUserpoolClient(r.providerConfig.SDKv2).Delete(ctx, reqApi, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Delete userpool x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Delete userpool x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		resp.Diagnostics.AddError(
			"Failed to Delete resource",
			"Error while requesting API to delete userpool:"+err.Error(),
		)
		return
	}
	deleteRes, err := op.Wait(ctx)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to Delete Resource",
			fmt.Sprintf("An unexpected error occurred while waiting longrunning response. "+
				"Please retry the operation or report this issue to the provider developers.\n\n"+
				"Error: %s", err),
		)
		return
	}
	tflog.Debug(ctx, fmt.Sprintf("[DEBUG] Delete userpool response: %s", validate.ProtoDump(deleteRes)))
}

func (r *yandexOrganizationmanagerIdpUserpoolResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state yandexOrganizationmanagerIdpUserpoolModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	diags = req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	updateTimeout, timeoutInitError := plan.Timeouts.Update(ctx, provider_config.DefaultTimeout)
	if timeoutInitError != nil {
		resp.Diagnostics.Append(timeoutInitError...)
		return
	}

	ctx, cancel := context.WithTimeout(ctx, updateTimeout)
	defer cancel()
	var updatePaths []string

	var yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyState, yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyPlan yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyModel
	resp.Diagnostics.Append(plan.BruteforceProtectionPolicy.As(ctx, &yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(state.BruteforceProtectionPolicy.As(ctx, &yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyPlan.Attempts.Equal(yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyState.Attempts) {
		updatePaths = append(updatePaths, "bruteforce_protection_policy.attempts")
	}
	if !yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyPlan.Block.Equal(yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyState.Block) {
		updatePaths = append(updatePaths, "bruteforce_protection_policy.block")
	}
	if !yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyPlan.Window.Equal(yandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicyState.Window) {
		updatePaths = append(updatePaths, "bruteforce_protection_policy.window")
	}
	if !plan.Description.Equal(state.Description) {
		updatePaths = append(updatePaths, "description")
	}
	if plan.Labels.IsNull() {
		plan.Labels = types.MapNull(types.StringType)
	}
	if state.Labels.IsNull() {
		state.Labels = types.MapNull(types.StringType)
	}
	if !plan.Labels.Equal(state.Labels) {
		updatePaths = append(updatePaths, "labels")
	}
	if !plan.Name.Equal(state.Name) {
		updatePaths = append(updatePaths, "name")
	}

	var yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyState, yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyPlan yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyModel
	resp.Diagnostics.Append(plan.PasswordLifetimePolicy.As(ctx, &yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(state.PasswordLifetimePolicy.As(ctx, &yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyPlan.MaxDaysCount.Equal(yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyState.MaxDaysCount) {
		updatePaths = append(updatePaths, "password_lifetime_policy.max_days_count")
	}
	if !yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyPlan.MinDaysCount.Equal(yandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicyState.MinDaysCount) {
		updatePaths = append(updatePaths, "password_lifetime_policy.min_days_count")
	}

	var yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyState, yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyPlan yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyModel
	resp.Diagnostics.Append(plan.PasswordQualityPolicy.As(ctx, &yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(state.PasswordQualityPolicy.As(ctx, &yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyPlan.AllowSimilar.Equal(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyState.AllowSimilar) {
		updatePaths = append(updatePaths, "password_quality_policy.allow_similar")
	}
	if !yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyPlan.MatchLength.Equal(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyState.MatchLength) {
		updatePaths = append(updatePaths, "password_quality_policy.match_length")
	}
	if !yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyPlan.MaxLength.Equal(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyState.MaxLength) {
		updatePaths = append(updatePaths, "password_quality_policy.max_length")
	}
	if !yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyPlan.MinLength.Equal(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyState.MinLength) {
		updatePaths = append(updatePaths, "password_quality_policy.min_length")
	}

	var yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsState, yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsPlan yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsModel
	resp.Diagnostics.Append(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyPlan.MinLengthByClassSettings.As(ctx, &yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyState.MinLengthByClassSettings.As(ctx, &yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsPlan.One.Equal(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsState.One) {
		updatePaths = append(updatePaths, "password_quality_policy.min_length_by_class_settings.one")
	}
	if !yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsPlan.Three.Equal(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsState.Three) {
		updatePaths = append(updatePaths, "password_quality_policy.min_length_by_class_settings.three")
	}
	if !yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsPlan.Two.Equal(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyMinLengthByClassSettingsState.Two) {
		updatePaths = append(updatePaths, "password_quality_policy.min_length_by_class_settings.two")
	}

	var yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesState, yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesPlan yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesModel
	resp.Diagnostics.Append(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyPlan.RequiredClasses.As(ctx, &yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyState.RequiredClasses.As(ctx, &yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesPlan.Digits.Equal(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesState.Digits) {
		updatePaths = append(updatePaths, "password_quality_policy.required_classes.digits")
	}
	if !yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesPlan.Lowers.Equal(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesState.Lowers) {
		updatePaths = append(updatePaths, "password_quality_policy.required_classes.lowers")
	}
	if !yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesPlan.Specials.Equal(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesState.Specials) {
		updatePaths = append(updatePaths, "password_quality_policy.required_classes.specials")
	}
	if !yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesPlan.Uppers.Equal(yandexOrganizationmanagerIdpUserpoolPasswordQualityPolicyRequiredClassesState.Uppers) {
		updatePaths = append(updatePaths, "password_quality_policy.required_classes.uppers")
	}

	var yandexOrganizationmanagerIdpUserpoolUserSettingsState, yandexOrganizationmanagerIdpUserpoolUserSettingsPlan yandexOrganizationmanagerIdpUserpoolUserSettingsModel
	resp.Diagnostics.Append(plan.UserSettings.As(ctx, &yandexOrganizationmanagerIdpUserpoolUserSettingsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(state.UserSettings.As(ctx, &yandexOrganizationmanagerIdpUserpoolUserSettingsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexOrganizationmanagerIdpUserpoolUserSettingsPlan.AllowEditSelfContacts.Equal(yandexOrganizationmanagerIdpUserpoolUserSettingsState.AllowEditSelfContacts) {
		updatePaths = append(updatePaths, "user_settings.allow_edit_self_contacts")
	}
	if !yandexOrganizationmanagerIdpUserpoolUserSettingsPlan.AllowEditSelfInfo.Equal(yandexOrganizationmanagerIdpUserpoolUserSettingsState.AllowEditSelfInfo) {
		updatePaths = append(updatePaths, "user_settings.allow_edit_self_info")
	}
	if !yandexOrganizationmanagerIdpUserpoolUserSettingsPlan.AllowEditSelfLogin.Equal(yandexOrganizationmanagerIdpUserpoolUserSettingsState.AllowEditSelfLogin) {
		updatePaths = append(updatePaths, "user_settings.allow_edit_self_login")
	}
	if !yandexOrganizationmanagerIdpUserpoolUserSettingsPlan.AllowEditSelfPassword.Equal(yandexOrganizationmanagerIdpUserpoolUserSettingsState.AllowEditSelfPassword) {
		updatePaths = append(updatePaths, "user_settings.allow_edit_self_password")
	}
	if !plan.UserpoolId.Equal(state.UserpoolId) {
		updatePaths = append(updatePaths, "userpool_id")
	}
	if len(updatePaths) != 0 {

		updateReq := &idp.UpdateUserpoolRequest{}
		id := plan.ID.ValueString()
		if !plan.UserpoolId.IsUnknown() && !plan.UserpoolId.IsNull() {
			id = plan.UserpoolId.ValueString()
		}
		updateReq.SetUserpoolId(id)
		updateReq.SetName(plan.Name.ValueString())
		updateReq.SetDescription(plan.Description.ValueString())
		updateReq.SetLabels(expandYandexOrganizationmanagerIdpUserpoolLabels(ctx, plan.Labels, &diags))
		updateReq.SetUserSettings(expandYandexOrganizationmanagerIdpUserpoolUserSettings(ctx, plan.UserSettings, &diags))
		updateReq.SetPasswordQualityPolicy(expandYandexOrganizationmanagerIdpUserpoolPasswordQualityPolicy(ctx, plan.PasswordQualityPolicy, &diags))
		updateReq.SetPasswordLifetimePolicy(expandYandexOrganizationmanagerIdpUserpoolPasswordLifetimePolicy(ctx, plan.PasswordLifetimePolicy, &diags))
		updateReq.SetBruteforceProtectionPolicy(expandYandexOrganizationmanagerIdpUserpoolBruteforceProtectionPolicy(ctx, plan.BruteforceProtectionPolicy, &diags))
		updateReq.SetUpdateMask(&field_mask.FieldMask{Paths: updatePaths})

		resp.Diagnostics.Append(diags...)
		if resp.Diagnostics.HasError() {
			return
		}
		tflog.Debug(ctx, fmt.Sprintf("Update userpool request: %s", validate.ProtoDump(updateReq)))

		md := new(metadata.MD)
		op, err := idpsdk.NewUserpoolClient(r.providerConfig.SDKv2).Update(ctx, updateReq, grpc.Header(md))
		if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
			tflog.Debug(ctx, fmt.Sprintf("Update userpool x-server-trace-id: %s", traceHeader[0]))
		}
		if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
			tflog.Debug(ctx, fmt.Sprintf("Update userpool x-server-request-id: %s", traceHeader[0]))
		}
		if err != nil {
			resp.Diagnostics.AddError(
				"Failed to Read resource",
				"Error while requesting API to update userpool:"+err.Error(),
			)
			return
		}
		updateRes, err := op.Wait(ctx)
		if err != nil {
			resp.Diagnostics.AddError(
				"Unable to Update Resource",
				fmt.Sprintf("An unexpected error occurred while waiting longrunning response. "+
					"Please retry the operation or report this issue to the provider developers.\n\n"+
					"Error: %s", err),
			)
			return
		}
		tflog.Debug(ctx, fmt.Sprintf("Update userpool response: %s", validate.ProtoDump(updateRes)))

		plan.UserpoolId = types.StringValue(updateRes.Id)
	}
	reqApi := &idp.GetUserpoolRequest{}
	reqApi.SetUserpoolId(plan.UserpoolId.ValueString())
	tflog.Debug(ctx, fmt.Sprintf("Read userpool request: %s", validate.ProtoDump(reqApi)))
	md := new(metadata.MD)
	res, err := idpsdk.NewUserpoolClient(r.providerConfig.SDKv2).Get(ctx, reqApi, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read userpool x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read userpool x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		if validate.IsStatusWithCode(err, codes.NotFound) {
			resp.Diagnostics.AddWarning(
				"Failed to Read resource",
				"userpool not found",
			)
		} else {
			resp.Diagnostics.AddError(
				"Failed to Read resource",
				"Error while requesting API to get userpool:"+err.Error(),
			)
		}
	}
	tflog.Debug(ctx, fmt.Sprintf("Read userpool response: %s", validate.ProtoDump(res)))

	if resp.Diagnostics.HasError() {
		return
	}

	// diagnostics don't have errors and resource is nil => resource not found
	if res == nil {
		resp.Diagnostics.AddError("Failed to read", "Resource not found")
		return
	}

	to := state.Timeouts
	if !plan.Timeouts.Equal(state.Timeouts) {
		to = plan.Timeouts
	}

	newState := flattenYandexOrganizationmanagerIdpUserpool(ctx, res, plan, to, &resp.Diagnostics)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &newState)...)
	if resp.Diagnostics.HasError() {
		return
	}
}

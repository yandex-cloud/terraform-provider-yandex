// Code generated by tfgen. DO NOT EDIT.

package yandex_kms_asymmetric_signature_key

import (
	"context"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	asymmetricsignature "github.com/yandex-cloud/go-genproto/yandex/cloud/kms/v1/asymmetricsignature"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/converter"
)

type yandexKmsAsymmetricSignatureKeyModel struct {
	AsymmetricSignatureKeyId types.String   `tfsdk:"asymmetric_signature_key_id"`
	ID                       types.String   `tfsdk:"id"`
	CreatedAt                types.String   `tfsdk:"created_at"`
	DeletionProtection       types.Bool     `tfsdk:"deletion_protection"`
	Description              types.String   `tfsdk:"description"`
	FolderId                 types.String   `tfsdk:"folder_id"`
	Labels                   types.Map      `tfsdk:"labels"`
	Name                     types.String   `tfsdk:"name"`
	SignatureAlgorithm       types.String   `tfsdk:"signature_algorithm"`
	Status                   types.String   `tfsdk:"status"`
	Timeouts                 timeouts.Value `tfsdk:"timeouts"`
}

func (m *yandexKmsAsymmetricSignatureKeyModel) GetAsymmetricSignatureKeyId() types.String {
	return m.AsymmetricSignatureKeyId
}
func (m *yandexKmsAsymmetricSignatureKeyModel) GetID() types.String {
	return m.ID
}
func (m *yandexKmsAsymmetricSignatureKeyModel) GetCreatedAt() types.String {
	return m.CreatedAt
}
func (m *yandexKmsAsymmetricSignatureKeyModel) GetDeletionProtection() types.Bool {
	return m.DeletionProtection
}
func (m *yandexKmsAsymmetricSignatureKeyModel) GetDescription() types.String {
	return m.Description
}
func (m *yandexKmsAsymmetricSignatureKeyModel) GetFolderId() types.String {
	return m.FolderId
}
func (m *yandexKmsAsymmetricSignatureKeyModel) GetLabels() types.Map {
	return m.Labels
}
func (m *yandexKmsAsymmetricSignatureKeyModel) GetName() types.String {
	return m.Name
}
func (m *yandexKmsAsymmetricSignatureKeyModel) GetSignatureAlgorithm() types.String {
	return m.SignatureAlgorithm
}
func (m *yandexKmsAsymmetricSignatureKeyModel) GetStatus() types.String {
	return m.Status
}

func NewYandexKmsAsymmetricSignatureKeyModel() yandexKmsAsymmetricSignatureKeyModel {
	return yandexKmsAsymmetricSignatureKeyModel{
		AsymmetricSignatureKeyId: types.StringNull(),
		ID:                       types.StringNull(),
		CreatedAt:                types.StringNull(),
		DeletionProtection:       types.BoolNull(),
		Description:              types.StringNull(),
		FolderId:                 types.StringNull(),
		Labels:                   types.MapNull(types.StringType),
		Name:                     types.StringNull(),
		SignatureAlgorithm:       types.StringNull(),
		Status:                   types.StringNull(),
	}
}

func yandexKmsAsymmetricSignatureKeyModelFillUnknown(target yandexKmsAsymmetricSignatureKeyModel) yandexKmsAsymmetricSignatureKeyModel {
	if target.AsymmetricSignatureKeyId.IsUnknown() || target.AsymmetricSignatureKeyId.IsNull() {
		target.AsymmetricSignatureKeyId = types.StringNull()
	}
	if target.ID.IsUnknown() || target.ID.IsNull() {
		target.ID = types.StringNull()
	}
	if target.CreatedAt.IsUnknown() || target.CreatedAt.IsNull() {
		target.CreatedAt = types.StringNull()
	}
	if target.DeletionProtection.IsUnknown() || target.DeletionProtection.IsNull() {
		target.DeletionProtection = types.BoolNull()
	}
	if target.Description.IsUnknown() || target.Description.IsNull() {
		target.Description = types.StringNull()
	}
	if target.FolderId.IsUnknown() || target.FolderId.IsNull() {
		target.FolderId = types.StringNull()
	}
	if target.Labels.IsUnknown() || target.Labels.IsNull() {
		target.Labels = types.MapNull(types.StringType)
	}
	if target.Name.IsUnknown() || target.Name.IsNull() {
		target.Name = types.StringNull()
	}
	if target.SignatureAlgorithm.IsUnknown() || target.SignatureAlgorithm.IsNull() {
		target.SignatureAlgorithm = types.StringNull()
	}
	if target.Status.IsUnknown() || target.Status.IsNull() {
		target.Status = types.StringNull()
	}
	return target
}

var yandexKmsAsymmetricSignatureKeyModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"asymmetric_signature_key_id": types.StringType,
		"id":                          types.StringType,
		"created_at":                  types.StringType,
		"deletion_protection":         types.BoolType,
		"description":                 types.StringType,
		"folder_id":                   types.StringType,
		"labels":                      types.MapType{ElemType: types.StringType},
		"name":                        types.StringType,
		"signature_algorithm":         types.StringType,
		"status":                      types.StringType,
		"timeouts":                    timeouts.BlockAll(context.Background()).Type(),
	},
}

func flattenYandexKmsAsymmetricSignatureKey(ctx context.Context,
	yandexKmsAsymmetricSignatureKey *asymmetricsignature.AsymmetricSignatureKey,
	state yandexKmsAsymmetricSignatureKeyModel,
	to timeouts.Value,
	diags *diag.Diagnostics) types.Object {
	if yandexKmsAsymmetricSignatureKey == nil {
		return types.ObjectNull(yandexKmsAsymmetricSignatureKeyModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexKmsAsymmetricSignatureKeyModelType.AttrTypes, yandexKmsAsymmetricSignatureKeyModel{
		AsymmetricSignatureKeyId: types.StringValue(yandexKmsAsymmetricSignatureKey.GetId()),
		ID:                       types.StringValue(yandexKmsAsymmetricSignatureKey.GetId()),
		CreatedAt:                types.StringValue(yandexKmsAsymmetricSignatureKey.GetCreatedAt().AsTime().Format(time.RFC3339)),
		DeletionProtection:       types.BoolValue(yandexKmsAsymmetricSignatureKey.GetDeletionProtection()),
		Description:              types.StringValue(yandexKmsAsymmetricSignatureKey.GetDescription()),
		FolderId:                 types.StringValue(yandexKmsAsymmetricSignatureKey.GetFolderId()),
		Labels:                   flattenYandexKmsAsymmetricSignatureKeyLabels(ctx, yandexKmsAsymmetricSignatureKey.GetLabels(), state.Labels, diags),
		Name:                     types.StringValue(yandexKmsAsymmetricSignatureKey.GetName()),
		SignatureAlgorithm:       types.StringValue(yandexKmsAsymmetricSignatureKey.GetSignatureAlgorithm().String()),
		Status:                   types.StringValue(yandexKmsAsymmetricSignatureKey.GetStatus().String()),
		Timeouts:                 to,
	})
	diags.Append(diag...)
	return value
}

func expandYandexKmsAsymmetricSignatureKey(ctx context.Context, yandexKmsAsymmetricSignatureKeyState types.Object, diags *diag.Diagnostics) *asymmetricsignature.AsymmetricSignatureKey {
	if yandexKmsAsymmetricSignatureKeyState.IsNull() || yandexKmsAsymmetricSignatureKeyState.IsUnknown() {
		return nil
	}
	var yandexKmsAsymmetricSignatureKey yandexKmsAsymmetricSignatureKeyModel
	diags.Append(yandexKmsAsymmetricSignatureKeyState.As(ctx, &yandexKmsAsymmetricSignatureKey, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexKmsAsymmetricSignatureKeyModel(ctx, yandexKmsAsymmetricSignatureKey, diags)
}

func expandYandexKmsAsymmetricSignatureKeyModel(ctx context.Context, yandexKmsAsymmetricSignatureKeyState yandexKmsAsymmetricSignatureKeyModel, diags *diag.Diagnostics) *asymmetricsignature.AsymmetricSignatureKey {
	value := &asymmetricsignature.AsymmetricSignatureKey{}
	value.SetId(yandexKmsAsymmetricSignatureKeyState.AsymmetricSignatureKeyId.ValueString())
	value.SetId(yandexKmsAsymmetricSignatureKeyState.AsymmetricSignatureKeyId.ValueString())
	value.SetCreatedAt(converter.ParseTimestamp(yandexKmsAsymmetricSignatureKeyState.CreatedAt.ValueString(), diags))
	value.SetDeletionProtection(yandexKmsAsymmetricSignatureKeyState.DeletionProtection.ValueBool())
	value.SetDescription(yandexKmsAsymmetricSignatureKeyState.Description.ValueString())
	value.SetFolderId(yandexKmsAsymmetricSignatureKeyState.FolderId.ValueString())
	value.SetLabels(expandYandexKmsAsymmetricSignatureKeyLabels(ctx, yandexKmsAsymmetricSignatureKeyState.Labels, diags))
	value.SetName(yandexKmsAsymmetricSignatureKeyState.Name.ValueString())
	value.SetSignatureAlgorithm(asymmetricsignature.AsymmetricSignatureAlgorithm(asymmetricsignature.AsymmetricSignatureAlgorithm_value[yandexKmsAsymmetricSignatureKeyState.SignatureAlgorithm.ValueString()]))
	value.SetStatus(asymmetricsignature.AsymmetricSignatureKey_Status(asymmetricsignature.AsymmetricSignatureKey_Status_value[yandexKmsAsymmetricSignatureKeyState.Status.ValueString()]))
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexKmsAsymmetricSignatureKeyLabels(ctx context.Context, yandexKmsAsymmetricSignatureKeyLabels map[string]string, listState types.Map, diags *diag.Diagnostics) types.Map {
	if yandexKmsAsymmetricSignatureKeyLabels == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.MapNull(types.StringType)
	}
	yandexKmsAsymmetricSignatureKeyLabelsValues := make(map[string]attr.Value)
	for k, elem := range yandexKmsAsymmetricSignatureKeyLabels {
		val := types.StringValue(elem)
		yandexKmsAsymmetricSignatureKeyLabelsValues[k] = val
	}

	value, diag := types.MapValue(types.StringType, yandexKmsAsymmetricSignatureKeyLabelsValues)
	diags.Append(diag...)
	return value
}

func expandYandexKmsAsymmetricSignatureKeyLabels(ctx context.Context, yandexKmsAsymmetricSignatureKeyLabelsState types.Map, diags *diag.Diagnostics) map[string]string {
	if yandexKmsAsymmetricSignatureKeyLabelsState.IsNull() || yandexKmsAsymmetricSignatureKeyLabelsState.IsUnknown() {
		return nil
	}
	if len(yandexKmsAsymmetricSignatureKeyLabelsState.Elements()) == 0 {
		return map[string]string{}
	}
	yandexKmsAsymmetricSignatureKeyLabelsRes := make(map[string]string)
	yandexKmsAsymmetricSignatureKeyLabelsType := make(map[string]types.String)
	diags.Append(yandexKmsAsymmetricSignatureKeyLabelsState.ElementsAs(ctx, &yandexKmsAsymmetricSignatureKeyLabelsType, false)...)
	if diags.HasError() {
		return nil
	}
	for k, elem := range yandexKmsAsymmetricSignatureKeyLabelsType {
		yandexKmsAsymmetricSignatureKeyLabelsRes[k] = elem.ValueString()
	}
	return yandexKmsAsymmetricSignatureKeyLabelsRes
}

// Code generated by tfgen. DO NOT EDIT.

package yandex_container_repository

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	containerregistry "github.com/yandex-cloud/go-genproto/yandex/cloud/containerregistry/v1"
)

type yandexContainerRepositoryModel struct {
	Name         types.String   `tfsdk:"name"`
	RepositoryId types.String   `tfsdk:"repository_id"`
	ID           types.String   `tfsdk:"id"`
	Timeouts     timeouts.Value `tfsdk:"timeouts"`
}

func (m *yandexContainerRepositoryModel) GetName() types.String {
	return m.Name
}
func (m *yandexContainerRepositoryModel) GetRepositoryId() types.String {
	return m.RepositoryId
}
func (m *yandexContainerRepositoryModel) GetID() types.String {
	return m.ID
}

func NewYandexContainerRepositoryModel() yandexContainerRepositoryModel {
	return yandexContainerRepositoryModel{
		Name:         types.StringNull(),
		RepositoryId: types.StringNull(),
		ID:           types.StringNull(),
	}
}

func yandexContainerRepositoryModelFillUnknown(target yandexContainerRepositoryModel) yandexContainerRepositoryModel {
	if target.Name.IsUnknown() || target.Name.IsNull() {
		target.Name = types.StringNull()
	}
	if target.RepositoryId.IsUnknown() || target.RepositoryId.IsNull() {
		target.RepositoryId = types.StringNull()
	}
	if target.ID.IsUnknown() || target.ID.IsNull() {
		target.ID = types.StringNull()
	}
	return target
}

var yandexContainerRepositoryModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"name":          types.StringType,
		"repository_id": types.StringType,
		"id":            types.StringType,
		"timeouts":      timeouts.BlockAll(context.Background()).Type(),
	},
}

func flattenYandexContainerRepository(ctx context.Context,
	yandexContainerRepository *containerregistry.Repository,
	state yandexContainerRepositoryModel,
	to timeouts.Value,
	diags *diag.Diagnostics) types.Object {
	if yandexContainerRepository == nil {
		return types.ObjectNull(yandexContainerRepositoryModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexContainerRepositoryModelType.AttrTypes, yandexContainerRepositoryModel{
		Name:         types.StringValue(yandexContainerRepository.GetName()),
		RepositoryId: types.StringValue(yandexContainerRepository.GetId()),
		ID:           types.StringValue(yandexContainerRepository.GetId()),
		Timeouts:     to,
	})
	diags.Append(diag...)
	return value
}

func expandYandexContainerRepository(ctx context.Context, yandexContainerRepositoryState types.Object, diags *diag.Diagnostics) *containerregistry.Repository {
	if yandexContainerRepositoryState.IsNull() || yandexContainerRepositoryState.IsUnknown() {
		return nil
	}
	var yandexContainerRepository yandexContainerRepositoryModel
	diags.Append(yandexContainerRepositoryState.As(ctx, &yandexContainerRepository, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexContainerRepositoryModel(ctx, yandexContainerRepository, diags)
}

func expandYandexContainerRepositoryModel(ctx context.Context, yandexContainerRepositoryState yandexContainerRepositoryModel, diags *diag.Diagnostics) *containerregistry.Repository {
	value := &containerregistry.Repository{}
	value.SetName(yandexContainerRepositoryState.Name.ValueString())
	value.SetId(yandexContainerRepositoryState.RepositoryId.ValueString())
	value.SetId(yandexContainerRepositoryState.RepositoryId.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

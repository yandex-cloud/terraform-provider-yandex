// Code generated by tfgen. DO NOT EDIT.

package yandex_lb_target_group

import (
	"context"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	loadbalancer "github.com/yandex-cloud/go-genproto/yandex/cloud/loadbalancer/v1"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/converter"
)

type yandexLbTargetGroupTargetStructModel struct {
	Address  types.String `tfsdk:"address"`
	SubnetId types.String `tfsdk:"subnet_id"`
}

func (m *yandexLbTargetGroupTargetStructModel) GetAddress() types.String {
	return m.Address
}
func (m *yandexLbTargetGroupTargetStructModel) GetSubnetId() types.String {
	return m.SubnetId
}

func NewYandexLbTargetGroupTargetStructModel() yandexLbTargetGroupTargetStructModel {
	return yandexLbTargetGroupTargetStructModel{
		Address:  types.StringNull(),
		SubnetId: types.StringNull(),
	}
}

func yandexLbTargetGroupTargetStructModelFillUnknown(target yandexLbTargetGroupTargetStructModel) yandexLbTargetGroupTargetStructModel {
	if target.Address.IsUnknown() || target.Address.IsNull() {
		target.Address = types.StringNull()
	}
	if target.SubnetId.IsUnknown() || target.SubnetId.IsNull() {
		target.SubnetId = types.StringNull()
	}
	return target
}

var yandexLbTargetGroupTargetStructModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"address":   types.StringType,
		"subnet_id": types.StringType,
	},
}

func flattenYandexLbTargetGroupTargetStruct(ctx context.Context,
	yandexLbTargetGroupTargetStruct *loadbalancer.Target,
	diags *diag.Diagnostics) types.Object {
	if yandexLbTargetGroupTargetStruct == nil {
		return types.ObjectNull(yandexLbTargetGroupTargetStructModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexLbTargetGroupTargetStructModelType.AttrTypes, yandexLbTargetGroupTargetStructModel{
		Address:  types.StringValue(yandexLbTargetGroupTargetStruct.GetAddress()),
		SubnetId: types.StringValue(yandexLbTargetGroupTargetStruct.GetSubnetId()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexLbTargetGroupTargetStruct(ctx context.Context, yandexLbTargetGroupTargetStructState types.Object, diags *diag.Diagnostics) *loadbalancer.Target {
	if yandexLbTargetGroupTargetStructState.IsNull() || yandexLbTargetGroupTargetStructState.IsUnknown() {
		return nil
	}
	var yandexLbTargetGroupTargetStruct yandexLbTargetGroupTargetStructModel
	diags.Append(yandexLbTargetGroupTargetStructState.As(ctx, &yandexLbTargetGroupTargetStruct, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexLbTargetGroupTargetStructModel(ctx, yandexLbTargetGroupTargetStruct, diags)
}

func expandYandexLbTargetGroupTargetStructModel(ctx context.Context, yandexLbTargetGroupTargetStructState yandexLbTargetGroupTargetStructModel, diags *diag.Diagnostics) *loadbalancer.Target {
	value := &loadbalancer.Target{}
	value.SetAddress(yandexLbTargetGroupTargetStructState.Address.ValueString())
	value.SetSubnetId(yandexLbTargetGroupTargetStructState.SubnetId.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexLbTargetGroupModel struct {
	CreatedAt     types.String   `tfsdk:"created_at"`
	Description   types.String   `tfsdk:"description"`
	FolderId      types.String   `tfsdk:"folder_id"`
	Labels        types.Map      `tfsdk:"labels"`
	Name          types.String   `tfsdk:"name"`
	RegionId      types.String   `tfsdk:"region_id"`
	Target        types.Set      `tfsdk:"target"`
	TargetGroupId types.String   `tfsdk:"target_group_id"`
	ID            types.String   `tfsdk:"id"`
	Timeouts      timeouts.Value `tfsdk:"timeouts"`
}

func (m *yandexLbTargetGroupModel) GetCreatedAt() types.String {
	return m.CreatedAt
}
func (m *yandexLbTargetGroupModel) GetDescription() types.String {
	return m.Description
}
func (m *yandexLbTargetGroupModel) GetFolderId() types.String {
	return m.FolderId
}
func (m *yandexLbTargetGroupModel) GetLabels() types.Map {
	return m.Labels
}
func (m *yandexLbTargetGroupModel) GetName() types.String {
	return m.Name
}
func (m *yandexLbTargetGroupModel) GetRegionId() types.String {
	return m.RegionId
}
func (m *yandexLbTargetGroupModel) GetTarget() types.Set {
	return m.Target
}
func (m *yandexLbTargetGroupModel) GetTargetGroupId() types.String {
	return m.TargetGroupId
}
func (m *yandexLbTargetGroupModel) GetID() types.String {
	return m.ID
}

func NewYandexLbTargetGroupModel() yandexLbTargetGroupModel {
	return yandexLbTargetGroupModel{
		CreatedAt:     types.StringNull(),
		Description:   types.StringNull(),
		FolderId:      types.StringNull(),
		Labels:        types.MapNull(types.StringType),
		Name:          types.StringNull(),
		RegionId:      types.StringNull(),
		Target:        types.SetNull(yandexLbTargetGroupTargetStructModelType),
		TargetGroupId: types.StringNull(),
		ID:            types.StringNull(),
	}
}

func yandexLbTargetGroupModelFillUnknown(target yandexLbTargetGroupModel) yandexLbTargetGroupModel {
	if target.CreatedAt.IsUnknown() || target.CreatedAt.IsNull() {
		target.CreatedAt = types.StringNull()
	}
	if target.Description.IsUnknown() || target.Description.IsNull() {
		target.Description = types.StringNull()
	}
	if target.FolderId.IsUnknown() || target.FolderId.IsNull() {
		target.FolderId = types.StringNull()
	}
	if target.Labels.IsUnknown() || target.Labels.IsNull() {
		target.Labels = types.MapNull(types.StringType)
	}
	if target.Name.IsUnknown() || target.Name.IsNull() {
		target.Name = types.StringNull()
	}
	if target.RegionId.IsUnknown() || target.RegionId.IsNull() {
		target.RegionId = types.StringNull()
	}
	if target.Target.IsUnknown() || target.Target.IsNull() {
		target.Target = types.SetNull(yandexLbTargetGroupTargetStructModelType)
	}
	if target.TargetGroupId.IsUnknown() || target.TargetGroupId.IsNull() {
		target.TargetGroupId = types.StringNull()
	}
	if target.ID.IsUnknown() || target.ID.IsNull() {
		target.ID = types.StringNull()
	}
	return target
}

var yandexLbTargetGroupModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"created_at":      types.StringType,
		"description":     types.StringType,
		"folder_id":       types.StringType,
		"labels":          types.MapType{ElemType: types.StringType},
		"name":            types.StringType,
		"region_id":       types.StringType,
		"target":          types.SetType{ElemType: yandexLbTargetGroupTargetStructModelType},
		"target_group_id": types.StringType,
		"id":              types.StringType,
		"timeouts":        timeouts.BlockAll(context.Background()).Type(),
	},
}

func flattenYandexLbTargetGroup(ctx context.Context,
	yandexLbTargetGroup *loadbalancer.TargetGroup,
	state yandexLbTargetGroupModel,
	to timeouts.Value,
	diags *diag.Diagnostics) types.Object {
	if yandexLbTargetGroup == nil {
		return types.ObjectNull(yandexLbTargetGroupModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexLbTargetGroupModelType.AttrTypes, yandexLbTargetGroupModel{
		CreatedAt:     types.StringValue(yandexLbTargetGroup.GetCreatedAt().AsTime().Format(time.RFC3339)),
		Description:   types.StringValue(yandexLbTargetGroup.GetDescription()),
		FolderId:      types.StringValue(yandexLbTargetGroup.GetFolderId()),
		Labels:        flattenYandexLbTargetGroupLabels(ctx, yandexLbTargetGroup.GetLabels(), state.Labels, diags),
		Name:          types.StringValue(yandexLbTargetGroup.GetName()),
		RegionId:      types.StringValue(yandexLbTargetGroup.GetRegionId()),
		Target:        flattenYandexLbTargetGroupTarget(ctx, yandexLbTargetGroup.GetTargets(), state.Target, diags),
		TargetGroupId: types.StringValue(yandexLbTargetGroup.GetId()),
		ID:            types.StringValue(yandexLbTargetGroup.GetId()),
		Timeouts:      to,
	})
	diags.Append(diag...)
	return value
}

func expandYandexLbTargetGroup(ctx context.Context, yandexLbTargetGroupState types.Object, diags *diag.Diagnostics) *loadbalancer.TargetGroup {
	if yandexLbTargetGroupState.IsNull() || yandexLbTargetGroupState.IsUnknown() {
		return nil
	}
	var yandexLbTargetGroup yandexLbTargetGroupModel
	diags.Append(yandexLbTargetGroupState.As(ctx, &yandexLbTargetGroup, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexLbTargetGroupModel(ctx, yandexLbTargetGroup, diags)
}

func expandYandexLbTargetGroupModel(ctx context.Context, yandexLbTargetGroupState yandexLbTargetGroupModel, diags *diag.Diagnostics) *loadbalancer.TargetGroup {
	value := &loadbalancer.TargetGroup{}
	value.SetCreatedAt(converter.ParseTimestamp(yandexLbTargetGroupState.CreatedAt.ValueString(), diags))
	value.SetDescription(yandexLbTargetGroupState.Description.ValueString())
	value.SetFolderId(yandexLbTargetGroupState.FolderId.ValueString())
	value.SetLabels(expandYandexLbTargetGroupLabels(ctx, yandexLbTargetGroupState.Labels, diags))
	value.SetName(yandexLbTargetGroupState.Name.ValueString())
	value.SetRegionId(yandexLbTargetGroupState.RegionId.ValueString())
	value.SetTargets(expandYandexLbTargetGroupTarget(ctx, yandexLbTargetGroupState.Target, diags))
	value.SetId(yandexLbTargetGroupState.TargetGroupId.ValueString())
	value.SetId(yandexLbTargetGroupState.TargetGroupId.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexLbTargetGroupLabels(ctx context.Context, yandexLbTargetGroupLabels map[string]string, listState types.Map, diags *diag.Diagnostics) types.Map {
	if yandexLbTargetGroupLabels == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.MapNull(types.StringType)
	}
	yandexLbTargetGroupLabelsValues := make(map[string]attr.Value)
	for k, elem := range yandexLbTargetGroupLabels {
		val := types.StringValue(elem)
		yandexLbTargetGroupLabelsValues[k] = val
	}

	value, diag := types.MapValue(types.StringType, yandexLbTargetGroupLabelsValues)
	diags.Append(diag...)
	return value
}

func expandYandexLbTargetGroupLabels(ctx context.Context, yandexLbTargetGroupLabelsState types.Map, diags *diag.Diagnostics) map[string]string {
	if yandexLbTargetGroupLabelsState.IsNull() || yandexLbTargetGroupLabelsState.IsUnknown() {
		return nil
	}
	if len(yandexLbTargetGroupLabelsState.Elements()) == 0 {
		return map[string]string{}
	}
	yandexLbTargetGroupLabelsRes := make(map[string]string)
	yandexLbTargetGroupLabelsType := make(map[string]types.String)
	diags.Append(yandexLbTargetGroupLabelsState.ElementsAs(ctx, &yandexLbTargetGroupLabelsType, false)...)
	if diags.HasError() {
		return nil
	}
	for k, elem := range yandexLbTargetGroupLabelsType {
		yandexLbTargetGroupLabelsRes[k] = elem.ValueString()
	}
	return yandexLbTargetGroupLabelsRes
}

func flattenYandexLbTargetGroupTarget(ctx context.Context, yandexLbTargetGroupTarget []*loadbalancer.Target, listState types.Set, diags *diag.Diagnostics) types.Set {
	if yandexLbTargetGroupTarget == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.SetNull(yandexLbTargetGroupTargetStructModelType)
	}
	var yandexLbTargetGroupTargetValues []attr.Value
	for _, elem := range yandexLbTargetGroupTarget {
		val := flattenYandexLbTargetGroupTargetStruct(ctx, elem, diags)
		yandexLbTargetGroupTargetValues = append(yandexLbTargetGroupTargetValues, val)
	}

	value, diag := types.SetValue(yandexLbTargetGroupTargetStructModelType, yandexLbTargetGroupTargetValues)
	diags.Append(diag...)
	return value
}

func expandYandexLbTargetGroupTarget(ctx context.Context, yandexLbTargetGroupTargetState types.Set, diags *diag.Diagnostics) []*loadbalancer.Target {
	if yandexLbTargetGroupTargetState.IsNull() || yandexLbTargetGroupTargetState.IsUnknown() {
		return nil
	}
	if len(yandexLbTargetGroupTargetState.Elements()) == 0 {
		return []*loadbalancer.Target{}
	}
	yandexLbTargetGroupTargetRes := make([]*loadbalancer.Target, 0, len(yandexLbTargetGroupTargetState.Elements()))
	yandexLbTargetGroupTargetType := make([]yandexLbTargetGroupTargetStructModel, 0, len(yandexLbTargetGroupTargetState.Elements()))
	diags.Append(yandexLbTargetGroupTargetState.ElementsAs(ctx, &yandexLbTargetGroupTargetType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexLbTargetGroupTargetType {
		yandexLbTargetGroupTargetRes = append(yandexLbTargetGroupTargetRes, expandYandexLbTargetGroupTargetStructModel(ctx, elem, diags))
	}
	return yandexLbTargetGroupTargetRes
}
